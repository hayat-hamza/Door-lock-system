
MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00003d36  00003dca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006e  00800094  00800094  00003dfe  2**0
                  ALLOC
  3 .stab         00003858  00000000  00000000  00003e00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001453  00000000  00000000  00007658  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008aab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a9a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b88f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c63c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c79c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ca29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d1f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 6e 1b 	jmp	0x36dc	; 0x36dc <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 3b 1b 	jmp	0x3676	; 0x3676 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 30       	cpi	r26, 0x02	; 2
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 99 1e 	jmp	0x3d32	; 0x3d32 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1d 1e 	jmp	0x3c3a	; 0x3c3a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e8       	ldi	r26, 0x8A	; 138
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 39 1e 	jmp	0x3c72	; 0x3c72 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 29 1e 	jmp	0x3c52	; 0x3c52 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 45 1e 	jmp	0x3c8a	; 0x3c8a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 29 1e 	jmp	0x3c52	; 0x3c52 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 45 1e 	jmp	0x3c8a	; 0x3c8a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1d 1e 	jmp	0x3c3a	; 0x3c3a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8a e8       	ldi	r24, 0x8A	; 138
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 39 1e 	jmp	0x3c72	; 0x3c72 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 29 1e 	jmp	0x3c52	; 0x3c52 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 45 1e 	jmp	0x3c8a	; 0x3c8a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 29 1e 	jmp	0x3c52	; 0x3c52 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 45 1e 	jmp	0x3c8a	; 0x3c8a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 29 1e 	jmp	0x3c52	; 0x3c52 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 45 1e 	jmp	0x3c8a	; 0x3c8a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 49 1e 	jmp	0x3c92	; 0x3c92 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
 * and transmits and receives
 */
uint8 userWishes(uint8 pass_check);
void Timer0_count1(void);
int main(void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	ce 55       	subi	r28, 0x5E	; 94
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	uint8 trials =1;		/*static to keep track of how many times the password was entered wrong*/
     b60:	fe 01       	movw	r30, r28
     b62:	e9 5a       	subi	r30, 0xA9	; 169
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	80 83       	st	Z, r24

	uint8 pass_check;
	uint8 key;		/*holds the user choice whether to open door or change password*/
	LCD_init();
     b6a:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_init>
	UART_ConfigType uart_configration;
	uart_configration.baud_rate=9600;
     b6e:	fe 01       	movw	r30, r28
     b70:	e8 5a       	subi	r30, 0xA8	; 168
     b72:	ff 4f       	sbci	r31, 0xFF	; 255
     b74:	80 e8       	ldi	r24, 0x80	; 128
     b76:	95 e2       	ldi	r25, 0x25	; 37
     b78:	a0 e0       	ldi	r26, 0x00	; 0
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	83 83       	std	Z+3, r24	; 0x03
     b7e:	94 83       	std	Z+4, r25	; 0x04
     b80:	a5 83       	std	Z+5, r26	; 0x05
     b82:	b6 83       	std	Z+6, r27	; 0x06
	uart_configration.data_bits_number=Eight;
     b84:	fe 01       	movw	r30, r28
     b86:	e8 5a       	subi	r30, 0xA8	; 168
     b88:	ff 4f       	sbci	r31, 0xFF	; 255
     b8a:	83 e0       	ldi	r24, 0x03	; 3
     b8c:	82 83       	std	Z+2, r24	; 0x02
	uart_configration.parity=Disabled;
     b8e:	fe 01       	movw	r30, r28
     b90:	e8 5a       	subi	r30, 0xA8	; 168
     b92:	ff 4f       	sbci	r31, 0xFF	; 255
     b94:	10 82       	st	Z, r1
	uart_configration.stop_bit=One;
     b96:	fe 01       	movw	r30, r28
     b98:	e8 5a       	subi	r30, 0xA8	; 168
     b9a:	ff 4f       	sbci	r31, 0xFF	; 255
     b9c:	11 82       	std	Z+1, r1	; 0x01
	UART_init(&uart_configration);
     b9e:	ce 01       	movw	r24, r28
     ba0:	88 5a       	subi	r24, 0xA8	; 168
     ba2:	9f 4f       	sbci	r25, 0xFF	; 255
     ba4:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <UART_init>

	timer0_configration.initial_value=0;
     ba8:	10 92 a6 00 	sts	0x00A6, r1
	timer0_configration.timer_mode=NORMAL_MODE;
     bac:	10 92 a4 00 	sts	0x00A4, r1
	timer0_configration.prescaler=FCPU_1024;
     bb0:	85 e0       	ldi	r24, 0x05	; 5
     bb2:	80 93 a5 00 	sts	0x00A5, r24
	Timer0_setCallBack(Timer0_count1);
     bb6:	86 ea       	ldi	r24, 0xA6	; 166
     bb8:	9d e0       	ldi	r25, 0x0D	; 13
     bba:	0e 94 2d 1c 	call	0x385a	; 0x385a <Timer0_setCallBack>


	displayEnterPass(g_password,ENTER);
     bbe:	88 ea       	ldi	r24, 0xA8	; 168
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	0e 94 cd 09 	call	0x139a	; 0x139a <displayEnterPass>
	displayEnterPass(g_re_entered_password,RE_ENTER);
     bc8:	8a e9       	ldi	r24, 0x9A	; 154
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	61 e0       	ldi	r22, 0x01	; 1
     bce:	0e 94 cd 09 	call	0x139a	; 0x139a <displayEnterPass>
     bd2:	fe 01       	movw	r30, r28
     bd4:	ef 5a       	subi	r30, 0xAF	; 175
     bd6:	ff 4f       	sbci	r31, 0xFF	; 255
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	a8 ec       	ldi	r26, 0xC8	; 200
     bde:	b2 e4       	ldi	r27, 0x42	; 66
     be0:	80 83       	st	Z, r24
     be2:	91 83       	std	Z+1, r25	; 0x01
     be4:	a2 83       	std	Z+2, r26	; 0x02
     be6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     be8:	8e 01       	movw	r16, r28
     bea:	03 5b       	subi	r16, 0xB3	; 179
     bec:	1f 4f       	sbci	r17, 0xFF	; 255
     bee:	fe 01       	movw	r30, r28
     bf0:	ef 5a       	subi	r30, 0xAF	; 175
     bf2:	ff 4f       	sbci	r31, 0xFF	; 255
     bf4:	60 81       	ld	r22, Z
     bf6:	71 81       	ldd	r23, Z+1	; 0x01
     bf8:	82 81       	ldd	r24, Z+2	; 0x02
     bfa:	93 81       	ldd	r25, Z+3	; 0x03
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	4a e7       	ldi	r20, 0x7A	; 122
     c02:	53 e4       	ldi	r21, 0x43	; 67
     c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c08:	dc 01       	movw	r26, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	f8 01       	movw	r30, r16
     c0e:	80 83       	st	Z, r24
     c10:	91 83       	std	Z+1, r25	; 0x01
     c12:	a2 83       	std	Z+2, r26	; 0x02
     c14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c16:	fe 01       	movw	r30, r28
     c18:	e3 5b       	subi	r30, 0xB3	; 179
     c1a:	ff 4f       	sbci	r31, 0xFF	; 255
     c1c:	60 81       	ld	r22, Z
     c1e:	71 81       	ldd	r23, Z+1	; 0x01
     c20:	82 81       	ldd	r24, Z+2	; 0x02
     c22:	93 81       	ldd	r25, Z+3	; 0x03
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	40 e8       	ldi	r20, 0x80	; 128
     c2a:	5f e3       	ldi	r21, 0x3F	; 63
     c2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c30:	88 23       	and	r24, r24
     c32:	44 f4       	brge	.+16     	; 0xc44 <main+0xfe>
		__ticks = 1;
     c34:	fe 01       	movw	r30, r28
     c36:	e5 5b       	subi	r30, 0xB5	; 181
     c38:	ff 4f       	sbci	r31, 0xFF	; 255
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	91 83       	std	Z+1, r25	; 0x01
     c40:	80 83       	st	Z, r24
     c42:	64 c0       	rjmp	.+200    	; 0xd0c <main+0x1c6>
	else if (__tmp > 65535)
     c44:	fe 01       	movw	r30, r28
     c46:	e3 5b       	subi	r30, 0xB3	; 179
     c48:	ff 4f       	sbci	r31, 0xFF	; 255
     c4a:	60 81       	ld	r22, Z
     c4c:	71 81       	ldd	r23, Z+1	; 0x01
     c4e:	82 81       	ldd	r24, Z+2	; 0x02
     c50:	93 81       	ldd	r25, Z+3	; 0x03
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	3f ef       	ldi	r19, 0xFF	; 255
     c56:	4f e7       	ldi	r20, 0x7F	; 127
     c58:	57 e4       	ldi	r21, 0x47	; 71
     c5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c5e:	18 16       	cp	r1, r24
     c60:	0c f0       	brlt	.+2      	; 0xc64 <main+0x11e>
     c62:	43 c0       	rjmp	.+134    	; 0xcea <main+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c64:	fe 01       	movw	r30, r28
     c66:	ef 5a       	subi	r30, 0xAF	; 175
     c68:	ff 4f       	sbci	r31, 0xFF	; 255
     c6a:	60 81       	ld	r22, Z
     c6c:	71 81       	ldd	r23, Z+1	; 0x01
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e2       	ldi	r20, 0x20	; 32
     c78:	51 e4       	ldi	r21, 0x41	; 65
     c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c7e:	dc 01       	movw	r26, r24
     c80:	cb 01       	movw	r24, r22
     c82:	8e 01       	movw	r16, r28
     c84:	05 5b       	subi	r16, 0xB5	; 181
     c86:	1f 4f       	sbci	r17, 0xFF	; 255
     c88:	bc 01       	movw	r22, r24
     c8a:	cd 01       	movw	r24, r26
     c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c90:	dc 01       	movw	r26, r24
     c92:	cb 01       	movw	r24, r22
     c94:	f8 01       	movw	r30, r16
     c96:	91 83       	std	Z+1, r25	; 0x01
     c98:	80 83       	st	Z, r24
     c9a:	1f c0       	rjmp	.+62     	; 0xcda <main+0x194>
     c9c:	fe 01       	movw	r30, r28
     c9e:	e7 5b       	subi	r30, 0xB7	; 183
     ca0:	ff 4f       	sbci	r31, 0xFF	; 255
     ca2:	89 e1       	ldi	r24, 0x19	; 25
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	91 83       	std	Z+1, r25	; 0x01
     ca8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     caa:	fe 01       	movw	r30, r28
     cac:	e7 5b       	subi	r30, 0xB7	; 183
     cae:	ff 4f       	sbci	r31, 0xFF	; 255
     cb0:	80 81       	ld	r24, Z
     cb2:	91 81       	ldd	r25, Z+1	; 0x01
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	f1 f7       	brne	.-4      	; 0xcb4 <main+0x16e>
     cb8:	fe 01       	movw	r30, r28
     cba:	e7 5b       	subi	r30, 0xB7	; 183
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	91 83       	std	Z+1, r25	; 0x01
     cc0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cc2:	de 01       	movw	r26, r28
     cc4:	a5 5b       	subi	r26, 0xB5	; 181
     cc6:	bf 4f       	sbci	r27, 0xFF	; 255
     cc8:	fe 01       	movw	r30, r28
     cca:	e5 5b       	subi	r30, 0xB5	; 181
     ccc:	ff 4f       	sbci	r31, 0xFF	; 255
     cce:	80 81       	ld	r24, Z
     cd0:	91 81       	ldd	r25, Z+1	; 0x01
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	11 96       	adiw	r26, 0x01	; 1
     cd6:	9c 93       	st	X, r25
     cd8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cda:	fe 01       	movw	r30, r28
     cdc:	e5 5b       	subi	r30, 0xB5	; 181
     cde:	ff 4f       	sbci	r31, 0xFF	; 255
     ce0:	80 81       	ld	r24, Z
     ce2:	91 81       	ldd	r25, Z+1	; 0x01
     ce4:	00 97       	sbiw	r24, 0x00	; 0
     ce6:	d1 f6       	brne	.-76     	; 0xc9c <main+0x156>
     ce8:	27 c0       	rjmp	.+78     	; 0xd38 <main+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cea:	8e 01       	movw	r16, r28
     cec:	05 5b       	subi	r16, 0xB5	; 181
     cee:	1f 4f       	sbci	r17, 0xFF	; 255
     cf0:	fe 01       	movw	r30, r28
     cf2:	e3 5b       	subi	r30, 0xB3	; 179
     cf4:	ff 4f       	sbci	r31, 0xFF	; 255
     cf6:	60 81       	ld	r22, Z
     cf8:	71 81       	ldd	r23, Z+1	; 0x01
     cfa:	82 81       	ldd	r24, Z+2	; 0x02
     cfc:	93 81       	ldd	r25, Z+3	; 0x03
     cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	f8 01       	movw	r30, r16
     d08:	91 83       	std	Z+1, r25	; 0x01
     d0a:	80 83       	st	Z, r24
     d0c:	de 01       	movw	r26, r28
     d0e:	a9 5b       	subi	r26, 0xB9	; 185
     d10:	bf 4f       	sbci	r27, 0xFF	; 255
     d12:	fe 01       	movw	r30, r28
     d14:	e5 5b       	subi	r30, 0xB5	; 181
     d16:	ff 4f       	sbci	r31, 0xFF	; 255
     d18:	80 81       	ld	r24, Z
     d1a:	91 81       	ldd	r25, Z+1	; 0x01
     d1c:	8d 93       	st	X+, r24
     d1e:	9c 93       	st	X, r25
     d20:	fe 01       	movw	r30, r28
     d22:	e9 5b       	subi	r30, 0xB9	; 185
     d24:	ff 4f       	sbci	r31, 0xFF	; 255
     d26:	80 81       	ld	r24, Z
     d28:	91 81       	ldd	r25, Z+1	; 0x01
     d2a:	01 97       	sbiw	r24, 0x01	; 1
     d2c:	f1 f7       	brne	.-4      	; 0xd2a <main+0x1e4>
     d2e:	fe 01       	movw	r30, r28
     d30:	e9 5b       	subi	r30, 0xB9	; 185
     d32:	ff 4f       	sbci	r31, 0xFF	; 255
     d34:	91 83       	std	Z+1, r25	; 0x01
     d36:	80 83       	st	Z, r24

	_delay_ms(100);
	sendPasswordUsingUart(g_password);		/*send pass and re entered pass using uart */
     d38:	88 ea       	ldi	r24, 0xA8	; 168
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 01 0b 	call	0x1602	; 0x1602 <sendPasswordUsingUart>
	sendPasswordUsingUart(g_re_entered_password);
     d40:	8a e9       	ldi	r24, 0x9A	; 154
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 01 0b 	call	0x1602	; 0x1602 <sendPasswordUsingUart>
	while(1)
	{
		key=userWishes(pass_check);		/*returns user wishes in case pass is correct*/
     d48:	fe 01       	movw	r30, r28
     d4a:	ea 5a       	subi	r30, 0xAA	; 170
     d4c:	ff 4f       	sbci	r31, 0xFF	; 255
     d4e:	80 81       	ld	r24, Z
     d50:	0e 94 a0 0b 	call	0x1740	; 0x1740 <userWishes>
     d54:	fe 01       	movw	r30, r28
     d56:	eb 5a       	subi	r30, 0xAB	; 171
     d58:	ff 4f       	sbci	r31, 0xFF	; 255
     d5a:	80 83       	st	Z, r24
		if(key=='+')
     d5c:	fe 01       	movw	r30, r28
     d5e:	eb 5a       	subi	r30, 0xAB	; 171
     d60:	ff 4f       	sbci	r31, 0xFF	; 255
     d62:	80 81       	ld	r24, Z
     d64:	8b 32       	cpi	r24, 0x2B	; 43
     d66:	09 f0       	breq	.+2      	; 0xd6a <main+0x224>
     d68:	a8 c0       	rjmp	.+336    	; 0xeba <main+0x374>
		{
			displayEnterPass(g_password,ENTER);		/*ask user to enter password again to compare it with the saved one*/
     d6a:	88 ea       	ldi	r24, 0xA8	; 168
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	60 e0       	ldi	r22, 0x00	; 0
     d70:	0e 94 cd 09 	call	0x139a	; 0x139a <displayEnterPass>
			while(UART_recieveByte() != MC2_READY){}
     d74:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <UART_recieveByte>
     d78:	80 31       	cpi	r24, 0x10	; 16
     d7a:	e1 f7       	brne	.-8      	; 0xd74 <main+0x22e>
			sendPasswordUsingUart(g_password);		/*send it to MCU2 to compare it with the saved one*/
     d7c:	88 ea       	ldi	r24, 0xA8	; 168
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	0e 94 01 0b 	call	0x1602	; 0x1602 <sendPasswordUsingUart>
			pass_check=UART_recieveByte();
     d84:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <UART_recieveByte>
     d88:	fe 01       	movw	r30, r28
     d8a:	ea 5a       	subi	r30, 0xAA	; 170
     d8c:	ff 4f       	sbci	r31, 0xFF	; 255
     d8e:	80 83       	st	Z, r24
			if(pass_check=='P')
     d90:	fe 01       	movw	r30, r28
     d92:	ea 5a       	subi	r30, 0xAA	; 170
     d94:	ff 4f       	sbci	r31, 0xFF	; 255
     d96:	80 81       	ld	r24, Z
     d98:	80 35       	cpi	r24, 0x50	; 80
     d9a:	09 f0       	breq	.+2      	; 0xd9e <main+0x258>
     d9c:	8e c0       	rjmp	.+284    	; 0xeba <main+0x374>
			{
				displayEnterPass(g_password,ENTER);
     d9e:	88 ea       	ldi	r24, 0xA8	; 168
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	0e 94 cd 09 	call	0x139a	; 0x139a <displayEnterPass>
     da8:	fe 01       	movw	r30, r28
     daa:	ed 5b       	subi	r30, 0xBD	; 189
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	a8 ec       	ldi	r26, 0xC8	; 200
     db4:	b2 e4       	ldi	r27, 0x42	; 66
     db6:	80 83       	st	Z, r24
     db8:	91 83       	std	Z+1, r25	; 0x01
     dba:	a2 83       	std	Z+2, r26	; 0x02
     dbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dbe:	8e 01       	movw	r16, r28
     dc0:	01 5c       	subi	r16, 0xC1	; 193
     dc2:	1f 4f       	sbci	r17, 0xFF	; 255
     dc4:	fe 01       	movw	r30, r28
     dc6:	ed 5b       	subi	r30, 0xBD	; 189
     dc8:	ff 4f       	sbci	r31, 0xFF	; 255
     dca:	60 81       	ld	r22, Z
     dcc:	71 81       	ldd	r23, Z+1	; 0x01
     dce:	82 81       	ldd	r24, Z+2	; 0x02
     dd0:	93 81       	ldd	r25, Z+3	; 0x03
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	4a e7       	ldi	r20, 0x7A	; 122
     dd8:	53 e4       	ldi	r21, 0x43	; 67
     dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	f8 01       	movw	r30, r16
     de4:	80 83       	st	Z, r24
     de6:	91 83       	std	Z+1, r25	; 0x01
     de8:	a2 83       	std	Z+2, r26	; 0x02
     dea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     dec:	fe 01       	movw	r30, r28
     dee:	ff 96       	adiw	r30, 0x3f	; 63
     df0:	60 81       	ld	r22, Z
     df2:	71 81       	ldd	r23, Z+1	; 0x01
     df4:	82 81       	ldd	r24, Z+2	; 0x02
     df6:	93 81       	ldd	r25, Z+3	; 0x03
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	40 e8       	ldi	r20, 0x80	; 128
     dfe:	5f e3       	ldi	r21, 0x3F	; 63
     e00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e04:	88 23       	and	r24, r24
     e06:	2c f4       	brge	.+10     	; 0xe12 <main+0x2cc>
		__ticks = 1;
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	9e af       	std	Y+62, r25	; 0x3e
     e0e:	8d af       	std	Y+61, r24	; 0x3d
     e10:	46 c0       	rjmp	.+140    	; 0xe9e <main+0x358>
	else if (__tmp > 65535)
     e12:	fe 01       	movw	r30, r28
     e14:	ff 96       	adiw	r30, 0x3f	; 63
     e16:	60 81       	ld	r22, Z
     e18:	71 81       	ldd	r23, Z+1	; 0x01
     e1a:	82 81       	ldd	r24, Z+2	; 0x02
     e1c:	93 81       	ldd	r25, Z+3	; 0x03
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	3f ef       	ldi	r19, 0xFF	; 255
     e22:	4f e7       	ldi	r20, 0x7F	; 127
     e24:	57 e4       	ldi	r21, 0x47	; 71
     e26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e2a:	18 16       	cp	r1, r24
     e2c:	64 f5       	brge	.+88     	; 0xe86 <main+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e2e:	fe 01       	movw	r30, r28
     e30:	ed 5b       	subi	r30, 0xBD	; 189
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	60 81       	ld	r22, Z
     e36:	71 81       	ldd	r23, Z+1	; 0x01
     e38:	82 81       	ldd	r24, Z+2	; 0x02
     e3a:	93 81       	ldd	r25, Z+3	; 0x03
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	40 e2       	ldi	r20, 0x20	; 32
     e42:	51 e4       	ldi	r21, 0x41	; 65
     e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	bc 01       	movw	r22, r24
     e4e:	cd 01       	movw	r24, r26
     e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	9e af       	std	Y+62, r25	; 0x3e
     e5a:	8d af       	std	Y+61, r24	; 0x3d
     e5c:	0f c0       	rjmp	.+30     	; 0xe7c <main+0x336>
     e5e:	89 e1       	ldi	r24, 0x19	; 25
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	9c af       	std	Y+60, r25	; 0x3c
     e64:	8b af       	std	Y+59, r24	; 0x3b
     e66:	8b ad       	ldd	r24, Y+59	; 0x3b
     e68:	9c ad       	ldd	r25, Y+60	; 0x3c
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	f1 f7       	brne	.-4      	; 0xe6a <main+0x324>
     e6e:	9c af       	std	Y+60, r25	; 0x3c
     e70:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e72:	8d ad       	ldd	r24, Y+61	; 0x3d
     e74:	9e ad       	ldd	r25, Y+62	; 0x3e
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	9e af       	std	Y+62, r25	; 0x3e
     e7a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e7c:	8d ad       	ldd	r24, Y+61	; 0x3d
     e7e:	9e ad       	ldd	r25, Y+62	; 0x3e
     e80:	00 97       	sbiw	r24, 0x00	; 0
     e82:	69 f7       	brne	.-38     	; 0xe5e <main+0x318>
     e84:	16 c0       	rjmp	.+44     	; 0xeb2 <main+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e86:	fe 01       	movw	r30, r28
     e88:	ff 96       	adiw	r30, 0x3f	; 63
     e8a:	60 81       	ld	r22, Z
     e8c:	71 81       	ldd	r23, Z+1	; 0x01
     e8e:	82 81       	ldd	r24, Z+2	; 0x02
     e90:	93 81       	ldd	r25, Z+3	; 0x03
     e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e96:	dc 01       	movw	r26, r24
     e98:	cb 01       	movw	r24, r22
     e9a:	9e af       	std	Y+62, r25	; 0x3e
     e9c:	8d af       	std	Y+61, r24	; 0x3d
     e9e:	8d ad       	ldd	r24, Y+61	; 0x3d
     ea0:	9e ad       	ldd	r25, Y+62	; 0x3e
     ea2:	9a af       	std	Y+58, r25	; 0x3a
     ea4:	89 af       	std	Y+57, r24	; 0x39
     ea6:	89 ad       	ldd	r24, Y+57	; 0x39
     ea8:	9a ad       	ldd	r25, Y+58	; 0x3a
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	f1 f7       	brne	.-4      	; 0xeaa <main+0x364>
     eae:	9a af       	std	Y+58, r25	; 0x3a
     eb0:	89 af       	std	Y+57, r24	; 0x39

				_delay_ms(100);
				sendPasswordUsingUart(g_password);
     eb2:	88 ea       	ldi	r24, 0xA8	; 168
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 01 0b 	call	0x1602	; 0x1602 <sendPasswordUsingUart>
			}

		}
		if(key=='-')
     eba:	fe 01       	movw	r30, r28
     ebc:	eb 5a       	subi	r30, 0xAB	; 171
     ebe:	ff 4f       	sbci	r31, 0xFF	; 255
     ec0:	80 81       	ld	r24, Z
     ec2:	8d 32       	cpi	r24, 0x2D	; 45
     ec4:	09 f0       	breq	.+2      	; 0xec8 <main+0x382>
     ec6:	40 cf       	rjmp	.-384    	; 0xd48 <main+0x202>
		{
			displayEnterPass(g_password,ENTER);		/*ask user to enter password again to compare it with the saved one*/
     ec8:	88 ea       	ldi	r24, 0xA8	; 168
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	0e 94 cd 09 	call	0x139a	; 0x139a <displayEnterPass>
			while(UART_recieveByte() != MC2_READY){}
     ed2:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <UART_recieveByte>
     ed6:	80 31       	cpi	r24, 0x10	; 16
     ed8:	e1 f7       	brne	.-8      	; 0xed2 <main+0x38c>
			sendPasswordUsingUart(g_password);		/*send it to MCU2 to compare it with the saved one*/
     eda:	88 ea       	ldi	r24, 0xA8	; 168
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	0e 94 01 0b 	call	0x1602	; 0x1602 <sendPasswordUsingUart>
			pass_check=UART_recieveByte();
     ee2:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <UART_recieveByte>
     ee6:	fe 01       	movw	r30, r28
     ee8:	ea 5a       	subi	r30, 0xAA	; 170
     eea:	ff 4f       	sbci	r31, 0xFF	; 255
     eec:	80 83       	st	Z, r24
			if(pass_check=='R')
     eee:	fe 01       	movw	r30, r28
     ef0:	ea 5a       	subi	r30, 0xAA	; 170
     ef2:	ff 4f       	sbci	r31, 0xFF	; 255
     ef4:	80 81       	ld	r24, Z
     ef6:	82 35       	cpi	r24, 0x52	; 82
     ef8:	09 f0       	breq	.+2      	; 0xefc <main+0x3b6>
     efa:	84 c0       	rjmp	.+264    	; 0x1004 <main+0x4be>
			{
				displayEnterPass(g_password,ENTER);
     efc:	88 ea       	ldi	r24, 0xA8	; 168
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	0e 94 cd 09 	call	0x139a	; 0x139a <displayEnterPass>
				displayEnterPass(g_re_entered_password,RE_ENTER);
     f06:	8a e9       	ldi	r24, 0x9A	; 154
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	61 e0       	ldi	r22, 0x01	; 1
     f0c:	0e 94 cd 09 	call	0x139a	; 0x139a <displayEnterPass>
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	a8 ec       	ldi	r26, 0xC8	; 200
     f16:	b2 e4       	ldi	r27, 0x42	; 66
     f18:	8d ab       	std	Y+53, r24	; 0x35
     f1a:	9e ab       	std	Y+54, r25	; 0x36
     f1c:	af ab       	std	Y+55, r26	; 0x37
     f1e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f20:	6d a9       	ldd	r22, Y+53	; 0x35
     f22:	7e a9       	ldd	r23, Y+54	; 0x36
     f24:	8f a9       	ldd	r24, Y+55	; 0x37
     f26:	98 ad       	ldd	r25, Y+56	; 0x38
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	4a e7       	ldi	r20, 0x7A	; 122
     f2e:	53 e4       	ldi	r21, 0x43	; 67
     f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	89 ab       	std	Y+49, r24	; 0x31
     f3a:	9a ab       	std	Y+50, r25	; 0x32
     f3c:	ab ab       	std	Y+51, r26	; 0x33
     f3e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f40:	69 a9       	ldd	r22, Y+49	; 0x31
     f42:	7a a9       	ldd	r23, Y+50	; 0x32
     f44:	8b a9       	ldd	r24, Y+51	; 0x33
     f46:	9c a9       	ldd	r25, Y+52	; 0x34
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	40 e8       	ldi	r20, 0x80	; 128
     f4e:	5f e3       	ldi	r21, 0x3F	; 63
     f50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f54:	88 23       	and	r24, r24
     f56:	2c f4       	brge	.+10     	; 0xf62 <main+0x41c>
		__ticks = 1;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	98 ab       	std	Y+48, r25	; 0x30
     f5e:	8f a7       	std	Y+47, r24	; 0x2f
     f60:	3f c0       	rjmp	.+126    	; 0xfe0 <main+0x49a>
	else if (__tmp > 65535)
     f62:	69 a9       	ldd	r22, Y+49	; 0x31
     f64:	7a a9       	ldd	r23, Y+50	; 0x32
     f66:	8b a9       	ldd	r24, Y+51	; 0x33
     f68:	9c a9       	ldd	r25, Y+52	; 0x34
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	3f ef       	ldi	r19, 0xFF	; 255
     f6e:	4f e7       	ldi	r20, 0x7F	; 127
     f70:	57 e4       	ldi	r21, 0x47	; 71
     f72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f76:	18 16       	cp	r1, r24
     f78:	4c f5       	brge	.+82     	; 0xfcc <main+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f7a:	6d a9       	ldd	r22, Y+53	; 0x35
     f7c:	7e a9       	ldd	r23, Y+54	; 0x36
     f7e:	8f a9       	ldd	r24, Y+55	; 0x37
     f80:	98 ad       	ldd	r25, Y+56	; 0x38
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	40 e2       	ldi	r20, 0x20	; 32
     f88:	51 e4       	ldi	r21, 0x41	; 65
     f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	bc 01       	movw	r22, r24
     f94:	cd 01       	movw	r24, r26
     f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	98 ab       	std	Y+48, r25	; 0x30
     fa0:	8f a7       	std	Y+47, r24	; 0x2f
     fa2:	0f c0       	rjmp	.+30     	; 0xfc2 <main+0x47c>
     fa4:	89 e1       	ldi	r24, 0x19	; 25
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	9e a7       	std	Y+46, r25	; 0x2e
     faa:	8d a7       	std	Y+45, r24	; 0x2d
     fac:	8d a5       	ldd	r24, Y+45	; 0x2d
     fae:	9e a5       	ldd	r25, Y+46	; 0x2e
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	f1 f7       	brne	.-4      	; 0xfb0 <main+0x46a>
     fb4:	9e a7       	std	Y+46, r25	; 0x2e
     fb6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb8:	8f a5       	ldd	r24, Y+47	; 0x2f
     fba:	98 a9       	ldd	r25, Y+48	; 0x30
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	98 ab       	std	Y+48, r25	; 0x30
     fc0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc2:	8f a5       	ldd	r24, Y+47	; 0x2f
     fc4:	98 a9       	ldd	r25, Y+48	; 0x30
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	69 f7       	brne	.-38     	; 0xfa4 <main+0x45e>
     fca:	14 c0       	rjmp	.+40     	; 0xff4 <main+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fcc:	69 a9       	ldd	r22, Y+49	; 0x31
     fce:	7a a9       	ldd	r23, Y+50	; 0x32
     fd0:	8b a9       	ldd	r24, Y+51	; 0x33
     fd2:	9c a9       	ldd	r25, Y+52	; 0x34
     fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	98 ab       	std	Y+48, r25	; 0x30
     fde:	8f a7       	std	Y+47, r24	; 0x2f
     fe0:	8f a5       	ldd	r24, Y+47	; 0x2f
     fe2:	98 a9       	ldd	r25, Y+48	; 0x30
     fe4:	9c a7       	std	Y+44, r25	; 0x2c
     fe6:	8b a7       	std	Y+43, r24	; 0x2b
     fe8:	8b a5       	ldd	r24, Y+43	; 0x2b
     fea:	9c a5       	ldd	r25, Y+44	; 0x2c
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	f1 f7       	brne	.-4      	; 0xfec <main+0x4a6>
     ff0:	9c a7       	std	Y+44, r25	; 0x2c
     ff2:	8b a7       	std	Y+43, r24	; 0x2b

				_delay_ms(100);
				sendPasswordUsingUart(g_password);		/*send pass and re entered pass using uart */
     ff4:	88 ea       	ldi	r24, 0xA8	; 168
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	0e 94 01 0b 	call	0x1602	; 0x1602 <sendPasswordUsingUart>
				sendPasswordUsingUart(g_re_entered_password);
     ffc:	8a e9       	ldi	r24, 0x9A	; 154
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 01 0b 	call	0x1602	; 0x1602 <sendPasswordUsingUart>

			}
			if(pass_check=='O')			/*this indicates that i want to ask for password once*/
    1004:	fe 01       	movw	r30, r28
    1006:	ea 5a       	subi	r30, 0xAA	; 170
    1008:	ff 4f       	sbci	r31, 0xFF	; 255
    100a:	80 81       	ld	r24, Z
    100c:	8f 34       	cpi	r24, 0x4F	; 79
    100e:	09 f0       	breq	.+2      	; 0x1012 <main+0x4cc>
    1010:	9b ce       	rjmp	.-714    	; 0xd48 <main+0x202>
    1012:	84 c0       	rjmp	.+264    	; 0x111c <main+0x5d6>
			{
				while(trials<3)
				{
					displayEnterPass(g_password,ENTER);
    1014:	88 ea       	ldi	r24, 0xA8	; 168
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	60 e0       	ldi	r22, 0x00	; 0
    101a:	0e 94 cd 09 	call	0x139a	; 0x139a <displayEnterPass>
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	a8 ec       	ldi	r26, 0xC8	; 200
    1024:	b2 e4       	ldi	r27, 0x42	; 66
    1026:	8f a3       	std	Y+39, r24	; 0x27
    1028:	98 a7       	std	Y+40, r25	; 0x28
    102a:	a9 a7       	std	Y+41, r26	; 0x29
    102c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    102e:	6f a1       	ldd	r22, Y+39	; 0x27
    1030:	78 a5       	ldd	r23, Y+40	; 0x28
    1032:	89 a5       	ldd	r24, Y+41	; 0x29
    1034:	9a a5       	ldd	r25, Y+42	; 0x2a
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	4a e7       	ldi	r20, 0x7A	; 122
    103c:	53 e4       	ldi	r21, 0x43	; 67
    103e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	8b a3       	std	Y+35, r24	; 0x23
    1048:	9c a3       	std	Y+36, r25	; 0x24
    104a:	ad a3       	std	Y+37, r26	; 0x25
    104c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    104e:	6b a1       	ldd	r22, Y+35	; 0x23
    1050:	7c a1       	ldd	r23, Y+36	; 0x24
    1052:	8d a1       	ldd	r24, Y+37	; 0x25
    1054:	9e a1       	ldd	r25, Y+38	; 0x26
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	40 e8       	ldi	r20, 0x80	; 128
    105c:	5f e3       	ldi	r21, 0x3F	; 63
    105e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1062:	88 23       	and	r24, r24
    1064:	2c f4       	brge	.+10     	; 0x1070 <main+0x52a>
		__ticks = 1;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	9a a3       	std	Y+34, r25	; 0x22
    106c:	89 a3       	std	Y+33, r24	; 0x21
    106e:	3f c0       	rjmp	.+126    	; 0x10ee <main+0x5a8>
	else if (__tmp > 65535)
    1070:	6b a1       	ldd	r22, Y+35	; 0x23
    1072:	7c a1       	ldd	r23, Y+36	; 0x24
    1074:	8d a1       	ldd	r24, Y+37	; 0x25
    1076:	9e a1       	ldd	r25, Y+38	; 0x26
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	3f ef       	ldi	r19, 0xFF	; 255
    107c:	4f e7       	ldi	r20, 0x7F	; 127
    107e:	57 e4       	ldi	r21, 0x47	; 71
    1080:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1084:	18 16       	cp	r1, r24
    1086:	4c f5       	brge	.+82     	; 0x10da <main+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1088:	6f a1       	ldd	r22, Y+39	; 0x27
    108a:	78 a5       	ldd	r23, Y+40	; 0x28
    108c:	89 a5       	ldd	r24, Y+41	; 0x29
    108e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	40 e2       	ldi	r20, 0x20	; 32
    1096:	51 e4       	ldi	r21, 0x41	; 65
    1098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	bc 01       	movw	r22, r24
    10a2:	cd 01       	movw	r24, r26
    10a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	9a a3       	std	Y+34, r25	; 0x22
    10ae:	89 a3       	std	Y+33, r24	; 0x21
    10b0:	0f c0       	rjmp	.+30     	; 0x10d0 <main+0x58a>
    10b2:	89 e1       	ldi	r24, 0x19	; 25
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	98 a3       	std	Y+32, r25	; 0x20
    10b8:	8f 8f       	std	Y+31, r24	; 0x1f
    10ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10bc:	98 a1       	ldd	r25, Y+32	; 0x20
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	f1 f7       	brne	.-4      	; 0x10be <main+0x578>
    10c2:	98 a3       	std	Y+32, r25	; 0x20
    10c4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c6:	89 a1       	ldd	r24, Y+33	; 0x21
    10c8:	9a a1       	ldd	r25, Y+34	; 0x22
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	9a a3       	std	Y+34, r25	; 0x22
    10ce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d0:	89 a1       	ldd	r24, Y+33	; 0x21
    10d2:	9a a1       	ldd	r25, Y+34	; 0x22
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	69 f7       	brne	.-38     	; 0x10b2 <main+0x56c>
    10d8:	14 c0       	rjmp	.+40     	; 0x1102 <main+0x5bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10da:	6b a1       	ldd	r22, Y+35	; 0x23
    10dc:	7c a1       	ldd	r23, Y+36	; 0x24
    10de:	8d a1       	ldd	r24, Y+37	; 0x25
    10e0:	9e a1       	ldd	r25, Y+38	; 0x26
    10e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	9a a3       	std	Y+34, r25	; 0x22
    10ec:	89 a3       	std	Y+33, r24	; 0x21
    10ee:	89 a1       	ldd	r24, Y+33	; 0x21
    10f0:	9a a1       	ldd	r25, Y+34	; 0x22
    10f2:	9e 8f       	std	Y+30, r25	; 0x1e
    10f4:	8d 8f       	std	Y+29, r24	; 0x1d
    10f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	f1 f7       	brne	.-4      	; 0x10fa <main+0x5b4>
    10fe:	9e 8f       	std	Y+30, r25	; 0x1e
    1100:	8d 8f       	std	Y+29, r24	; 0x1d
					//displayEnterPass(g_re_entered_password,RE_ENTER);
					_delay_ms(100);
					sendPasswordUsingUart(g_password);
    1102:	88 ea       	ldi	r24, 0xA8	; 168
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 01 0b 	call	0x1602	; 0x1602 <sendPasswordUsingUart>
					//sendPasswordUsingUart(g_re_entered_password);
					trials++;
    110a:	de 01       	movw	r26, r28
    110c:	a9 5a       	subi	r26, 0xA9	; 169
    110e:	bf 4f       	sbci	r27, 0xFF	; 255
    1110:	fe 01       	movw	r30, r28
    1112:	e9 5a       	subi	r30, 0xA9	; 169
    1114:	ff 4f       	sbci	r31, 0xFF	; 255
    1116:	80 81       	ld	r24, Z
    1118:	8f 5f       	subi	r24, 0xFF	; 255
    111a:	8c 93       	st	X, r24
				sendPasswordUsingUart(g_re_entered_password);

			}
			if(pass_check=='O')			/*this indicates that i want to ask for password once*/
			{
				while(trials<3)
    111c:	fe 01       	movw	r30, r28
    111e:	e9 5a       	subi	r30, 0xA9	; 169
    1120:	ff 4f       	sbci	r31, 0xFF	; 255
    1122:	80 81       	ld	r24, Z
    1124:	83 30       	cpi	r24, 0x03	; 3
    1126:	08 f4       	brcc	.+2      	; 0x112a <main+0x5e4>
    1128:	75 cf       	rjmp	.-278    	; 0x1014 <main+0x4ce>
					sendPasswordUsingUart(g_password);
					//sendPasswordUsingUart(g_re_entered_password);
					trials++;
				}

				if(trials==3){
    112a:	fe 01       	movw	r30, r28
    112c:	e9 5a       	subi	r30, 0xA9	; 169
    112e:	ff 4f       	sbci	r31, 0xFF	; 255
    1130:	80 81       	ld	r24, Z
    1132:	83 30       	cpi	r24, 0x03	; 3
    1134:	09 f0       	breq	.+2      	; 0x1138 <main+0x5f2>
    1136:	08 ce       	rjmp	.-1008   	; 0xd48 <main+0x202>
					UART_receiveString(g_thief);
    1138:	82 eb       	ldi	r24, 0xB2	; 178
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <UART_receiveString>
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	aa ef       	ldi	r26, 0xFA	; 250
    1146:	b3 e4       	ldi	r27, 0x43	; 67
    1148:	89 8f       	std	Y+25, r24	; 0x19
    114a:	9a 8f       	std	Y+26, r25	; 0x1a
    114c:	ab 8f       	std	Y+27, r26	; 0x1b
    114e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1150:	69 8d       	ldd	r22, Y+25	; 0x19
    1152:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1154:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1156:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	4a e7       	ldi	r20, 0x7A	; 122
    115e:	53 e4       	ldi	r21, 0x43	; 67
    1160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	8d 8b       	std	Y+21, r24	; 0x15
    116a:	9e 8b       	std	Y+22, r25	; 0x16
    116c:	af 8b       	std	Y+23, r26	; 0x17
    116e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1170:	6d 89       	ldd	r22, Y+21	; 0x15
    1172:	7e 89       	ldd	r23, Y+22	; 0x16
    1174:	8f 89       	ldd	r24, Y+23	; 0x17
    1176:	98 8d       	ldd	r25, Y+24	; 0x18
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	40 e8       	ldi	r20, 0x80	; 128
    117e:	5f e3       	ldi	r21, 0x3F	; 63
    1180:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1184:	88 23       	and	r24, r24
    1186:	2c f4       	brge	.+10     	; 0x1192 <main+0x64c>
		__ticks = 1;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	9c 8b       	std	Y+20, r25	; 0x14
    118e:	8b 8b       	std	Y+19, r24	; 0x13
    1190:	3f c0       	rjmp	.+126    	; 0x1210 <main+0x6ca>
	else if (__tmp > 65535)
    1192:	6d 89       	ldd	r22, Y+21	; 0x15
    1194:	7e 89       	ldd	r23, Y+22	; 0x16
    1196:	8f 89       	ldd	r24, Y+23	; 0x17
    1198:	98 8d       	ldd	r25, Y+24	; 0x18
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	3f ef       	ldi	r19, 0xFF	; 255
    119e:	4f e7       	ldi	r20, 0x7F	; 127
    11a0:	57 e4       	ldi	r21, 0x47	; 71
    11a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11a6:	18 16       	cp	r1, r24
    11a8:	4c f5       	brge	.+82     	; 0x11fc <main+0x6b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11aa:	69 8d       	ldd	r22, Y+25	; 0x19
    11ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	40 e2       	ldi	r20, 0x20	; 32
    11b8:	51 e4       	ldi	r21, 0x41	; 65
    11ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	bc 01       	movw	r22, r24
    11c4:	cd 01       	movw	r24, r26
    11c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	9c 8b       	std	Y+20, r25	; 0x14
    11d0:	8b 8b       	std	Y+19, r24	; 0x13
    11d2:	0f c0       	rjmp	.+30     	; 0x11f2 <main+0x6ac>
    11d4:	89 e1       	ldi	r24, 0x19	; 25
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	9a 8b       	std	Y+18, r25	; 0x12
    11da:	89 8b       	std	Y+17, r24	; 0x11
    11dc:	89 89       	ldd	r24, Y+17	; 0x11
    11de:	9a 89       	ldd	r25, Y+18	; 0x12
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	f1 f7       	brne	.-4      	; 0x11e0 <main+0x69a>
    11e4:	9a 8b       	std	Y+18, r25	; 0x12
    11e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e8:	8b 89       	ldd	r24, Y+19	; 0x13
    11ea:	9c 89       	ldd	r25, Y+20	; 0x14
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	9c 8b       	std	Y+20, r25	; 0x14
    11f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f2:	8b 89       	ldd	r24, Y+19	; 0x13
    11f4:	9c 89       	ldd	r25, Y+20	; 0x14
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	69 f7       	brne	.-38     	; 0x11d4 <main+0x68e>
    11fa:	14 c0       	rjmp	.+40     	; 0x1224 <main+0x6de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11fc:	6d 89       	ldd	r22, Y+21	; 0x15
    11fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1200:	8f 89       	ldd	r24, Y+23	; 0x17
    1202:	98 8d       	ldd	r25, Y+24	; 0x18
    1204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	9c 8b       	std	Y+20, r25	; 0x14
    120e:	8b 8b       	std	Y+19, r24	; 0x13
    1210:	8b 89       	ldd	r24, Y+19	; 0x13
    1212:	9c 89       	ldd	r25, Y+20	; 0x14
    1214:	98 8b       	std	Y+16, r25	; 0x10
    1216:	8f 87       	std	Y+15, r24	; 0x0f
    1218:	8f 85       	ldd	r24, Y+15	; 0x0f
    121a:	98 89       	ldd	r25, Y+16	; 0x10
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <main+0x6d6>
    1220:	98 8b       	std	Y+16, r25	; 0x10
    1222:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(500);
					LCD_moveCursor(1,0);
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_moveCursor>
					LCD_displayString("              ");
    122c:	80 e6       	ldi	r24, 0x60	; 96
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	0e 94 8a 1a 	call	0x3514	; 0x3514 <LCD_displayString>
					LCD_moveCursor(0,0);
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_moveCursor>
					LCD_displayString("              ");
    123c:	80 e6       	ldi	r24, 0x60	; 96
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	0e 94 8a 1a 	call	0x3514	; 0x3514 <LCD_displayString>
					LCD_moveCursor(0,0);
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	60 e0       	ldi	r22, 0x00	; 0
    1248:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_moveCursor>
					LCD_displayString(g_thief);
    124c:	82 eb       	ldi	r24, 0xB2	; 178
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	0e 94 8a 1a 	call	0x3514	; 0x3514 <LCD_displayString>
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	aa ef       	ldi	r26, 0xFA	; 250
    125a:	b4 e4       	ldi	r27, 0x44	; 68
    125c:	8b 87       	std	Y+11, r24	; 0x0b
    125e:	9c 87       	std	Y+12, r25	; 0x0c
    1260:	ad 87       	std	Y+13, r26	; 0x0d
    1262:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1264:	6b 85       	ldd	r22, Y+11	; 0x0b
    1266:	7c 85       	ldd	r23, Y+12	; 0x0c
    1268:	8d 85       	ldd	r24, Y+13	; 0x0d
    126a:	9e 85       	ldd	r25, Y+14	; 0x0e
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	4a e7       	ldi	r20, 0x7A	; 122
    1272:	53 e4       	ldi	r21, 0x43	; 67
    1274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1278:	dc 01       	movw	r26, r24
    127a:	cb 01       	movw	r24, r22
    127c:	8f 83       	std	Y+7, r24	; 0x07
    127e:	98 87       	std	Y+8, r25	; 0x08
    1280:	a9 87       	std	Y+9, r26	; 0x09
    1282:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1284:	6f 81       	ldd	r22, Y+7	; 0x07
    1286:	78 85       	ldd	r23, Y+8	; 0x08
    1288:	89 85       	ldd	r24, Y+9	; 0x09
    128a:	9a 85       	ldd	r25, Y+10	; 0x0a
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e8       	ldi	r20, 0x80	; 128
    1292:	5f e3       	ldi	r21, 0x3F	; 63
    1294:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1298:	88 23       	and	r24, r24
    129a:	2c f4       	brge	.+10     	; 0x12a6 <main+0x760>
		__ticks = 1;
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	9e 83       	std	Y+6, r25	; 0x06
    12a2:	8d 83       	std	Y+5, r24	; 0x05
    12a4:	3f c0       	rjmp	.+126    	; 0x1324 <main+0x7de>
	else if (__tmp > 65535)
    12a6:	6f 81       	ldd	r22, Y+7	; 0x07
    12a8:	78 85       	ldd	r23, Y+8	; 0x08
    12aa:	89 85       	ldd	r24, Y+9	; 0x09
    12ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	3f ef       	ldi	r19, 0xFF	; 255
    12b2:	4f e7       	ldi	r20, 0x7F	; 127
    12b4:	57 e4       	ldi	r21, 0x47	; 71
    12b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ba:	18 16       	cp	r1, r24
    12bc:	4c f5       	brge	.+82     	; 0x1310 <main+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12be:	6b 85       	ldd	r22, Y+11	; 0x0b
    12c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	40 e2       	ldi	r20, 0x20	; 32
    12cc:	51 e4       	ldi	r21, 0x41	; 65
    12ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	bc 01       	movw	r22, r24
    12d8:	cd 01       	movw	r24, r26
    12da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	9e 83       	std	Y+6, r25	; 0x06
    12e4:	8d 83       	std	Y+5, r24	; 0x05
    12e6:	0f c0       	rjmp	.+30     	; 0x1306 <main+0x7c0>
    12e8:	89 e1       	ldi	r24, 0x19	; 25
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	9c 83       	std	Y+4, r25	; 0x04
    12ee:	8b 83       	std	Y+3, r24	; 0x03
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	01 97       	sbiw	r24, 0x01	; 1
    12f6:	f1 f7       	brne	.-4      	; 0x12f4 <main+0x7ae>
    12f8:	9c 83       	std	Y+4, r25	; 0x04
    12fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12fc:	8d 81       	ldd	r24, Y+5	; 0x05
    12fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	9e 83       	std	Y+6, r25	; 0x06
    1304:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1306:	8d 81       	ldd	r24, Y+5	; 0x05
    1308:	9e 81       	ldd	r25, Y+6	; 0x06
    130a:	00 97       	sbiw	r24, 0x00	; 0
    130c:	69 f7       	brne	.-38     	; 0x12e8 <main+0x7a2>
    130e:	14 c0       	rjmp	.+40     	; 0x1338 <main+0x7f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1310:	6f 81       	ldd	r22, Y+7	; 0x07
    1312:	78 85       	ldd	r23, Y+8	; 0x08
    1314:	89 85       	ldd	r24, Y+9	; 0x09
    1316:	9a 85       	ldd	r25, Y+10	; 0x0a
    1318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	9e 83       	std	Y+6, r25	; 0x06
    1322:	8d 83       	std	Y+5, r24	; 0x05
    1324:	8d 81       	ldd	r24, Y+5	; 0x05
    1326:	9e 81       	ldd	r25, Y+6	; 0x06
    1328:	9a 83       	std	Y+2, r25	; 0x02
    132a:	89 83       	std	Y+1, r24	; 0x01
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	9a 81       	ldd	r25, Y+2	; 0x02
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	f1 f7       	brne	.-4      	; 0x1330 <main+0x7ea>
    1334:	9a 83       	std	Y+2, r25	; 0x02
    1336:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(2000);	/*clear screen after 5 seconds*/
					LCD_moveCursor(0,0);
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_moveCursor>
					LCD_displayString("              ");
    1340:	80 e6       	ldi	r24, 0x60	; 96
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	0e 94 8a 1a 	call	0x3514	; 0x3514 <LCD_displayString>
					LCD_moveCursor(1,0);
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_moveCursor>
					LCD_displayString("              ");
    1350:	80 e6       	ldi	r24, 0x60	; 96
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 8a 1a 	call	0x3514	; 0x3514 <LCD_displayString>
					LCD_moveCursor(0,0);
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_moveCursor>

					LCD_displayString(g_open_door);
    1360:	84 ee       	ldi	r24, 0xE4	; 228
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	0e 94 8a 1a 	call	0x3514	; 0x3514 <LCD_displayString>
					LCD_moveCursor(1,0);
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	60 e0       	ldi	r22, 0x00	; 0
    136c:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_moveCursor>
					LCD_displayString(g_Change_pass);
    1370:	86 ec       	ldi	r24, 0xC6	; 198
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	0e 94 8a 1a 	call	0x3514	; 0x3514 <LCD_displayString>
					key=KEYPAD_getPressedKey();
    1378:	0e 94 fe 10 	call	0x21fc	; 0x21fc <KEYPAD_getPressedKey>
    137c:	fe 01       	movw	r30, r28
    137e:	eb 5a       	subi	r30, 0xAB	; 171
    1380:	ff 4f       	sbci	r31, 0xFF	; 255
    1382:	80 83       	st	Z, r24
					UART_sendByte(key);		/*send the user choice + or -*/
    1384:	fe 01       	movw	r30, r28
    1386:	eb 5a       	subi	r30, 0xAB	; 171
    1388:	ff 4f       	sbci	r31, 0xFF	; 255
    138a:	80 81       	ld	r24, Z
    138c:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <UART_sendByte>
					LCD_moveCursor(0,0);
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_moveCursor>
    1398:	d7 cc       	rjmp	.-1618   	; 0xd48 <main+0x202>

0000139a <displayEnterPass>:
	}
	return 0;
}

uint8 displayEnterPass(uint8 password[],uint8 which_time)
{
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	63 97       	sbiw	r28, 0x13	; 19
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	9a 8b       	std	Y+18, r25	; 0x12
    13b0:	89 8b       	std	Y+17, r24	; 0x11
    13b2:	6b 8b       	std	Y+19, r22	; 0x13
	uint8 count=0;	/*used to take five keys*/
    13b4:	18 8a       	std	Y+16, r1	; 0x10
	uint8 button;
	if(which_time==ENTER){
    13b6:	8b 89       	ldd	r24, Y+19	; 0x13
    13b8:	88 23       	and	r24, r24
    13ba:	29 f4       	brne	.+10     	; 0x13c6 <displayEnterPass+0x2c>
		LCD_displayString("Enter Pass:");
    13bc:	8f e6       	ldi	r24, 0x6F	; 111
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	0e 94 8a 1a 	call	0x3514	; 0x3514 <LCD_displayString>
    13c4:	07 c0       	rjmp	.+14     	; 0x13d4 <displayEnterPass+0x3a>
	}
	else if(which_time==RE_ENTER){
    13c6:	8b 89       	ldd	r24, Y+19	; 0x13
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	21 f4       	brne	.+8      	; 0x13d4 <displayEnterPass+0x3a>
		LCD_displayString("Re-enter Pass:");
    13cc:	8b e7       	ldi	r24, 0x7B	; 123
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	0e 94 8a 1a 	call	0x3514	; 0x3514 <LCD_displayString>
	}
	LCD_moveCursor(1,0);		/*move cursor to second line*/
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	60 e0       	ldi	r22, 0x00	; 0
    13d8:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_moveCursor>
    13dc:	8e c0       	rjmp	.+284    	; 0x14fa <displayEnterPass+0x160>
	while(count<5)
	{
		button=KEYPAD_getPressedKey();
    13de:	0e 94 fe 10 	call	0x21fc	; 0x21fc <KEYPAD_getPressedKey>
    13e2:	8f 87       	std	Y+15, r24	; 0x0f
		if((button <= 9) && (button >= 0))
    13e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    13e6:	8a 30       	cpi	r24, 0x0A	; 10
    13e8:	30 f4       	brcc	.+12     	; 0x13f6 <displayEnterPass+0x5c>
		{
			LCD_intgerToString(button); /* display the pressed keypad switch */
    13ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ec:	88 2f       	mov	r24, r24
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0e 94 0e 1b 	call	0x361c	; 0x361c <LCD_intgerToString>
    13f4:	03 c0       	rjmp	.+6      	; 0x13fc <displayEnterPass+0x62>
		}
		else
		{
			LCD_displayCharacter(button); /* display the pressed keypad switch */
    13f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13f8:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <LCD_displayCharacter>
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	aa ef       	ldi	r26, 0xFA	; 250
    1402:	b3 e4       	ldi	r27, 0x43	; 67
    1404:	8b 87       	std	Y+11, r24	; 0x0b
    1406:	9c 87       	std	Y+12, r25	; 0x0c
    1408:	ad 87       	std	Y+13, r26	; 0x0d
    140a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    140c:	6b 85       	ldd	r22, Y+11	; 0x0b
    140e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1410:	8d 85       	ldd	r24, Y+13	; 0x0d
    1412:	9e 85       	ldd	r25, Y+14	; 0x0e
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	4a e7       	ldi	r20, 0x7A	; 122
    141a:	53 e4       	ldi	r21, 0x43	; 67
    141c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	8f 83       	std	Y+7, r24	; 0x07
    1426:	98 87       	std	Y+8, r25	; 0x08
    1428:	a9 87       	std	Y+9, r26	; 0x09
    142a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    142c:	6f 81       	ldd	r22, Y+7	; 0x07
    142e:	78 85       	ldd	r23, Y+8	; 0x08
    1430:	89 85       	ldd	r24, Y+9	; 0x09
    1432:	9a 85       	ldd	r25, Y+10	; 0x0a
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e8       	ldi	r20, 0x80	; 128
    143a:	5f e3       	ldi	r21, 0x3F	; 63
    143c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1440:	88 23       	and	r24, r24
    1442:	2c f4       	brge	.+10     	; 0x144e <displayEnterPass+0xb4>
		__ticks = 1;
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	9e 83       	std	Y+6, r25	; 0x06
    144a:	8d 83       	std	Y+5, r24	; 0x05
    144c:	3f c0       	rjmp	.+126    	; 0x14cc <displayEnterPass+0x132>
	else if (__tmp > 65535)
    144e:	6f 81       	ldd	r22, Y+7	; 0x07
    1450:	78 85       	ldd	r23, Y+8	; 0x08
    1452:	89 85       	ldd	r24, Y+9	; 0x09
    1454:	9a 85       	ldd	r25, Y+10	; 0x0a
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	3f ef       	ldi	r19, 0xFF	; 255
    145a:	4f e7       	ldi	r20, 0x7F	; 127
    145c:	57 e4       	ldi	r21, 0x47	; 71
    145e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1462:	18 16       	cp	r1, r24
    1464:	4c f5       	brge	.+82     	; 0x14b8 <displayEnterPass+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1466:	6b 85       	ldd	r22, Y+11	; 0x0b
    1468:	7c 85       	ldd	r23, Y+12	; 0x0c
    146a:	8d 85       	ldd	r24, Y+13	; 0x0d
    146c:	9e 85       	ldd	r25, Y+14	; 0x0e
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 e2       	ldi	r20, 0x20	; 32
    1474:	51 e4       	ldi	r21, 0x41	; 65
    1476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	bc 01       	movw	r22, r24
    1480:	cd 01       	movw	r24, r26
    1482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	9e 83       	std	Y+6, r25	; 0x06
    148c:	8d 83       	std	Y+5, r24	; 0x05
    148e:	0f c0       	rjmp	.+30     	; 0x14ae <displayEnterPass+0x114>
    1490:	89 e1       	ldi	r24, 0x19	; 25
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	9c 83       	std	Y+4, r25	; 0x04
    1496:	8b 83       	std	Y+3, r24	; 0x03
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	9c 81       	ldd	r25, Y+4	; 0x04
    149c:	01 97       	sbiw	r24, 0x01	; 1
    149e:	f1 f7       	brne	.-4      	; 0x149c <displayEnterPass+0x102>
    14a0:	9c 83       	std	Y+4, r25	; 0x04
    14a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a4:	8d 81       	ldd	r24, Y+5	; 0x05
    14a6:	9e 81       	ldd	r25, Y+6	; 0x06
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	9e 83       	std	Y+6, r25	; 0x06
    14ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ae:	8d 81       	ldd	r24, Y+5	; 0x05
    14b0:	9e 81       	ldd	r25, Y+6	; 0x06
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	69 f7       	brne	.-38     	; 0x1490 <displayEnterPass+0xf6>
    14b6:	14 c0       	rjmp	.+40     	; 0x14e0 <displayEnterPass+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b8:	6f 81       	ldd	r22, Y+7	; 0x07
    14ba:	78 85       	ldd	r23, Y+8	; 0x08
    14bc:	89 85       	ldd	r24, Y+9	; 0x09
    14be:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	9e 83       	std	Y+6, r25	; 0x06
    14ca:	8d 83       	std	Y+5, r24	; 0x05
    14cc:	8d 81       	ldd	r24, Y+5	; 0x05
    14ce:	9e 81       	ldd	r25, Y+6	; 0x06
    14d0:	9a 83       	std	Y+2, r25	; 0x02
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	9a 81       	ldd	r25, Y+2	; 0x02
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	f1 f7       	brne	.-4      	; 0x14d8 <displayEnterPass+0x13e>
    14dc:	9a 83       	std	Y+2, r25	; 0x02
    14de:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(500); /* Press time */

		//LCD_displayString("*");
		password[count]=button;
    14e0:	88 89       	ldd	r24, Y+16	; 0x10
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	89 89       	ldd	r24, Y+17	; 0x11
    14e8:	9a 89       	ldd	r25, Y+18	; 0x12
    14ea:	fc 01       	movw	r30, r24
    14ec:	e2 0f       	add	r30, r18
    14ee:	f3 1f       	adc	r31, r19
    14f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    14f2:	80 83       	st	Z, r24
		count++;
    14f4:	88 89       	ldd	r24, Y+16	; 0x10
    14f6:	8f 5f       	subi	r24, 0xFF	; 255
    14f8:	88 8b       	std	Y+16, r24	; 0x10
	}
	else if(which_time==RE_ENTER){
		LCD_displayString("Re-enter Pass:");
	}
	LCD_moveCursor(1,0);		/*move cursor to second line*/
	while(count<5)
    14fa:	88 89       	ldd	r24, Y+16	; 0x10
    14fc:	85 30       	cpi	r24, 0x05	; 5
    14fe:	08 f4       	brcc	.+2      	; 0x1502 <displayEnterPass+0x168>
    1500:	6e cf       	rjmp	.-292    	; 0x13de <displayEnterPass+0x44>

		//LCD_displayString("*");
		password[count]=button;
		count++;
	}
	LCD_moveCursor(1,0);
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_moveCursor>
	LCD_displayString("              ");
    150a:	80 e6       	ldi	r24, 0x60	; 96
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 8a 1a 	call	0x3514	; 0x3514 <LCD_displayString>
	LCD_moveCursor(0,0);
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_moveCursor>
	LCD_displayString("              ");
    151a:	80 e6       	ldi	r24, 0x60	; 96
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	0e 94 8a 1a 	call	0x3514	; 0x3514 <LCD_displayString>
	LCD_moveCursor(0,0);
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	60 e0       	ldi	r22, 0x00	; 0
    1526:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_moveCursor>

	return 1;
    152a:	81 e0       	ldi	r24, 0x01	; 1
}
    152c:	63 96       	adiw	r28, 0x13	; 19
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <intTOStringManually>:
/*
 * turn inters into the equivlant asci value to be able to use uart
 */
uint8 intTOStringManually(uint8 num)
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	00 d0       	rcall	.+0      	; 0x1544 <intTOStringManually+0x6>
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	89 83       	std	Y+1, r24	; 0x01
	if(num==0)return '0';
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	88 23       	and	r24, r24
    154e:	19 f4       	brne	.+6      	; 0x1556 <intTOStringManually+0x18>
    1550:	80 e3       	ldi	r24, 0x30	; 48
    1552:	8a 83       	std	Y+2, r24	; 0x02
    1554:	50 c0       	rjmp	.+160    	; 0x15f6 <intTOStringManually+0xb8>
	else if(num==1)return '1';
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	19 f4       	brne	.+6      	; 0x1562 <intTOStringManually+0x24>
    155c:	81 e3       	ldi	r24, 0x31	; 49
    155e:	8a 83       	std	Y+2, r24	; 0x02
    1560:	4a c0       	rjmp	.+148    	; 0x15f6 <intTOStringManually+0xb8>
	else if(num==2)return '2';
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	82 30       	cpi	r24, 0x02	; 2
    1566:	19 f4       	brne	.+6      	; 0x156e <intTOStringManually+0x30>
    1568:	82 e3       	ldi	r24, 0x32	; 50
    156a:	8a 83       	std	Y+2, r24	; 0x02
    156c:	44 c0       	rjmp	.+136    	; 0x15f6 <intTOStringManually+0xb8>
	else if(num==3)return '3';
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	83 30       	cpi	r24, 0x03	; 3
    1572:	19 f4       	brne	.+6      	; 0x157a <intTOStringManually+0x3c>
    1574:	83 e3       	ldi	r24, 0x33	; 51
    1576:	8a 83       	std	Y+2, r24	; 0x02
    1578:	3e c0       	rjmp	.+124    	; 0x15f6 <intTOStringManually+0xb8>
	else if(num==4)return '4';
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	84 30       	cpi	r24, 0x04	; 4
    157e:	19 f4       	brne	.+6      	; 0x1586 <intTOStringManually+0x48>
    1580:	84 e3       	ldi	r24, 0x34	; 52
    1582:	8a 83       	std	Y+2, r24	; 0x02
    1584:	38 c0       	rjmp	.+112    	; 0x15f6 <intTOStringManually+0xb8>
	else if(num==5)return '5';
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	85 30       	cpi	r24, 0x05	; 5
    158a:	19 f4       	brne	.+6      	; 0x1592 <intTOStringManually+0x54>
    158c:	85 e3       	ldi	r24, 0x35	; 53
    158e:	8a 83       	std	Y+2, r24	; 0x02
    1590:	32 c0       	rjmp	.+100    	; 0x15f6 <intTOStringManually+0xb8>
	else if(num==6)return '6';
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	86 30       	cpi	r24, 0x06	; 6
    1596:	19 f4       	brne	.+6      	; 0x159e <intTOStringManually+0x60>
    1598:	86 e3       	ldi	r24, 0x36	; 54
    159a:	8a 83       	std	Y+2, r24	; 0x02
    159c:	2c c0       	rjmp	.+88     	; 0x15f6 <intTOStringManually+0xb8>
	else if(num==7)return '7';
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	87 30       	cpi	r24, 0x07	; 7
    15a2:	19 f4       	brne	.+6      	; 0x15aa <intTOStringManually+0x6c>
    15a4:	87 e3       	ldi	r24, 0x37	; 55
    15a6:	8a 83       	std	Y+2, r24	; 0x02
    15a8:	26 c0       	rjmp	.+76     	; 0x15f6 <intTOStringManually+0xb8>
	else if(num==8)return '8';
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	88 30       	cpi	r24, 0x08	; 8
    15ae:	19 f4       	brne	.+6      	; 0x15b6 <intTOStringManually+0x78>
    15b0:	88 e3       	ldi	r24, 0x38	; 56
    15b2:	8a 83       	std	Y+2, r24	; 0x02
    15b4:	20 c0       	rjmp	.+64     	; 0x15f6 <intTOStringManually+0xb8>
	else if(num==9)return '9';
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	89 30       	cpi	r24, 0x09	; 9
    15ba:	19 f4       	brne	.+6      	; 0x15c2 <intTOStringManually+0x84>
    15bc:	89 e3       	ldi	r24, 0x39	; 57
    15be:	8a 83       	std	Y+2, r24	; 0x02
    15c0:	1a c0       	rjmp	.+52     	; 0x15f6 <intTOStringManually+0xb8>
	else if (num=='+')return '+';
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	8b 32       	cpi	r24, 0x2B	; 43
    15c6:	19 f4       	brne	.+6      	; 0x15ce <intTOStringManually+0x90>
    15c8:	8b e2       	ldi	r24, 0x2B	; 43
    15ca:	8a 83       	std	Y+2, r24	; 0x02
    15cc:	14 c0       	rjmp	.+40     	; 0x15f6 <intTOStringManually+0xb8>
	else if (num=='-')return '-';
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	8d 32       	cpi	r24, 0x2D	; 45
    15d2:	19 f4       	brne	.+6      	; 0x15da <intTOStringManually+0x9c>
    15d4:	8d e2       	ldi	r24, 0x2D	; 45
    15d6:	8a 83       	std	Y+2, r24	; 0x02
    15d8:	0e c0       	rjmp	.+28     	; 0x15f6 <intTOStringManually+0xb8>
	else if (num=='*')return '*';
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	8a 32       	cpi	r24, 0x2A	; 42
    15de:	19 f4       	brne	.+6      	; 0x15e6 <intTOStringManually+0xa8>
    15e0:	8a e2       	ldi	r24, 0x2A	; 42
    15e2:	8a 83       	std	Y+2, r24	; 0x02
    15e4:	08 c0       	rjmp	.+16     	; 0x15f6 <intTOStringManually+0xb8>
	else if (num=='%')return '%';
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	85 32       	cpi	r24, 0x25	; 37
    15ea:	19 f4       	brne	.+6      	; 0x15f2 <intTOStringManually+0xb4>
    15ec:	85 e2       	ldi	r24, 0x25	; 37
    15ee:	8a 83       	std	Y+2, r24	; 0x02
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <intTOStringManually+0xb8>

	return '0';
    15f2:	80 e3       	ldi	r24, 0x30	; 48
    15f4:	8a 83       	std	Y+2, r24	; 0x02
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <sendPasswordUsingUart>:
void sendPasswordUsingUart(uint8 sent_pass[])
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	62 97       	sbiw	r28, 0x12	; 18
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	9a 8b       	std	Y+18, r25	; 0x12
    1618:	89 8b       	std	Y+17, r24	; 0x11
	uint8 i=0;
    161a:	18 8a       	std	Y+16, r1	; 0x10
    161c:	84 c0       	rjmp	.+264    	; 0x1726 <sendPasswordUsingUart+0x124>
	uint8 modified;
	while(i<5)
	{
		modified=intTOStringManually(sent_pass[i]);
    161e:	88 89       	ldd	r24, Y+16	; 0x10
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	89 89       	ldd	r24, Y+17	; 0x11
    1626:	9a 89       	ldd	r25, Y+18	; 0x12
    1628:	fc 01       	movw	r30, r24
    162a:	e2 0f       	add	r30, r18
    162c:	f3 1f       	adc	r31, r19
    162e:	80 81       	ld	r24, Z
    1630:	0e 94 9f 0a 	call	0x153e	; 0x153e <intTOStringManually>
    1634:	8f 87       	std	Y+15, r24	; 0x0f
		//while(UART_recieveByte() != MC2_READY){}
		UART_sendByte(modified);
    1636:	8f 85       	ldd	r24, Y+15	; 0x0f
    1638:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <UART_sendByte>
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	aa ef       	ldi	r26, 0xFA	; 250
    1642:	b3 e4       	ldi	r27, 0x43	; 67
    1644:	8b 87       	std	Y+11, r24	; 0x0b
    1646:	9c 87       	std	Y+12, r25	; 0x0c
    1648:	ad 87       	std	Y+13, r26	; 0x0d
    164a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164c:	6b 85       	ldd	r22, Y+11	; 0x0b
    164e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1650:	8d 85       	ldd	r24, Y+13	; 0x0d
    1652:	9e 85       	ldd	r25, Y+14	; 0x0e
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	4a e7       	ldi	r20, 0x7A	; 122
    165a:	53 e4       	ldi	r21, 0x43	; 67
    165c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	8f 83       	std	Y+7, r24	; 0x07
    1666:	98 87       	std	Y+8, r25	; 0x08
    1668:	a9 87       	std	Y+9, r26	; 0x09
    166a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    166c:	6f 81       	ldd	r22, Y+7	; 0x07
    166e:	78 85       	ldd	r23, Y+8	; 0x08
    1670:	89 85       	ldd	r24, Y+9	; 0x09
    1672:	9a 85       	ldd	r25, Y+10	; 0x0a
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	40 e8       	ldi	r20, 0x80	; 128
    167a:	5f e3       	ldi	r21, 0x3F	; 63
    167c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1680:	88 23       	and	r24, r24
    1682:	2c f4       	brge	.+10     	; 0x168e <sendPasswordUsingUart+0x8c>
		__ticks = 1;
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	9e 83       	std	Y+6, r25	; 0x06
    168a:	8d 83       	std	Y+5, r24	; 0x05
    168c:	3f c0       	rjmp	.+126    	; 0x170c <sendPasswordUsingUart+0x10a>
	else if (__tmp > 65535)
    168e:	6f 81       	ldd	r22, Y+7	; 0x07
    1690:	78 85       	ldd	r23, Y+8	; 0x08
    1692:	89 85       	ldd	r24, Y+9	; 0x09
    1694:	9a 85       	ldd	r25, Y+10	; 0x0a
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	3f ef       	ldi	r19, 0xFF	; 255
    169a:	4f e7       	ldi	r20, 0x7F	; 127
    169c:	57 e4       	ldi	r21, 0x47	; 71
    169e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16a2:	18 16       	cp	r1, r24
    16a4:	4c f5       	brge	.+82     	; 0x16f8 <sendPasswordUsingUart+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e2       	ldi	r20, 0x20	; 32
    16b4:	51 e4       	ldi	r21, 0x41	; 65
    16b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	bc 01       	movw	r22, r24
    16c0:	cd 01       	movw	r24, r26
    16c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	9e 83       	std	Y+6, r25	; 0x06
    16cc:	8d 83       	std	Y+5, r24	; 0x05
    16ce:	0f c0       	rjmp	.+30     	; 0x16ee <sendPasswordUsingUart+0xec>
    16d0:	89 e1       	ldi	r24, 0x19	; 25
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	9c 83       	std	Y+4, r25	; 0x04
    16d6:	8b 83       	std	Y+3, r24	; 0x03
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	9c 81       	ldd	r25, Y+4	; 0x04
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	f1 f7       	brne	.-4      	; 0x16dc <sendPasswordUsingUart+0xda>
    16e0:	9c 83       	std	Y+4, r25	; 0x04
    16e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e4:	8d 81       	ldd	r24, Y+5	; 0x05
    16e6:	9e 81       	ldd	r25, Y+6	; 0x06
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	9e 83       	std	Y+6, r25	; 0x06
    16ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ee:	8d 81       	ldd	r24, Y+5	; 0x05
    16f0:	9e 81       	ldd	r25, Y+6	; 0x06
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	69 f7       	brne	.-38     	; 0x16d0 <sendPasswordUsingUart+0xce>
    16f6:	14 c0       	rjmp	.+40     	; 0x1720 <sendPasswordUsingUart+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f8:	6f 81       	ldd	r22, Y+7	; 0x07
    16fa:	78 85       	ldd	r23, Y+8	; 0x08
    16fc:	89 85       	ldd	r24, Y+9	; 0x09
    16fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	9e 83       	std	Y+6, r25	; 0x06
    170a:	8d 83       	std	Y+5, r24	; 0x05
    170c:	8d 81       	ldd	r24, Y+5	; 0x05
    170e:	9e 81       	ldd	r25, Y+6	; 0x06
    1710:	9a 83       	std	Y+2, r25	; 0x02
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	9a 81       	ldd	r25, Y+2	; 0x02
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <sendPasswordUsingUart+0x116>
    171c:	9a 83       	std	Y+2, r25	; 0x02
    171e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		i++;
    1720:	88 89       	ldd	r24, Y+16	; 0x10
    1722:	8f 5f       	subi	r24, 0xFF	; 255
    1724:	88 8b       	std	Y+16, r24	; 0x10
}
void sendPasswordUsingUart(uint8 sent_pass[])
{
	uint8 i=0;
	uint8 modified;
	while(i<5)
    1726:	88 89       	ldd	r24, Y+16	; 0x10
    1728:	85 30       	cpi	r24, 0x05	; 5
    172a:	08 f4       	brcc	.+2      	; 0x172e <sendPasswordUsingUart+0x12c>
    172c:	78 cf       	rjmp	.-272    	; 0x161e <sendPasswordUsingUart+0x1c>
		//while(UART_recieveByte() != MC2_READY){}
		UART_sendByte(modified);
		_delay_ms(500);
		i++;
	}
}
    172e:	62 96       	adiw	r28, 0x12	; 18
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	de bf       	out	0x3e, r29	; 62
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	cd bf       	out	0x3d, r28	; 61
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <userWishes>:
/*
 * displayes acording to the stste that it gets from MCU2
 */
uint8 userWishes(uint8 pass_check)
{
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	ad 97       	sbiw	r28, 0x2d	; 45
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	8d a7       	std	Y+45, r24	; 0x2d

	uint8 key='*';
    1756:	8a e2       	ldi	r24, 0x2A	; 42
    1758:	8c a7       	std	Y+44, r24	; 0x2c
	uint8 W_trials=1;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	8b a7       	std	Y+43, r24	; 0x2b
	static uint8 R_trials=1;
	pass_check=UART_recieveByte();
    175e:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <UART_recieveByte>
    1762:	8d a7       	std	Y+45, r24	; 0x2d
	if(pass_check=='R'){
    1764:	8d a5       	ldd	r24, Y+45	; 0x2d
    1766:	82 35       	cpi	r24, 0x52	; 82
    1768:	b9 f5       	brne	.+110    	; 0x17d8 <userWishes+0x98>
		/*
		 * if password is correct ask if the user wants to open door or change pass
		 * then send the key that the user choose to MCU to MCU2
		 */
			UART_receiveString(g_open_door);
    176a:	84 ee       	ldi	r24, 0xE4	; 228
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <UART_receiveString>
			LCD_moveCursor(0,0);
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_moveCursor>
			LCD_displayString(g_open_door);
    177a:	84 ee       	ldi	r24, 0xE4	; 228
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	0e 94 8a 1a 	call	0x3514	; 0x3514 <LCD_displayString>

			UART_receiveString(g_Change_pass);
    1782:	86 ec       	ldi	r24, 0xC6	; 198
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <UART_receiveString>
			LCD_moveCursor(1,0);
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	60 e0       	ldi	r22, 0x00	; 0
    178e:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_moveCursor>
			LCD_displayString(g_Change_pass);
    1792:	86 ec       	ldi	r24, 0xC6	; 198
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	0e 94 8a 1a 	call	0x3514	; 0x3514 <LCD_displayString>
			key=KEYPAD_getPressedKey();
    179a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <KEYPAD_getPressedKey>
    179e:	8c a7       	std	Y+44, r24	; 0x2c
			UART_sendByte(key);		/*send the user choice + or -*/
    17a0:	8c a5       	ldd	r24, Y+44	; 0x2c
    17a2:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <UART_sendByte>
			LCD_moveCursor(1,0);
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_moveCursor>
			LCD_displayString("              ");
    17ae:	80 e6       	ldi	r24, 0x60	; 96
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0e 94 8a 1a 	call	0x3514	; 0x3514 <LCD_displayString>
			LCD_moveCursor(0,0);
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	60 e0       	ldi	r22, 0x00	; 0
    17ba:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_moveCursor>
			LCD_displayString("              ");
    17be:	80 e6       	ldi	r24, 0x60	; 96
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 8a 1a 	call	0x3514	; 0x3514 <LCD_displayString>
			LCD_moveCursor(0,0);
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_moveCursor>
			R_trials++;
    17ce:	80 91 93 00 	lds	r24, 0x0093
    17d2:	8f 5f       	subi	r24, 0xFF	; 255
    17d4:	80 93 93 00 	sts	0x0093, r24

	}
	if(pass_check=='P')
    17d8:	8d a5       	ldd	r24, Y+45	; 0x2d
    17da:	80 35       	cpi	r24, 0x50	; 80
    17dc:	09 f0       	breq	.+2      	; 0x17e0 <userWishes+0xa0>
    17de:	8f c0       	rjmp	.+286    	; 0x18fe <userWishes+0x1be>
	{
		displayEnterPass(g_password,ENTER);
    17e0:	88 ea       	ldi	r24, 0xA8	; 168
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	60 e0       	ldi	r22, 0x00	; 0
    17e6:	0e 94 cd 09 	call	0x139a	; 0x139a <displayEnterPass>
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	a8 ec       	ldi	r26, 0xC8	; 200
    17f0:	b2 e4       	ldi	r27, 0x42	; 66
    17f2:	8f a3       	std	Y+39, r24	; 0x27
    17f4:	98 a7       	std	Y+40, r25	; 0x28
    17f6:	a9 a7       	std	Y+41, r26	; 0x29
    17f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17fa:	6f a1       	ldd	r22, Y+39	; 0x27
    17fc:	78 a5       	ldd	r23, Y+40	; 0x28
    17fe:	89 a5       	ldd	r24, Y+41	; 0x29
    1800:	9a a5       	ldd	r25, Y+42	; 0x2a
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	4a e7       	ldi	r20, 0x7A	; 122
    1808:	53 e4       	ldi	r21, 0x43	; 67
    180a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	8b a3       	std	Y+35, r24	; 0x23
    1814:	9c a3       	std	Y+36, r25	; 0x24
    1816:	ad a3       	std	Y+37, r26	; 0x25
    1818:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    181a:	6b a1       	ldd	r22, Y+35	; 0x23
    181c:	7c a1       	ldd	r23, Y+36	; 0x24
    181e:	8d a1       	ldd	r24, Y+37	; 0x25
    1820:	9e a1       	ldd	r25, Y+38	; 0x26
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	40 e8       	ldi	r20, 0x80	; 128
    1828:	5f e3       	ldi	r21, 0x3F	; 63
    182a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    182e:	88 23       	and	r24, r24
    1830:	2c f4       	brge	.+10     	; 0x183c <userWishes+0xfc>
		__ticks = 1;
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	9a a3       	std	Y+34, r25	; 0x22
    1838:	89 a3       	std	Y+33, r24	; 0x21
    183a:	3f c0       	rjmp	.+126    	; 0x18ba <userWishes+0x17a>
	else if (__tmp > 65535)
    183c:	6b a1       	ldd	r22, Y+35	; 0x23
    183e:	7c a1       	ldd	r23, Y+36	; 0x24
    1840:	8d a1       	ldd	r24, Y+37	; 0x25
    1842:	9e a1       	ldd	r25, Y+38	; 0x26
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	3f ef       	ldi	r19, 0xFF	; 255
    1848:	4f e7       	ldi	r20, 0x7F	; 127
    184a:	57 e4       	ldi	r21, 0x47	; 71
    184c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1850:	18 16       	cp	r1, r24
    1852:	4c f5       	brge	.+82     	; 0x18a6 <userWishes+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1854:	6f a1       	ldd	r22, Y+39	; 0x27
    1856:	78 a5       	ldd	r23, Y+40	; 0x28
    1858:	89 a5       	ldd	r24, Y+41	; 0x29
    185a:	9a a5       	ldd	r25, Y+42	; 0x2a
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	40 e2       	ldi	r20, 0x20	; 32
    1862:	51 e4       	ldi	r21, 0x41	; 65
    1864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	bc 01       	movw	r22, r24
    186e:	cd 01       	movw	r24, r26
    1870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	9a a3       	std	Y+34, r25	; 0x22
    187a:	89 a3       	std	Y+33, r24	; 0x21
    187c:	0f c0       	rjmp	.+30     	; 0x189c <userWishes+0x15c>
    187e:	89 e1       	ldi	r24, 0x19	; 25
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	98 a3       	std	Y+32, r25	; 0x20
    1884:	8f 8f       	std	Y+31, r24	; 0x1f
    1886:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1888:	98 a1       	ldd	r25, Y+32	; 0x20
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <userWishes+0x14a>
    188e:	98 a3       	std	Y+32, r25	; 0x20
    1890:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1892:	89 a1       	ldd	r24, Y+33	; 0x21
    1894:	9a a1       	ldd	r25, Y+34	; 0x22
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	9a a3       	std	Y+34, r25	; 0x22
    189a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189c:	89 a1       	ldd	r24, Y+33	; 0x21
    189e:	9a a1       	ldd	r25, Y+34	; 0x22
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	69 f7       	brne	.-38     	; 0x187e <userWishes+0x13e>
    18a4:	14 c0       	rjmp	.+40     	; 0x18ce <userWishes+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a6:	6b a1       	ldd	r22, Y+35	; 0x23
    18a8:	7c a1       	ldd	r23, Y+36	; 0x24
    18aa:	8d a1       	ldd	r24, Y+37	; 0x25
    18ac:	9e a1       	ldd	r25, Y+38	; 0x26
    18ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	9a a3       	std	Y+34, r25	; 0x22
    18b8:	89 a3       	std	Y+33, r24	; 0x21
    18ba:	89 a1       	ldd	r24, Y+33	; 0x21
    18bc:	9a a1       	ldd	r25, Y+34	; 0x22
    18be:	9e 8f       	std	Y+30, r25	; 0x1e
    18c0:	8d 8f       	std	Y+29, r24	; 0x1d
    18c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	f1 f7       	brne	.-4      	; 0x18c6 <userWishes+0x186>
    18ca:	9e 8f       	std	Y+30, r25	; 0x1e
    18cc:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		sendPasswordUsingUart(g_password);
    18ce:	88 ea       	ldi	r24, 0xA8	; 168
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	0e 94 01 0b 	call	0x1602	; 0x1602 <sendPasswordUsingUart>
		LCD_moveCursor(1,0);
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	60 e0       	ldi	r22, 0x00	; 0
    18da:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_moveCursor>
		LCD_displayString("              ");
    18de:	80 e6       	ldi	r24, 0x60	; 96
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	0e 94 8a 1a 	call	0x3514	; 0x3514 <LCD_displayString>
		LCD_moveCursor(0,0);
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	60 e0       	ldi	r22, 0x00	; 0
    18ea:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_moveCursor>
		LCD_displayString("              ");
    18ee:	80 e6       	ldi	r24, 0x60	; 96
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	0e 94 8a 1a 	call	0x3514	; 0x3514 <LCD_displayString>
		LCD_moveCursor(0,0);
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	60 e0       	ldi	r22, 0x00	; 0
    18fa:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_moveCursor>
	}
	if(pass_check=='W')
    18fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    1900:	87 35       	cpi	r24, 0x57	; 87
    1902:	09 f0       	breq	.+2      	; 0x1906 <userWishes+0x1c6>
    1904:	19 c1       	rjmp	.+562    	; 0x1b38 <userWishes+0x3f8>
	{
		displayEnterPass(g_password,ENTER);
    1906:	88 ea       	ldi	r24, 0xA8	; 168
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	60 e0       	ldi	r22, 0x00	; 0
    190c:	0e 94 cd 09 	call	0x139a	; 0x139a <displayEnterPass>
		displayEnterPass(g_re_entered_password,RE_ENTER);
    1910:	8a e9       	ldi	r24, 0x9A	; 154
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	61 e0       	ldi	r22, 0x01	; 1
    1916:	0e 94 cd 09 	call	0x139a	; 0x139a <displayEnterPass>
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	a8 ec       	ldi	r26, 0xC8	; 200
    1920:	b2 e4       	ldi	r27, 0x42	; 66
    1922:	89 8f       	std	Y+25, r24	; 0x19
    1924:	9a 8f       	std	Y+26, r25	; 0x1a
    1926:	ab 8f       	std	Y+27, r26	; 0x1b
    1928:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    192a:	69 8d       	ldd	r22, Y+25	; 0x19
    192c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    192e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1930:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	4a e7       	ldi	r20, 0x7A	; 122
    1938:	53 e4       	ldi	r21, 0x43	; 67
    193a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	8d 8b       	std	Y+21, r24	; 0x15
    1944:	9e 8b       	std	Y+22, r25	; 0x16
    1946:	af 8b       	std	Y+23, r26	; 0x17
    1948:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    194a:	6d 89       	ldd	r22, Y+21	; 0x15
    194c:	7e 89       	ldd	r23, Y+22	; 0x16
    194e:	8f 89       	ldd	r24, Y+23	; 0x17
    1950:	98 8d       	ldd	r25, Y+24	; 0x18
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	40 e8       	ldi	r20, 0x80	; 128
    1958:	5f e3       	ldi	r21, 0x3F	; 63
    195a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    195e:	88 23       	and	r24, r24
    1960:	2c f4       	brge	.+10     	; 0x196c <userWishes+0x22c>
		__ticks = 1;
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	9c 8b       	std	Y+20, r25	; 0x14
    1968:	8b 8b       	std	Y+19, r24	; 0x13
    196a:	3f c0       	rjmp	.+126    	; 0x19ea <userWishes+0x2aa>
	else if (__tmp > 65535)
    196c:	6d 89       	ldd	r22, Y+21	; 0x15
    196e:	7e 89       	ldd	r23, Y+22	; 0x16
    1970:	8f 89       	ldd	r24, Y+23	; 0x17
    1972:	98 8d       	ldd	r25, Y+24	; 0x18
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	3f ef       	ldi	r19, 0xFF	; 255
    1978:	4f e7       	ldi	r20, 0x7F	; 127
    197a:	57 e4       	ldi	r21, 0x47	; 71
    197c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1980:	18 16       	cp	r1, r24
    1982:	4c f5       	brge	.+82     	; 0x19d6 <userWishes+0x296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1984:	69 8d       	ldd	r22, Y+25	; 0x19
    1986:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1988:	8b 8d       	ldd	r24, Y+27	; 0x1b
    198a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	40 e2       	ldi	r20, 0x20	; 32
    1992:	51 e4       	ldi	r21, 0x41	; 65
    1994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	bc 01       	movw	r22, r24
    199e:	cd 01       	movw	r24, r26
    19a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	9c 8b       	std	Y+20, r25	; 0x14
    19aa:	8b 8b       	std	Y+19, r24	; 0x13
    19ac:	0f c0       	rjmp	.+30     	; 0x19cc <userWishes+0x28c>
    19ae:	89 e1       	ldi	r24, 0x19	; 25
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	9a 8b       	std	Y+18, r25	; 0x12
    19b4:	89 8b       	std	Y+17, r24	; 0x11
    19b6:	89 89       	ldd	r24, Y+17	; 0x11
    19b8:	9a 89       	ldd	r25, Y+18	; 0x12
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	f1 f7       	brne	.-4      	; 0x19ba <userWishes+0x27a>
    19be:	9a 8b       	std	Y+18, r25	; 0x12
    19c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c2:	8b 89       	ldd	r24, Y+19	; 0x13
    19c4:	9c 89       	ldd	r25, Y+20	; 0x14
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	9c 8b       	std	Y+20, r25	; 0x14
    19ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19cc:	8b 89       	ldd	r24, Y+19	; 0x13
    19ce:	9c 89       	ldd	r25, Y+20	; 0x14
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	69 f7       	brne	.-38     	; 0x19ae <userWishes+0x26e>
    19d4:	14 c0       	rjmp	.+40     	; 0x19fe <userWishes+0x2be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d6:	6d 89       	ldd	r22, Y+21	; 0x15
    19d8:	7e 89       	ldd	r23, Y+22	; 0x16
    19da:	8f 89       	ldd	r24, Y+23	; 0x17
    19dc:	98 8d       	ldd	r25, Y+24	; 0x18
    19de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	9c 8b       	std	Y+20, r25	; 0x14
    19e8:	8b 8b       	std	Y+19, r24	; 0x13
    19ea:	8b 89       	ldd	r24, Y+19	; 0x13
    19ec:	9c 89       	ldd	r25, Y+20	; 0x14
    19ee:	98 8b       	std	Y+16, r25	; 0x10
    19f0:	8f 87       	std	Y+15, r24	; 0x0f
    19f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19f4:	98 89       	ldd	r25, Y+16	; 0x10
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	f1 f7       	brne	.-4      	; 0x19f6 <userWishes+0x2b6>
    19fa:	98 8b       	std	Y+16, r25	; 0x10
    19fc:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		sendPasswordUsingUart(g_password);
    19fe:	88 ea       	ldi	r24, 0xA8	; 168
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	0e 94 01 0b 	call	0x1602	; 0x1602 <sendPasswordUsingUart>
		sendPasswordUsingUart(g_re_entered_password);
    1a06:	8a e9       	ldi	r24, 0x9A	; 154
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	0e 94 01 0b 	call	0x1602	; 0x1602 <sendPasswordUsingUart>
		W_trials++;
    1a0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a10:	8f 5f       	subi	r24, 0xFF	; 255
    1a12:	8b a7       	std	Y+43, r24	; 0x2b
		if(W_trials==4){
    1a14:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a16:	84 30       	cpi	r24, 0x04	; 4
    1a18:	09 f0       	breq	.+2      	; 0x1a1c <userWishes+0x2dc>
    1a1a:	8e c0       	rjmp	.+284    	; 0x1b38 <userWishes+0x3f8>
			UART_receiveString(g_thief);
    1a1c:	82 eb       	ldi	r24, 0xB2	; 178
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <UART_receiveString>
			LCD_moveCursor(1,0);
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	60 e0       	ldi	r22, 0x00	; 0
    1a28:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_moveCursor>
			LCD_displayString("              ");
    1a2c:	80 e6       	ldi	r24, 0x60	; 96
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	0e 94 8a 1a 	call	0x3514	; 0x3514 <LCD_displayString>
			LCD_moveCursor(0,0);
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	60 e0       	ldi	r22, 0x00	; 0
    1a38:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_moveCursor>
			LCD_displayString("              ");
    1a3c:	80 e6       	ldi	r24, 0x60	; 96
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	0e 94 8a 1a 	call	0x3514	; 0x3514 <LCD_displayString>
			LCD_moveCursor(0,0);
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	60 e0       	ldi	r22, 0x00	; 0
    1a48:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_moveCursor>
			LCD_displayString(g_thief);
    1a4c:	82 eb       	ldi	r24, 0xB2	; 178
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	0e 94 8a 1a 	call	0x3514	; 0x3514 <LCD_displayString>
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	90 e4       	ldi	r25, 0x40	; 64
    1a58:	ac e1       	ldi	r26, 0x1C	; 28
    1a5a:	b6 e4       	ldi	r27, 0x46	; 70
    1a5c:	8b 87       	std	Y+11, r24	; 0x0b
    1a5e:	9c 87       	std	Y+12, r25	; 0x0c
    1a60:	ad 87       	std	Y+13, r26	; 0x0d
    1a62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	4a e7       	ldi	r20, 0x7A	; 122
    1a72:	53 e4       	ldi	r21, 0x43	; 67
    1a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	8f 83       	std	Y+7, r24	; 0x07
    1a7e:	98 87       	std	Y+8, r25	; 0x08
    1a80:	a9 87       	std	Y+9, r26	; 0x09
    1a82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a84:	6f 81       	ldd	r22, Y+7	; 0x07
    1a86:	78 85       	ldd	r23, Y+8	; 0x08
    1a88:	89 85       	ldd	r24, Y+9	; 0x09
    1a8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	40 e8       	ldi	r20, 0x80	; 128
    1a92:	5f e3       	ldi	r21, 0x3F	; 63
    1a94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a98:	88 23       	and	r24, r24
    1a9a:	2c f4       	brge	.+10     	; 0x1aa6 <userWishes+0x366>
		__ticks = 1;
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	9e 83       	std	Y+6, r25	; 0x06
    1aa2:	8d 83       	std	Y+5, r24	; 0x05
    1aa4:	3f c0       	rjmp	.+126    	; 0x1b24 <userWishes+0x3e4>
	else if (__tmp > 65535)
    1aa6:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa8:	78 85       	ldd	r23, Y+8	; 0x08
    1aaa:	89 85       	ldd	r24, Y+9	; 0x09
    1aac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	3f ef       	ldi	r19, 0xFF	; 255
    1ab2:	4f e7       	ldi	r20, 0x7F	; 127
    1ab4:	57 e4       	ldi	r21, 0x47	; 71
    1ab6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aba:	18 16       	cp	r1, r24
    1abc:	4c f5       	brge	.+82     	; 0x1b10 <userWishes+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1abe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e2       	ldi	r20, 0x20	; 32
    1acc:	51 e4       	ldi	r21, 0x41	; 65
    1ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	bc 01       	movw	r22, r24
    1ad8:	cd 01       	movw	r24, r26
    1ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	9e 83       	std	Y+6, r25	; 0x06
    1ae4:	8d 83       	std	Y+5, r24	; 0x05
    1ae6:	0f c0       	rjmp	.+30     	; 0x1b06 <userWishes+0x3c6>
    1ae8:	89 e1       	ldi	r24, 0x19	; 25
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	9c 83       	std	Y+4, r25	; 0x04
    1aee:	8b 83       	std	Y+3, r24	; 0x03
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	9c 81       	ldd	r25, Y+4	; 0x04
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	f1 f7       	brne	.-4      	; 0x1af4 <userWishes+0x3b4>
    1af8:	9c 83       	std	Y+4, r25	; 0x04
    1afa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afc:	8d 81       	ldd	r24, Y+5	; 0x05
    1afe:	9e 81       	ldd	r25, Y+6	; 0x06
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	9e 83       	std	Y+6, r25	; 0x06
    1b04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b06:	8d 81       	ldd	r24, Y+5	; 0x05
    1b08:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	69 f7       	brne	.-38     	; 0x1ae8 <userWishes+0x3a8>
    1b0e:	14 c0       	rjmp	.+40     	; 0x1b38 <userWishes+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b10:	6f 81       	ldd	r22, Y+7	; 0x07
    1b12:	78 85       	ldd	r23, Y+8	; 0x08
    1b14:	89 85       	ldd	r24, Y+9	; 0x09
    1b16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	9e 83       	std	Y+6, r25	; 0x06
    1b22:	8d 83       	std	Y+5, r24	; 0x05
    1b24:	8d 81       	ldd	r24, Y+5	; 0x05
    1b26:	9e 81       	ldd	r25, Y+6	; 0x06
    1b28:	9a 83       	std	Y+2, r25	; 0x02
    1b2a:	89 83       	std	Y+1, r24	; 0x01
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	f1 f7       	brne	.-4      	; 0x1b30 <userWishes+0x3f0>
    1b34:	9a 83       	std	Y+2, r25	; 0x02
    1b36:	89 83       	std	Y+1, r24	; 0x01

		}
	}


	return key;
    1b38:	8c a5       	ldd	r24, Y+44	; 0x2c
}
    1b3a:	ad 96       	adiw	r28, 0x2d	; 45
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	cd bf       	out	0x3d, r28	; 61
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <Timer0_count1>:
void Timer0_count1(void)
{
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
	count1++;
    1b54:	80 91 94 00 	lds	r24, 0x0094
    1b58:	90 91 95 00 	lds	r25, 0x0095
    1b5c:	a0 91 96 00 	lds	r26, 0x0096
    1b60:	b0 91 97 00 	lds	r27, 0x0097
    1b64:	01 96       	adiw	r24, 0x01	; 1
    1b66:	a1 1d       	adc	r26, r1
    1b68:	b1 1d       	adc	r27, r1
    1b6a:	80 93 94 00 	sts	0x0094, r24
    1b6e:	90 93 95 00 	sts	0x0095, r25
    1b72:	a0 93 96 00 	sts	0x0096, r26
    1b76:	b0 93 97 00 	sts	0x0097, r27
}
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	08 95       	ret

00001b80 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	00 d0       	rcall	.+0      	; 0x1b86 <GPIO_setupPinDirection+0x6>
    1b86:	00 d0       	rcall	.+0      	; 0x1b88 <GPIO_setupPinDirection+0x8>
    1b88:	0f 92       	push	r0
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
    1b8e:	89 83       	std	Y+1, r24	; 0x01
    1b90:	6a 83       	std	Y+2, r22	; 0x02
    1b92:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	88 30       	cpi	r24, 0x08	; 8
    1b98:	08 f0       	brcs	.+2      	; 0x1b9c <GPIO_setupPinDirection+0x1c>
    1b9a:	d5 c0       	rjmp	.+426    	; 0x1d46 <GPIO_setupPinDirection+0x1c6>
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	84 30       	cpi	r24, 0x04	; 4
    1ba0:	08 f0       	brcs	.+2      	; 0x1ba4 <GPIO_setupPinDirection+0x24>
    1ba2:	d1 c0       	rjmp	.+418    	; 0x1d46 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	3d 83       	std	Y+5, r19	; 0x05
    1bac:	2c 83       	std	Y+4, r18	; 0x04
    1bae:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb2:	81 30       	cpi	r24, 0x01	; 1
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <GPIO_setupPinDirection+0x3a>
    1bb8:	43 c0       	rjmp	.+134    	; 0x1c40 <GPIO_setupPinDirection+0xc0>
    1bba:	2c 81       	ldd	r18, Y+4	; 0x04
    1bbc:	3d 81       	ldd	r19, Y+5	; 0x05
    1bbe:	22 30       	cpi	r18, 0x02	; 2
    1bc0:	31 05       	cpc	r19, r1
    1bc2:	2c f4       	brge	.+10     	; 0x1bce <GPIO_setupPinDirection+0x4e>
    1bc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	71 f0       	breq	.+28     	; 0x1be8 <GPIO_setupPinDirection+0x68>
    1bcc:	bc c0       	rjmp	.+376    	; 0x1d46 <GPIO_setupPinDirection+0x1c6>
    1bce:	2c 81       	ldd	r18, Y+4	; 0x04
    1bd0:	3d 81       	ldd	r19, Y+5	; 0x05
    1bd2:	22 30       	cpi	r18, 0x02	; 2
    1bd4:	31 05       	cpc	r19, r1
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <GPIO_setupPinDirection+0x5a>
    1bd8:	5f c0       	rjmp	.+190    	; 0x1c98 <GPIO_setupPinDirection+0x118>
    1bda:	8c 81       	ldd	r24, Y+4	; 0x04
    1bdc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bde:	83 30       	cpi	r24, 0x03	; 3
    1be0:	91 05       	cpc	r25, r1
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <GPIO_setupPinDirection+0x66>
    1be4:	85 c0       	rjmp	.+266    	; 0x1cf0 <GPIO_setupPinDirection+0x170>
    1be6:	af c0       	rjmp	.+350    	; 0x1d46 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	81 30       	cpi	r24, 0x01	; 1
    1bec:	a1 f4       	brne	.+40     	; 0x1c16 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1bee:	aa e3       	ldi	r26, 0x3A	; 58
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	ea e3       	ldi	r30, 0x3A	; 58
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	48 2f       	mov	r20, r24
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	02 2e       	mov	r0, r18
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <GPIO_setupPinDirection+0x8c>
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	0a 94       	dec	r0
    1c0e:	e2 f7       	brpl	.-8      	; 0x1c08 <GPIO_setupPinDirection+0x88>
    1c10:	84 2b       	or	r24, r20
    1c12:	8c 93       	st	X, r24
    1c14:	98 c0       	rjmp	.+304    	; 0x1d46 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1c16:	aa e3       	ldi	r26, 0x3A	; 58
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	ea e3       	ldi	r30, 0x3A	; 58
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	48 2f       	mov	r20, r24
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	02 2e       	mov	r0, r18
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <GPIO_setupPinDirection+0xb4>
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	0a 94       	dec	r0
    1c36:	e2 f7       	brpl	.-8      	; 0x1c30 <GPIO_setupPinDirection+0xb0>
    1c38:	80 95       	com	r24
    1c3a:	84 23       	and	r24, r20
    1c3c:	8c 93       	st	X, r24
    1c3e:	83 c0       	rjmp	.+262    	; 0x1d46 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	81 30       	cpi	r24, 0x01	; 1
    1c44:	a1 f4       	brne	.+40     	; 0x1c6e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1c46:	a7 e3       	ldi	r26, 0x37	; 55
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e7 e3       	ldi	r30, 0x37	; 55
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	48 2f       	mov	r20, r24
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	28 2f       	mov	r18, r24
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	02 2e       	mov	r0, r18
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <GPIO_setupPinDirection+0xe4>
    1c60:	88 0f       	add	r24, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	0a 94       	dec	r0
    1c66:	e2 f7       	brpl	.-8      	; 0x1c60 <GPIO_setupPinDirection+0xe0>
    1c68:	84 2b       	or	r24, r20
    1c6a:	8c 93       	st	X, r24
    1c6c:	6c c0       	rjmp	.+216    	; 0x1d46 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1c6e:	a7 e3       	ldi	r26, 0x37	; 55
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e7 e3       	ldi	r30, 0x37	; 55
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	48 2f       	mov	r20, r24
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	02 2e       	mov	r0, r18
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <GPIO_setupPinDirection+0x10c>
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	0a 94       	dec	r0
    1c8e:	e2 f7       	brpl	.-8      	; 0x1c88 <GPIO_setupPinDirection+0x108>
    1c90:	80 95       	com	r24
    1c92:	84 23       	and	r24, r20
    1c94:	8c 93       	st	X, r24
    1c96:	57 c0       	rjmp	.+174    	; 0x1d46 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	81 30       	cpi	r24, 0x01	; 1
    1c9c:	a1 f4       	brne	.+40     	; 0x1cc6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1c9e:	a4 e3       	ldi	r26, 0x34	; 52
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e4 e3       	ldi	r30, 0x34	; 52
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	48 2f       	mov	r20, r24
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	02 2e       	mov	r0, r18
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <GPIO_setupPinDirection+0x13c>
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	0a 94       	dec	r0
    1cbe:	e2 f7       	brpl	.-8      	; 0x1cb8 <GPIO_setupPinDirection+0x138>
    1cc0:	84 2b       	or	r24, r20
    1cc2:	8c 93       	st	X, r24
    1cc4:	40 c0       	rjmp	.+128    	; 0x1d46 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1cc6:	a4 e3       	ldi	r26, 0x34	; 52
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	e4 e3       	ldi	r30, 0x34	; 52
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	48 2f       	mov	r20, r24
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	28 2f       	mov	r18, r24
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	02 2e       	mov	r0, r18
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <GPIO_setupPinDirection+0x164>
    1ce0:	88 0f       	add	r24, r24
    1ce2:	99 1f       	adc	r25, r25
    1ce4:	0a 94       	dec	r0
    1ce6:	e2 f7       	brpl	.-8      	; 0x1ce0 <GPIO_setupPinDirection+0x160>
    1ce8:	80 95       	com	r24
    1cea:	84 23       	and	r24, r20
    1cec:	8c 93       	st	X, r24
    1cee:	2b c0       	rjmp	.+86     	; 0x1d46 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	81 30       	cpi	r24, 0x01	; 1
    1cf4:	a1 f4       	brne	.+40     	; 0x1d1e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1cf6:	a1 e3       	ldi	r26, 0x31	; 49
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e1 e3       	ldi	r30, 0x31	; 49
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	48 2f       	mov	r20, r24
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 2e       	mov	r0, r18
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <GPIO_setupPinDirection+0x194>
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	0a 94       	dec	r0
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <GPIO_setupPinDirection+0x190>
    1d18:	84 2b       	or	r24, r20
    1d1a:	8c 93       	st	X, r24
    1d1c:	14 c0       	rjmp	.+40     	; 0x1d46 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1d1e:	a1 e3       	ldi	r26, 0x31	; 49
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e1 e3       	ldi	r30, 0x31	; 49
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	48 2f       	mov	r20, r24
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	02 2e       	mov	r0, r18
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <GPIO_setupPinDirection+0x1bc>
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	0a 94       	dec	r0
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <GPIO_setupPinDirection+0x1b8>
    1d40:	80 95       	com	r24
    1d42:	84 23       	and	r24, r20
    1d44:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	cf 91       	pop	r28
    1d52:	df 91       	pop	r29
    1d54:	08 95       	ret

00001d56 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	00 d0       	rcall	.+0      	; 0x1d5c <GPIO_writePin+0x6>
    1d5c:	00 d0       	rcall	.+0      	; 0x1d5e <GPIO_writePin+0x8>
    1d5e:	0f 92       	push	r0
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    1d64:	89 83       	std	Y+1, r24	; 0x01
    1d66:	6a 83       	std	Y+2, r22	; 0x02
    1d68:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6c:	88 30       	cpi	r24, 0x08	; 8
    1d6e:	08 f0       	brcs	.+2      	; 0x1d72 <GPIO_writePin+0x1c>
    1d70:	d5 c0       	rjmp	.+426    	; 0x1f1c <GPIO_writePin+0x1c6>
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	84 30       	cpi	r24, 0x04	; 4
    1d76:	08 f0       	brcs	.+2      	; 0x1d7a <GPIO_writePin+0x24>
    1d78:	d1 c0       	rjmp	.+418    	; 0x1f1c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	3d 83       	std	Y+5, r19	; 0x05
    1d82:	2c 83       	std	Y+4, r18	; 0x04
    1d84:	8c 81       	ldd	r24, Y+4	; 0x04
    1d86:	9d 81       	ldd	r25, Y+5	; 0x05
    1d88:	81 30       	cpi	r24, 0x01	; 1
    1d8a:	91 05       	cpc	r25, r1
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <GPIO_writePin+0x3a>
    1d8e:	43 c0       	rjmp	.+134    	; 0x1e16 <GPIO_writePin+0xc0>
    1d90:	2c 81       	ldd	r18, Y+4	; 0x04
    1d92:	3d 81       	ldd	r19, Y+5	; 0x05
    1d94:	22 30       	cpi	r18, 0x02	; 2
    1d96:	31 05       	cpc	r19, r1
    1d98:	2c f4       	brge	.+10     	; 0x1da4 <GPIO_writePin+0x4e>
    1d9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d9e:	00 97       	sbiw	r24, 0x00	; 0
    1da0:	71 f0       	breq	.+28     	; 0x1dbe <GPIO_writePin+0x68>
    1da2:	bc c0       	rjmp	.+376    	; 0x1f1c <GPIO_writePin+0x1c6>
    1da4:	2c 81       	ldd	r18, Y+4	; 0x04
    1da6:	3d 81       	ldd	r19, Y+5	; 0x05
    1da8:	22 30       	cpi	r18, 0x02	; 2
    1daa:	31 05       	cpc	r19, r1
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <GPIO_writePin+0x5a>
    1dae:	5f c0       	rjmp	.+190    	; 0x1e6e <GPIO_writePin+0x118>
    1db0:	8c 81       	ldd	r24, Y+4	; 0x04
    1db2:	9d 81       	ldd	r25, Y+5	; 0x05
    1db4:	83 30       	cpi	r24, 0x03	; 3
    1db6:	91 05       	cpc	r25, r1
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <GPIO_writePin+0x66>
    1dba:	85 c0       	rjmp	.+266    	; 0x1ec6 <GPIO_writePin+0x170>
    1dbc:	af c0       	rjmp	.+350    	; 0x1f1c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	81 30       	cpi	r24, 0x01	; 1
    1dc2:	a1 f4       	brne	.+40     	; 0x1dec <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1dc4:	ab e3       	ldi	r26, 0x3B	; 59
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	eb e3       	ldi	r30, 0x3B	; 59
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	48 2f       	mov	r20, r24
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	02 2e       	mov	r0, r18
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <GPIO_writePin+0x8c>
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	0a 94       	dec	r0
    1de4:	e2 f7       	brpl	.-8      	; 0x1dde <GPIO_writePin+0x88>
    1de6:	84 2b       	or	r24, r20
    1de8:	8c 93       	st	X, r24
    1dea:	98 c0       	rjmp	.+304    	; 0x1f1c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1dec:	ab e3       	ldi	r26, 0x3B	; 59
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	eb e3       	ldi	r30, 0x3B	; 59
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	48 2f       	mov	r20, r24
    1df8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	02 2e       	mov	r0, r18
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <GPIO_writePin+0xb4>
    1e06:	88 0f       	add	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	0a 94       	dec	r0
    1e0c:	e2 f7       	brpl	.-8      	; 0x1e06 <GPIO_writePin+0xb0>
    1e0e:	80 95       	com	r24
    1e10:	84 23       	and	r24, r20
    1e12:	8c 93       	st	X, r24
    1e14:	83 c0       	rjmp	.+262    	; 0x1f1c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	81 30       	cpi	r24, 0x01	; 1
    1e1a:	a1 f4       	brne	.+40     	; 0x1e44 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1e1c:	a8 e3       	ldi	r26, 0x38	; 56
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e8 e3       	ldi	r30, 0x38	; 56
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	48 2f       	mov	r20, r24
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	02 2e       	mov	r0, r18
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <GPIO_writePin+0xe4>
    1e36:	88 0f       	add	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	0a 94       	dec	r0
    1e3c:	e2 f7       	brpl	.-8      	; 0x1e36 <GPIO_writePin+0xe0>
    1e3e:	84 2b       	or	r24, r20
    1e40:	8c 93       	st	X, r24
    1e42:	6c c0       	rjmp	.+216    	; 0x1f1c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1e44:	a8 e3       	ldi	r26, 0x38	; 56
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e8 e3       	ldi	r30, 0x38	; 56
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	48 2f       	mov	r20, r24
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	28 2f       	mov	r18, r24
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	02 2e       	mov	r0, r18
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <GPIO_writePin+0x10c>
    1e5e:	88 0f       	add	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	0a 94       	dec	r0
    1e64:	e2 f7       	brpl	.-8      	; 0x1e5e <GPIO_writePin+0x108>
    1e66:	80 95       	com	r24
    1e68:	84 23       	and	r24, r20
    1e6a:	8c 93       	st	X, r24
    1e6c:	57 c0       	rjmp	.+174    	; 0x1f1c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	81 30       	cpi	r24, 0x01	; 1
    1e72:	a1 f4       	brne	.+40     	; 0x1e9c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1e74:	a5 e3       	ldi	r26, 0x35	; 53
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e5 e3       	ldi	r30, 0x35	; 53
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	48 2f       	mov	r20, r24
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	02 2e       	mov	r0, r18
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <GPIO_writePin+0x13c>
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	0a 94       	dec	r0
    1e94:	e2 f7       	brpl	.-8      	; 0x1e8e <GPIO_writePin+0x138>
    1e96:	84 2b       	or	r24, r20
    1e98:	8c 93       	st	X, r24
    1e9a:	40 c0       	rjmp	.+128    	; 0x1f1c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1e9c:	a5 e3       	ldi	r26, 0x35	; 53
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	e5 e3       	ldi	r30, 0x35	; 53
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	48 2f       	mov	r20, r24
    1ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eaa:	28 2f       	mov	r18, r24
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	02 2e       	mov	r0, r18
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <GPIO_writePin+0x164>
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	0a 94       	dec	r0
    1ebc:	e2 f7       	brpl	.-8      	; 0x1eb6 <GPIO_writePin+0x160>
    1ebe:	80 95       	com	r24
    1ec0:	84 23       	and	r24, r20
    1ec2:	8c 93       	st	X, r24
    1ec4:	2b c0       	rjmp	.+86     	; 0x1f1c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	81 30       	cpi	r24, 0x01	; 1
    1eca:	a1 f4       	brne	.+40     	; 0x1ef4 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1ecc:	a2 e3       	ldi	r26, 0x32	; 50
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e2 e3       	ldi	r30, 0x32	; 50
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	48 2f       	mov	r20, r24
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	02 2e       	mov	r0, r18
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <GPIO_writePin+0x194>
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	0a 94       	dec	r0
    1eec:	e2 f7       	brpl	.-8      	; 0x1ee6 <GPIO_writePin+0x190>
    1eee:	84 2b       	or	r24, r20
    1ef0:	8c 93       	st	X, r24
    1ef2:	14 c0       	rjmp	.+40     	; 0x1f1c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1ef4:	a2 e3       	ldi	r26, 0x32	; 50
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e2 e3       	ldi	r30, 0x32	; 50
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	48 2f       	mov	r20, r24
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	28 2f       	mov	r18, r24
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	02 2e       	mov	r0, r18
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <GPIO_writePin+0x1bc>
    1f0e:	88 0f       	add	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	0a 94       	dec	r0
    1f14:	e2 f7       	brpl	.-8      	; 0x1f0e <GPIO_writePin+0x1b8>
    1f16:	80 95       	com	r24
    1f18:	84 23       	and	r24, r20
    1f1a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	08 95       	ret

00001f2c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1f2c:	df 93       	push	r29
    1f2e:	cf 93       	push	r28
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <GPIO_readPin+0x6>
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <GPIO_readPin+0x8>
    1f34:	0f 92       	push	r0
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	8a 83       	std	Y+2, r24	; 0x02
    1f3c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1f3e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	88 30       	cpi	r24, 0x08	; 8
    1f44:	08 f0       	brcs	.+2      	; 0x1f48 <GPIO_readPin+0x1c>
    1f46:	84 c0       	rjmp	.+264    	; 0x2050 <GPIO_readPin+0x124>
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	84 30       	cpi	r24, 0x04	; 4
    1f4c:	08 f0       	brcs	.+2      	; 0x1f50 <GPIO_readPin+0x24>
    1f4e:	80 c0       	rjmp	.+256    	; 0x2050 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	28 2f       	mov	r18, r24
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	3d 83       	std	Y+5, r19	; 0x05
    1f58:	2c 83       	std	Y+4, r18	; 0x04
    1f5a:	4c 81       	ldd	r20, Y+4	; 0x04
    1f5c:	5d 81       	ldd	r21, Y+5	; 0x05
    1f5e:	41 30       	cpi	r20, 0x01	; 1
    1f60:	51 05       	cpc	r21, r1
    1f62:	79 f1       	breq	.+94     	; 0x1fc2 <GPIO_readPin+0x96>
    1f64:	8c 81       	ldd	r24, Y+4	; 0x04
    1f66:	9d 81       	ldd	r25, Y+5	; 0x05
    1f68:	82 30       	cpi	r24, 0x02	; 2
    1f6a:	91 05       	cpc	r25, r1
    1f6c:	34 f4       	brge	.+12     	; 0x1f7a <GPIO_readPin+0x4e>
    1f6e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f70:	3d 81       	ldd	r19, Y+5	; 0x05
    1f72:	21 15       	cp	r18, r1
    1f74:	31 05       	cpc	r19, r1
    1f76:	69 f0       	breq	.+26     	; 0x1f92 <GPIO_readPin+0x66>
    1f78:	6b c0       	rjmp	.+214    	; 0x2050 <GPIO_readPin+0x124>
    1f7a:	4c 81       	ldd	r20, Y+4	; 0x04
    1f7c:	5d 81       	ldd	r21, Y+5	; 0x05
    1f7e:	42 30       	cpi	r20, 0x02	; 2
    1f80:	51 05       	cpc	r21, r1
    1f82:	b9 f1       	breq	.+110    	; 0x1ff2 <GPIO_readPin+0xc6>
    1f84:	8c 81       	ldd	r24, Y+4	; 0x04
    1f86:	9d 81       	ldd	r25, Y+5	; 0x05
    1f88:	83 30       	cpi	r24, 0x03	; 3
    1f8a:	91 05       	cpc	r25, r1
    1f8c:	09 f4       	brne	.+2      	; 0x1f90 <GPIO_readPin+0x64>
    1f8e:	49 c0       	rjmp	.+146    	; 0x2022 <GPIO_readPin+0xf6>
    1f90:	5f c0       	rjmp	.+190    	; 0x2050 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1f92:	e9 e3       	ldi	r30, 0x39	; 57
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	28 2f       	mov	r18, r24
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	88 2f       	mov	r24, r24
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	a9 01       	movw	r20, r18
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <GPIO_readPin+0x7e>
    1fa6:	55 95       	asr	r21
    1fa8:	47 95       	ror	r20
    1faa:	8a 95       	dec	r24
    1fac:	e2 f7       	brpl	.-8      	; 0x1fa6 <GPIO_readPin+0x7a>
    1fae:	ca 01       	movw	r24, r20
    1fb0:	81 70       	andi	r24, 0x01	; 1
    1fb2:	90 70       	andi	r25, 0x00	; 0
    1fb4:	88 23       	and	r24, r24
    1fb6:	19 f0       	breq	.+6      	; 0x1fbe <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	89 83       	std	Y+1, r24	; 0x01
    1fbc:	49 c0       	rjmp	.+146    	; 0x2050 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1fbe:	19 82       	std	Y+1, r1	; 0x01
    1fc0:	47 c0       	rjmp	.+142    	; 0x2050 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1fc2:	e6 e3       	ldi	r30, 0x36	; 54
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	28 2f       	mov	r18, r24
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	88 2f       	mov	r24, r24
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	a9 01       	movw	r20, r18
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <GPIO_readPin+0xae>
    1fd6:	55 95       	asr	r21
    1fd8:	47 95       	ror	r20
    1fda:	8a 95       	dec	r24
    1fdc:	e2 f7       	brpl	.-8      	; 0x1fd6 <GPIO_readPin+0xaa>
    1fde:	ca 01       	movw	r24, r20
    1fe0:	81 70       	andi	r24, 0x01	; 1
    1fe2:	90 70       	andi	r25, 0x00	; 0
    1fe4:	88 23       	and	r24, r24
    1fe6:	19 f0       	breq	.+6      	; 0x1fee <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	89 83       	std	Y+1, r24	; 0x01
    1fec:	31 c0       	rjmp	.+98     	; 0x2050 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1fee:	19 82       	std	Y+1, r1	; 0x01
    1ff0:	2f c0       	rjmp	.+94     	; 0x2050 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1ff2:	e3 e3       	ldi	r30, 0x33	; 51
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	28 2f       	mov	r18, r24
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	88 2f       	mov	r24, r24
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	a9 01       	movw	r20, r18
    2004:	02 c0       	rjmp	.+4      	; 0x200a <GPIO_readPin+0xde>
    2006:	55 95       	asr	r21
    2008:	47 95       	ror	r20
    200a:	8a 95       	dec	r24
    200c:	e2 f7       	brpl	.-8      	; 0x2006 <GPIO_readPin+0xda>
    200e:	ca 01       	movw	r24, r20
    2010:	81 70       	andi	r24, 0x01	; 1
    2012:	90 70       	andi	r25, 0x00	; 0
    2014:	88 23       	and	r24, r24
    2016:	19 f0       	breq	.+6      	; 0x201e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	89 83       	std	Y+1, r24	; 0x01
    201c:	19 c0       	rjmp	.+50     	; 0x2050 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    201e:	19 82       	std	Y+1, r1	; 0x01
    2020:	17 c0       	rjmp	.+46     	; 0x2050 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2022:	e0 e3       	ldi	r30, 0x30	; 48
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	28 2f       	mov	r18, r24
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	88 2f       	mov	r24, r24
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	a9 01       	movw	r20, r18
    2034:	02 c0       	rjmp	.+4      	; 0x203a <GPIO_readPin+0x10e>
    2036:	55 95       	asr	r21
    2038:	47 95       	ror	r20
    203a:	8a 95       	dec	r24
    203c:	e2 f7       	brpl	.-8      	; 0x2036 <GPIO_readPin+0x10a>
    203e:	ca 01       	movw	r24, r20
    2040:	81 70       	andi	r24, 0x01	; 1
    2042:	90 70       	andi	r25, 0x00	; 0
    2044:	88 23       	and	r24, r24
    2046:	19 f0       	breq	.+6      	; 0x204e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	89 83       	std	Y+1, r24	; 0x01
    204c:	01 c0       	rjmp	.+2      	; 0x2050 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    204e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2050:	89 81       	ldd	r24, Y+1	; 0x01
}
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	cf 91       	pop	r28
    205e:	df 91       	pop	r29
    2060:	08 95       	ret

00002062 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	00 d0       	rcall	.+0      	; 0x2068 <GPIO_setupPortDirection+0x6>
    2068:	00 d0       	rcall	.+0      	; 0x206a <GPIO_setupPortDirection+0x8>
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	89 83       	std	Y+1, r24	; 0x01
    2070:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2072:	89 81       	ldd	r24, Y+1	; 0x01
    2074:	84 30       	cpi	r24, 0x04	; 4
    2076:	90 f5       	brcc	.+100    	; 0x20dc <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	28 2f       	mov	r18, r24
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	3c 83       	std	Y+4, r19	; 0x04
    2080:	2b 83       	std	Y+3, r18	; 0x03
    2082:	8b 81       	ldd	r24, Y+3	; 0x03
    2084:	9c 81       	ldd	r25, Y+4	; 0x04
    2086:	81 30       	cpi	r24, 0x01	; 1
    2088:	91 05       	cpc	r25, r1
    208a:	d1 f0       	breq	.+52     	; 0x20c0 <GPIO_setupPortDirection+0x5e>
    208c:	2b 81       	ldd	r18, Y+3	; 0x03
    208e:	3c 81       	ldd	r19, Y+4	; 0x04
    2090:	22 30       	cpi	r18, 0x02	; 2
    2092:	31 05       	cpc	r19, r1
    2094:	2c f4       	brge	.+10     	; 0x20a0 <GPIO_setupPortDirection+0x3e>
    2096:	8b 81       	ldd	r24, Y+3	; 0x03
    2098:	9c 81       	ldd	r25, Y+4	; 0x04
    209a:	00 97       	sbiw	r24, 0x00	; 0
    209c:	61 f0       	breq	.+24     	; 0x20b6 <GPIO_setupPortDirection+0x54>
    209e:	1e c0       	rjmp	.+60     	; 0x20dc <GPIO_setupPortDirection+0x7a>
    20a0:	2b 81       	ldd	r18, Y+3	; 0x03
    20a2:	3c 81       	ldd	r19, Y+4	; 0x04
    20a4:	22 30       	cpi	r18, 0x02	; 2
    20a6:	31 05       	cpc	r19, r1
    20a8:	81 f0       	breq	.+32     	; 0x20ca <GPIO_setupPortDirection+0x68>
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	9c 81       	ldd	r25, Y+4	; 0x04
    20ae:	83 30       	cpi	r24, 0x03	; 3
    20b0:	91 05       	cpc	r25, r1
    20b2:	81 f0       	breq	.+32     	; 0x20d4 <GPIO_setupPortDirection+0x72>
    20b4:	13 c0       	rjmp	.+38     	; 0x20dc <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    20b6:	ea e3       	ldi	r30, 0x3A	; 58
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	80 83       	st	Z, r24
    20be:	0e c0       	rjmp	.+28     	; 0x20dc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    20c0:	e7 e3       	ldi	r30, 0x37	; 55
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	8a 81       	ldd	r24, Y+2	; 0x02
    20c6:	80 83       	st	Z, r24
    20c8:	09 c0       	rjmp	.+18     	; 0x20dc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    20ca:	e4 e3       	ldi	r30, 0x34	; 52
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	80 83       	st	Z, r24
    20d2:	04 c0       	rjmp	.+8      	; 0x20dc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    20d4:	e1 e3       	ldi	r30, 0x31	; 49
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	80 83       	st	Z, r24
			break;
		}
	}
}
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	08 95       	ret

000020ea <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    20ea:	df 93       	push	r29
    20ec:	cf 93       	push	r28
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <GPIO_writePort+0x6>
    20f0:	00 d0       	rcall	.+0      	; 0x20f2 <GPIO_writePort+0x8>
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	84 30       	cpi	r24, 0x04	; 4
    20fe:	90 f5       	brcc	.+100    	; 0x2164 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	28 2f       	mov	r18, r24
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	3c 83       	std	Y+4, r19	; 0x04
    2108:	2b 83       	std	Y+3, r18	; 0x03
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	9c 81       	ldd	r25, Y+4	; 0x04
    210e:	81 30       	cpi	r24, 0x01	; 1
    2110:	91 05       	cpc	r25, r1
    2112:	d1 f0       	breq	.+52     	; 0x2148 <GPIO_writePort+0x5e>
    2114:	2b 81       	ldd	r18, Y+3	; 0x03
    2116:	3c 81       	ldd	r19, Y+4	; 0x04
    2118:	22 30       	cpi	r18, 0x02	; 2
    211a:	31 05       	cpc	r19, r1
    211c:	2c f4       	brge	.+10     	; 0x2128 <GPIO_writePort+0x3e>
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	9c 81       	ldd	r25, Y+4	; 0x04
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	61 f0       	breq	.+24     	; 0x213e <GPIO_writePort+0x54>
    2126:	1e c0       	rjmp	.+60     	; 0x2164 <GPIO_writePort+0x7a>
    2128:	2b 81       	ldd	r18, Y+3	; 0x03
    212a:	3c 81       	ldd	r19, Y+4	; 0x04
    212c:	22 30       	cpi	r18, 0x02	; 2
    212e:	31 05       	cpc	r19, r1
    2130:	81 f0       	breq	.+32     	; 0x2152 <GPIO_writePort+0x68>
    2132:	8b 81       	ldd	r24, Y+3	; 0x03
    2134:	9c 81       	ldd	r25, Y+4	; 0x04
    2136:	83 30       	cpi	r24, 0x03	; 3
    2138:	91 05       	cpc	r25, r1
    213a:	81 f0       	breq	.+32     	; 0x215c <GPIO_writePort+0x72>
    213c:	13 c0       	rjmp	.+38     	; 0x2164 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    213e:	eb e3       	ldi	r30, 0x3B	; 59
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	80 83       	st	Z, r24
    2146:	0e c0       	rjmp	.+28     	; 0x2164 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2148:	e8 e3       	ldi	r30, 0x38	; 56
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	8a 81       	ldd	r24, Y+2	; 0x02
    214e:	80 83       	st	Z, r24
    2150:	09 c0       	rjmp	.+18     	; 0x2164 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2152:	e5 e3       	ldi	r30, 0x35	; 53
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	8a 81       	ldd	r24, Y+2	; 0x02
    2158:	80 83       	st	Z, r24
    215a:	04 c0       	rjmp	.+8      	; 0x2164 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    215c:	e2 e3       	ldi	r30, 0x32	; 50
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	80 83       	st	Z, r24
			break;
		}
	}
}
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	08 95       	ret

00002172 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	00 d0       	rcall	.+0      	; 0x2178 <GPIO_readPort+0x6>
    2178:	00 d0       	rcall	.+0      	; 0x217a <GPIO_readPort+0x8>
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2180:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2182:	8a 81       	ldd	r24, Y+2	; 0x02
    2184:	84 30       	cpi	r24, 0x04	; 4
    2186:	90 f5       	brcc	.+100    	; 0x21ec <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	3c 83       	std	Y+4, r19	; 0x04
    2190:	2b 83       	std	Y+3, r18	; 0x03
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	9c 81       	ldd	r25, Y+4	; 0x04
    2196:	81 30       	cpi	r24, 0x01	; 1
    2198:	91 05       	cpc	r25, r1
    219a:	d1 f0       	breq	.+52     	; 0x21d0 <GPIO_readPort+0x5e>
    219c:	2b 81       	ldd	r18, Y+3	; 0x03
    219e:	3c 81       	ldd	r19, Y+4	; 0x04
    21a0:	22 30       	cpi	r18, 0x02	; 2
    21a2:	31 05       	cpc	r19, r1
    21a4:	2c f4       	brge	.+10     	; 0x21b0 <GPIO_readPort+0x3e>
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	9c 81       	ldd	r25, Y+4	; 0x04
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	61 f0       	breq	.+24     	; 0x21c6 <GPIO_readPort+0x54>
    21ae:	1e c0       	rjmp	.+60     	; 0x21ec <GPIO_readPort+0x7a>
    21b0:	2b 81       	ldd	r18, Y+3	; 0x03
    21b2:	3c 81       	ldd	r19, Y+4	; 0x04
    21b4:	22 30       	cpi	r18, 0x02	; 2
    21b6:	31 05       	cpc	r19, r1
    21b8:	81 f0       	breq	.+32     	; 0x21da <GPIO_readPort+0x68>
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	9c 81       	ldd	r25, Y+4	; 0x04
    21be:	83 30       	cpi	r24, 0x03	; 3
    21c0:	91 05       	cpc	r25, r1
    21c2:	81 f0       	breq	.+32     	; 0x21e4 <GPIO_readPort+0x72>
    21c4:	13 c0       	rjmp	.+38     	; 0x21ec <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    21c6:	e9 e3       	ldi	r30, 0x39	; 57
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	89 83       	std	Y+1, r24	; 0x01
    21ce:	0e c0       	rjmp	.+28     	; 0x21ec <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    21d0:	e6 e3       	ldi	r30, 0x36	; 54
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	89 83       	std	Y+1, r24	; 0x01
    21d8:	09 c0       	rjmp	.+18     	; 0x21ec <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    21da:	e3 e3       	ldi	r30, 0x33	; 51
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	89 83       	std	Y+1, r24	; 0x01
    21e2:	04 c0       	rjmp	.+8      	; 0x21ec <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    21e4:	e0 e3       	ldi	r30, 0x30	; 48
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	08 95       	ret

000021fc <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    21fc:	df 93       	push	r29
    21fe:	cf 93       	push	r28
    2200:	00 d0       	rcall	.+0      	; 0x2202 <KEYPAD_getPressedKey+0x6>
    2202:	0f 92       	push	r0
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2208:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    220a:	1b 82       	std	Y+3, r1	; 0x03
    220c:	43 c0       	rjmp	.+134    	; 0x2294 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	0e 94 31 10 	call	0x2062	; 0x2062 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	98 2f       	mov	r25, r24
    221a:	9c 5f       	subi	r25, 0xFC	; 252
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	69 2f       	mov	r22, r25
    2220:	41 e0       	ldi	r20, 0x01	; 1
    2222:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	88 2f       	mov	r24, r24
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	9c 01       	movw	r18, r24
    222e:	2c 5f       	subi	r18, 0xFC	; 252
    2230:	3f 4f       	sbci	r19, 0xFF	; 255
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	02 c0       	rjmp	.+4      	; 0x223c <KEYPAD_getPressedKey+0x40>
    2238:	88 0f       	add	r24, r24
    223a:	99 1f       	adc	r25, r25
    223c:	2a 95       	dec	r18
    223e:	e2 f7       	brpl	.-8      	; 0x2238 <KEYPAD_getPressedKey+0x3c>
    2240:	80 95       	com	r24
    2242:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	69 81       	ldd	r22, Y+1	; 0x01
    2248:	0e 94 75 10 	call	0x20ea	; 0x20ea <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    224c:	1a 82       	std	Y+2, r1	; 0x02
    224e:	1c c0       	rjmp	.+56     	; 0x2288 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	6a 81       	ldd	r22, Y+2	; 0x02
    2254:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <GPIO_readPin>
    2258:	88 23       	and	r24, r24
    225a:	99 f4       	brne	.+38     	; 0x2282 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	88 2f       	mov	r24, r24
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	88 0f       	add	r24, r24
    2264:	99 1f       	adc	r25, r25
    2266:	88 0f       	add	r24, r24
    2268:	99 1f       	adc	r25, r25
    226a:	98 2f       	mov	r25, r24
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	89 0f       	add	r24, r25
    2270:	8f 5f       	subi	r24, 0xFF	; 255
    2272:	0e 94 4f 11 	call	0x229e	; 0x229e <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2276:	0f 90       	pop	r0
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2282:	8a 81       	ldd	r24, Y+2	; 0x02
    2284:	8f 5f       	subi	r24, 0xFF	; 255
    2286:	8a 83       	std	Y+2, r24	; 0x02
    2288:	8a 81       	ldd	r24, Y+2	; 0x02
    228a:	84 30       	cpi	r24, 0x04	; 4
    228c:	08 f3       	brcs	.-62     	; 0x2250 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    228e:	8b 81       	ldd	r24, Y+3	; 0x03
    2290:	8f 5f       	subi	r24, 0xFF	; 255
    2292:	8b 83       	std	Y+3, r24	; 0x03
    2294:	8b 81       	ldd	r24, Y+3	; 0x03
    2296:	84 30       	cpi	r24, 0x04	; 4
    2298:	08 f4       	brcc	.+2      	; 0x229c <KEYPAD_getPressedKey+0xa0>
    229a:	b9 cf       	rjmp	.-142    	; 0x220e <KEYPAD_getPressedKey+0x12>
    229c:	b6 cf       	rjmp	.-148    	; 0x220a <KEYPAD_getPressedKey+0xe>

0000229e <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    229e:	df 93       	push	r29
    22a0:	cf 93       	push	r28
    22a2:	00 d0       	rcall	.+0      	; 0x22a4 <KEYPAD_4x4_adjustKeyNumber+0x6>
    22a4:	00 d0       	rcall	.+0      	; 0x22a6 <KEYPAD_4x4_adjustKeyNumber+0x8>
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
    22aa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    22ac:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    22ae:	8a 81       	ldd	r24, Y+2	; 0x02
    22b0:	28 2f       	mov	r18, r24
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	3c 83       	std	Y+4, r19	; 0x04
    22b6:	2b 83       	std	Y+3, r18	; 0x03
    22b8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ba:	9c 81       	ldd	r25, Y+4	; 0x04
    22bc:	88 30       	cpi	r24, 0x08	; 8
    22be:	91 05       	cpc	r25, r1
    22c0:	09 f4       	brne	.+2      	; 0x22c4 <KEYPAD_4x4_adjustKeyNumber+0x26>
    22c2:	70 c0       	rjmp	.+224    	; 0x23a4 <KEYPAD_4x4_adjustKeyNumber+0x106>
    22c4:	2b 81       	ldd	r18, Y+3	; 0x03
    22c6:	3c 81       	ldd	r19, Y+4	; 0x04
    22c8:	29 30       	cpi	r18, 0x09	; 9
    22ca:	31 05       	cpc	r19, r1
    22cc:	5c f5       	brge	.+86     	; 0x2324 <KEYPAD_4x4_adjustKeyNumber+0x86>
    22ce:	8b 81       	ldd	r24, Y+3	; 0x03
    22d0:	9c 81       	ldd	r25, Y+4	; 0x04
    22d2:	84 30       	cpi	r24, 0x04	; 4
    22d4:	91 05       	cpc	r25, r1
    22d6:	09 f4       	brne	.+2      	; 0x22da <KEYPAD_4x4_adjustKeyNumber+0x3c>
    22d8:	59 c0       	rjmp	.+178    	; 0x238c <KEYPAD_4x4_adjustKeyNumber+0xee>
    22da:	2b 81       	ldd	r18, Y+3	; 0x03
    22dc:	3c 81       	ldd	r19, Y+4	; 0x04
    22de:	25 30       	cpi	r18, 0x05	; 5
    22e0:	31 05       	cpc	r19, r1
    22e2:	9c f4       	brge	.+38     	; 0x230a <KEYPAD_4x4_adjustKeyNumber+0x6c>
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
    22e6:	9c 81       	ldd	r25, Y+4	; 0x04
    22e8:	82 30       	cpi	r24, 0x02	; 2
    22ea:	91 05       	cpc	r25, r1
    22ec:	09 f4       	brne	.+2      	; 0x22f0 <KEYPAD_4x4_adjustKeyNumber+0x52>
    22ee:	48 c0       	rjmp	.+144    	; 0x2380 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    22f0:	2b 81       	ldd	r18, Y+3	; 0x03
    22f2:	3c 81       	ldd	r19, Y+4	; 0x04
    22f4:	23 30       	cpi	r18, 0x03	; 3
    22f6:	31 05       	cpc	r19, r1
    22f8:	0c f0       	brlt	.+2      	; 0x22fc <KEYPAD_4x4_adjustKeyNumber+0x5e>
    22fa:	45 c0       	rjmp	.+138    	; 0x2386 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2300:	81 30       	cpi	r24, 0x01	; 1
    2302:	91 05       	cpc	r25, r1
    2304:	09 f4       	brne	.+2      	; 0x2308 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2306:	39 c0       	rjmp	.+114    	; 0x237a <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2308:	67 c0       	rjmp	.+206    	; 0x23d8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    230a:	2b 81       	ldd	r18, Y+3	; 0x03
    230c:	3c 81       	ldd	r19, Y+4	; 0x04
    230e:	26 30       	cpi	r18, 0x06	; 6
    2310:	31 05       	cpc	r19, r1
    2312:	09 f4       	brne	.+2      	; 0x2316 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2314:	41 c0       	rjmp	.+130    	; 0x2398 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2316:	8b 81       	ldd	r24, Y+3	; 0x03
    2318:	9c 81       	ldd	r25, Y+4	; 0x04
    231a:	87 30       	cpi	r24, 0x07	; 7
    231c:	91 05       	cpc	r25, r1
    231e:	0c f0       	brlt	.+2      	; 0x2322 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2320:	3e c0       	rjmp	.+124    	; 0x239e <KEYPAD_4x4_adjustKeyNumber+0x100>
    2322:	37 c0       	rjmp	.+110    	; 0x2392 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2324:	2b 81       	ldd	r18, Y+3	; 0x03
    2326:	3c 81       	ldd	r19, Y+4	; 0x04
    2328:	2c 30       	cpi	r18, 0x0C	; 12
    232a:	31 05       	cpc	r19, r1
    232c:	09 f4       	brne	.+2      	; 0x2330 <KEYPAD_4x4_adjustKeyNumber+0x92>
    232e:	46 c0       	rjmp	.+140    	; 0x23bc <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2330:	8b 81       	ldd	r24, Y+3	; 0x03
    2332:	9c 81       	ldd	r25, Y+4	; 0x04
    2334:	8d 30       	cpi	r24, 0x0D	; 13
    2336:	91 05       	cpc	r25, r1
    2338:	5c f4       	brge	.+22     	; 0x2350 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    233a:	2b 81       	ldd	r18, Y+3	; 0x03
    233c:	3c 81       	ldd	r19, Y+4	; 0x04
    233e:	2a 30       	cpi	r18, 0x0A	; 10
    2340:	31 05       	cpc	r19, r1
    2342:	b1 f1       	breq	.+108    	; 0x23b0 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2344:	8b 81       	ldd	r24, Y+3	; 0x03
    2346:	9c 81       	ldd	r25, Y+4	; 0x04
    2348:	8b 30       	cpi	r24, 0x0B	; 11
    234a:	91 05       	cpc	r25, r1
    234c:	a4 f5       	brge	.+104    	; 0x23b6 <KEYPAD_4x4_adjustKeyNumber+0x118>
    234e:	2d c0       	rjmp	.+90     	; 0x23aa <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2350:	2b 81       	ldd	r18, Y+3	; 0x03
    2352:	3c 81       	ldd	r19, Y+4	; 0x04
    2354:	2e 30       	cpi	r18, 0x0E	; 14
    2356:	31 05       	cpc	r19, r1
    2358:	b9 f1       	breq	.+110    	; 0x23c8 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    235a:	8b 81       	ldd	r24, Y+3	; 0x03
    235c:	9c 81       	ldd	r25, Y+4	; 0x04
    235e:	8e 30       	cpi	r24, 0x0E	; 14
    2360:	91 05       	cpc	r25, r1
    2362:	7c f1       	brlt	.+94     	; 0x23c2 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2364:	2b 81       	ldd	r18, Y+3	; 0x03
    2366:	3c 81       	ldd	r19, Y+4	; 0x04
    2368:	2f 30       	cpi	r18, 0x0F	; 15
    236a:	31 05       	cpc	r19, r1
    236c:	79 f1       	breq	.+94     	; 0x23cc <KEYPAD_4x4_adjustKeyNumber+0x12e>
    236e:	8b 81       	ldd	r24, Y+3	; 0x03
    2370:	9c 81       	ldd	r25, Y+4	; 0x04
    2372:	80 31       	cpi	r24, 0x10	; 16
    2374:	91 05       	cpc	r25, r1
    2376:	69 f1       	breq	.+90     	; 0x23d2 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2378:	2f c0       	rjmp	.+94     	; 0x23d8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    237a:	87 e0       	ldi	r24, 0x07	; 7
    237c:	89 83       	std	Y+1, r24	; 0x01
    237e:	2e c0       	rjmp	.+92     	; 0x23dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2380:	88 e0       	ldi	r24, 0x08	; 8
    2382:	89 83       	std	Y+1, r24	; 0x01
    2384:	2b c0       	rjmp	.+86     	; 0x23dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2386:	89 e0       	ldi	r24, 0x09	; 9
    2388:	89 83       	std	Y+1, r24	; 0x01
    238a:	28 c0       	rjmp	.+80     	; 0x23dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    238c:	85 e2       	ldi	r24, 0x25	; 37
    238e:	89 83       	std	Y+1, r24	; 0x01
    2390:	25 c0       	rjmp	.+74     	; 0x23dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2392:	84 e0       	ldi	r24, 0x04	; 4
    2394:	89 83       	std	Y+1, r24	; 0x01
    2396:	22 c0       	rjmp	.+68     	; 0x23dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2398:	85 e0       	ldi	r24, 0x05	; 5
    239a:	89 83       	std	Y+1, r24	; 0x01
    239c:	1f c0       	rjmp	.+62     	; 0x23dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    239e:	86 e0       	ldi	r24, 0x06	; 6
    23a0:	89 83       	std	Y+1, r24	; 0x01
    23a2:	1c c0       	rjmp	.+56     	; 0x23dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    23a4:	8a e2       	ldi	r24, 0x2A	; 42
    23a6:	89 83       	std	Y+1, r24	; 0x01
    23a8:	19 c0       	rjmp	.+50     	; 0x23dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	89 83       	std	Y+1, r24	; 0x01
    23ae:	16 c0       	rjmp	.+44     	; 0x23dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    23b0:	82 e0       	ldi	r24, 0x02	; 2
    23b2:	89 83       	std	Y+1, r24	; 0x01
    23b4:	13 c0       	rjmp	.+38     	; 0x23dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    23b6:	83 e0       	ldi	r24, 0x03	; 3
    23b8:	89 83       	std	Y+1, r24	; 0x01
    23ba:	10 c0       	rjmp	.+32     	; 0x23dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    23bc:	8d e2       	ldi	r24, 0x2D	; 45
    23be:	89 83       	std	Y+1, r24	; 0x01
    23c0:	0d c0       	rjmp	.+26     	; 0x23dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    23c2:	8d e0       	ldi	r24, 0x0D	; 13
    23c4:	89 83       	std	Y+1, r24	; 0x01
    23c6:	0a c0       	rjmp	.+20     	; 0x23dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    23c8:	19 82       	std	Y+1, r1	; 0x01
    23ca:	08 c0       	rjmp	.+16     	; 0x23dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    23cc:	8d e3       	ldi	r24, 0x3D	; 61
    23ce:	89 83       	std	Y+1, r24	; 0x01
    23d0:	05 c0       	rjmp	.+10     	; 0x23dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    23d2:	8b e2       	ldi	r24, 0x2B	; 43
    23d4:	89 83       	std	Y+1, r24	; 0x01
    23d6:	02 c0       	rjmp	.+4      	; 0x23dc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    23d8:	8a 81       	ldd	r24, Y+2	; 0x02
    23da:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
} 
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	cf 91       	pop	r28
    23e8:	df 91       	pop	r29
    23ea:	08 95       	ret

000023ec <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	61 e0       	ldi	r22, 0x01	; 1
    23f8:	41 e0       	ldi	r20, 0x01	; 1
    23fa:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	62 e0       	ldi	r22, 0x02	; 2
    2402:	41 e0       	ldi	r20, 0x01	; 1
    2404:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	63 e0       	ldi	r22, 0x03	; 3
    240c:	41 e0       	ldi	r20, 0x01	; 1
    240e:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <GPIO_setupPinDirection>

#if (LCD_DATA_BITS_MODE == 4)

	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID,PIN_OUTPUT);
    2412:	82 e0       	ldi	r24, 0x02	; 2
    2414:	60 e0       	ldi	r22, 0x00	; 0
    2416:	41 e0       	ldi	r20, 0x01	; 1
    2418:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+1,PIN_OUTPUT);
    241c:	82 e0       	ldi	r24, 0x02	; 2
    241e:	61 e0       	ldi	r22, 0x01	; 1
    2420:	41 e0       	ldi	r20, 0x01	; 1
    2422:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+2,PIN_OUTPUT);
    2426:	82 e0       	ldi	r24, 0x02	; 2
    2428:	62 e0       	ldi	r22, 0x02	; 2
    242a:	41 e0       	ldi	r20, 0x01	; 1
    242c:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+3,PIN_OUTPUT);
    2430:	82 e0       	ldi	r24, 0x02	; 2
    2432:	63 e0       	ldi	r22, 0x03	; 3
    2434:	41 e0       	ldi	r20, 0x01	; 1
    2436:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <GPIO_setupPinDirection>

	LCD_sendCommand(LCD_GO_TO_HOME);
    243a:	82 e0       	ldi	r24, 0x02	; 2
    243c:	0e 94 2c 12 	call	0x2458	; 0x2458 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    2440:	88 e2       	ldi	r24, 0x28	; 40
    2442:	0e 94 2c 12 	call	0x2458	; 0x2458 <LCD_sendCommand>
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2446:	8c e0       	ldi	r24, 0x0C	; 12
    2448:	0e 94 2c 12 	call	0x2458	; 0x2458 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	0e 94 2c 12 	call	0x2458	; 0x2458 <LCD_sendCommand>
}
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	08 95       	ret

00002458 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2458:	0f 93       	push	r16
    245a:	1f 93       	push	r17
    245c:	df 93       	push	r29
    245e:	cf 93       	push	r28
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
    2464:	c4 56       	subi	r28, 0x64	; 100
    2466:	d0 40       	sbci	r29, 0x00	; 0
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	de bf       	out	0x3e, r29	; 62
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	cd bf       	out	0x3d, r28	; 61
    2472:	fe 01       	movw	r30, r28
    2474:	ec 59       	subi	r30, 0x9C	; 156
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	80 83       	st	Z, r24
	uint8 lcd_port_value = 0;
    247a:	fe 01       	movw	r30, r28
    247c:	ed 59       	subi	r30, 0x9D	; 157
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	10 82       	st	Z, r1
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	61 e0       	ldi	r22, 0x01	; 1
    2486:	40 e0       	ldi	r20, 0x00	; 0
    2488:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	62 e0       	ldi	r22, 0x02	; 2
    2490:	40 e0       	ldi	r20, 0x00	; 0
    2492:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GPIO_writePin>
    2496:	fe 01       	movw	r30, r28
    2498:	e1 5a       	subi	r30, 0xA1	; 161
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	a0 e8       	ldi	r26, 0x80	; 128
    24a2:	bf e3       	ldi	r27, 0x3F	; 63
    24a4:	80 83       	st	Z, r24
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	a2 83       	std	Z+2, r26	; 0x02
    24aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ac:	8e 01       	movw	r16, r28
    24ae:	05 5a       	subi	r16, 0xA5	; 165
    24b0:	1f 4f       	sbci	r17, 0xFF	; 255
    24b2:	fe 01       	movw	r30, r28
    24b4:	e1 5a       	subi	r30, 0xA1	; 161
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	60 81       	ld	r22, Z
    24ba:	71 81       	ldd	r23, Z+1	; 0x01
    24bc:	82 81       	ldd	r24, Z+2	; 0x02
    24be:	93 81       	ldd	r25, Z+3	; 0x03
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	4a e7       	ldi	r20, 0x7A	; 122
    24c6:	53 e4       	ldi	r21, 0x43	; 67
    24c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	f8 01       	movw	r30, r16
    24d2:	80 83       	st	Z, r24
    24d4:	91 83       	std	Z+1, r25	; 0x01
    24d6:	a2 83       	std	Z+2, r26	; 0x02
    24d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24da:	fe 01       	movw	r30, r28
    24dc:	e5 5a       	subi	r30, 0xA5	; 165
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	60 81       	ld	r22, Z
    24e2:	71 81       	ldd	r23, Z+1	; 0x01
    24e4:	82 81       	ldd	r24, Z+2	; 0x02
    24e6:	93 81       	ldd	r25, Z+3	; 0x03
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e8       	ldi	r20, 0x80	; 128
    24ee:	5f e3       	ldi	r21, 0x3F	; 63
    24f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24f4:	88 23       	and	r24, r24
    24f6:	44 f4       	brge	.+16     	; 0x2508 <LCD_sendCommand+0xb0>
		__ticks = 1;
    24f8:	fe 01       	movw	r30, r28
    24fa:	e7 5a       	subi	r30, 0xA7	; 167
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	91 83       	std	Z+1, r25	; 0x01
    2504:	80 83       	st	Z, r24
    2506:	64 c0       	rjmp	.+200    	; 0x25d0 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    2508:	fe 01       	movw	r30, r28
    250a:	e5 5a       	subi	r30, 0xA5	; 165
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	60 81       	ld	r22, Z
    2510:	71 81       	ldd	r23, Z+1	; 0x01
    2512:	82 81       	ldd	r24, Z+2	; 0x02
    2514:	93 81       	ldd	r25, Z+3	; 0x03
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	3f ef       	ldi	r19, 0xFF	; 255
    251a:	4f e7       	ldi	r20, 0x7F	; 127
    251c:	57 e4       	ldi	r21, 0x47	; 71
    251e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2522:	18 16       	cp	r1, r24
    2524:	0c f0       	brlt	.+2      	; 0x2528 <LCD_sendCommand+0xd0>
    2526:	43 c0       	rjmp	.+134    	; 0x25ae <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2528:	fe 01       	movw	r30, r28
    252a:	e1 5a       	subi	r30, 0xA1	; 161
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	60 81       	ld	r22, Z
    2530:	71 81       	ldd	r23, Z+1	; 0x01
    2532:	82 81       	ldd	r24, Z+2	; 0x02
    2534:	93 81       	ldd	r25, Z+3	; 0x03
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e2       	ldi	r20, 0x20	; 32
    253c:	51 e4       	ldi	r21, 0x41	; 65
    253e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	8e 01       	movw	r16, r28
    2548:	07 5a       	subi	r16, 0xA7	; 167
    254a:	1f 4f       	sbci	r17, 0xFF	; 255
    254c:	bc 01       	movw	r22, r24
    254e:	cd 01       	movw	r24, r26
    2550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	f8 01       	movw	r30, r16
    255a:	91 83       	std	Z+1, r25	; 0x01
    255c:	80 83       	st	Z, r24
    255e:	1f c0       	rjmp	.+62     	; 0x259e <LCD_sendCommand+0x146>
    2560:	fe 01       	movw	r30, r28
    2562:	e9 5a       	subi	r30, 0xA9	; 169
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	89 e1       	ldi	r24, 0x19	; 25
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	91 83       	std	Z+1, r25	; 0x01
    256c:	80 83       	st	Z, r24
    256e:	fe 01       	movw	r30, r28
    2570:	e9 5a       	subi	r30, 0xA9	; 169
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	80 81       	ld	r24, Z
    2576:	91 81       	ldd	r25, Z+1	; 0x01
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	f1 f7       	brne	.-4      	; 0x2578 <LCD_sendCommand+0x120>
    257c:	fe 01       	movw	r30, r28
    257e:	e9 5a       	subi	r30, 0xA9	; 169
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	91 83       	std	Z+1, r25	; 0x01
    2584:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2586:	de 01       	movw	r26, r28
    2588:	a7 5a       	subi	r26, 0xA7	; 167
    258a:	bf 4f       	sbci	r27, 0xFF	; 255
    258c:	fe 01       	movw	r30, r28
    258e:	e7 5a       	subi	r30, 0xA7	; 167
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	80 81       	ld	r24, Z
    2594:	91 81       	ldd	r25, Z+1	; 0x01
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	11 96       	adiw	r26, 0x01	; 1
    259a:	9c 93       	st	X, r25
    259c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259e:	fe 01       	movw	r30, r28
    25a0:	e7 5a       	subi	r30, 0xA7	; 167
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	80 81       	ld	r24, Z
    25a6:	91 81       	ldd	r25, Z+1	; 0x01
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	d1 f6       	brne	.-76     	; 0x2560 <LCD_sendCommand+0x108>
    25ac:	27 c0       	rjmp	.+78     	; 0x25fc <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ae:	8e 01       	movw	r16, r28
    25b0:	07 5a       	subi	r16, 0xA7	; 167
    25b2:	1f 4f       	sbci	r17, 0xFF	; 255
    25b4:	fe 01       	movw	r30, r28
    25b6:	e5 5a       	subi	r30, 0xA5	; 165
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	60 81       	ld	r22, Z
    25bc:	71 81       	ldd	r23, Z+1	; 0x01
    25be:	82 81       	ldd	r24, Z+2	; 0x02
    25c0:	93 81       	ldd	r25, Z+3	; 0x03
    25c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	f8 01       	movw	r30, r16
    25cc:	91 83       	std	Z+1, r25	; 0x01
    25ce:	80 83       	st	Z, r24
    25d0:	de 01       	movw	r26, r28
    25d2:	ab 5a       	subi	r26, 0xAB	; 171
    25d4:	bf 4f       	sbci	r27, 0xFF	; 255
    25d6:	fe 01       	movw	r30, r28
    25d8:	e7 5a       	subi	r30, 0xA7	; 167
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	80 81       	ld	r24, Z
    25de:	91 81       	ldd	r25, Z+1	; 0x01
    25e0:	8d 93       	st	X+, r24
    25e2:	9c 93       	st	X, r25
    25e4:	fe 01       	movw	r30, r28
    25e6:	eb 5a       	subi	r30, 0xAB	; 171
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	80 81       	ld	r24, Z
    25ec:	91 81       	ldd	r25, Z+1	; 0x01
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	f1 f7       	brne	.-4      	; 0x25ee <LCD_sendCommand+0x196>
    25f2:	fe 01       	movw	r30, r28
    25f4:	eb 5a       	subi	r30, 0xAB	; 171
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	91 83       	std	Z+1, r25	; 0x01
    25fa:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	63 e0       	ldi	r22, 0x03	; 3
    2600:	41 e0       	ldi	r20, 0x01	; 1
    2602:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GPIO_writePin>
    2606:	fe 01       	movw	r30, r28
    2608:	ef 5a       	subi	r30, 0xAF	; 175
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	a0 e8       	ldi	r26, 0x80	; 128
    2612:	bf e3       	ldi	r27, 0x3F	; 63
    2614:	80 83       	st	Z, r24
    2616:	91 83       	std	Z+1, r25	; 0x01
    2618:	a2 83       	std	Z+2, r26	; 0x02
    261a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261c:	8e 01       	movw	r16, r28
    261e:	03 5b       	subi	r16, 0xB3	; 179
    2620:	1f 4f       	sbci	r17, 0xFF	; 255
    2622:	fe 01       	movw	r30, r28
    2624:	ef 5a       	subi	r30, 0xAF	; 175
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	60 81       	ld	r22, Z
    262a:	71 81       	ldd	r23, Z+1	; 0x01
    262c:	82 81       	ldd	r24, Z+2	; 0x02
    262e:	93 81       	ldd	r25, Z+3	; 0x03
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	4a e7       	ldi	r20, 0x7A	; 122
    2636:	53 e4       	ldi	r21, 0x43	; 67
    2638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	f8 01       	movw	r30, r16
    2642:	80 83       	st	Z, r24
    2644:	91 83       	std	Z+1, r25	; 0x01
    2646:	a2 83       	std	Z+2, r26	; 0x02
    2648:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    264a:	fe 01       	movw	r30, r28
    264c:	e3 5b       	subi	r30, 0xB3	; 179
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	60 81       	ld	r22, Z
    2652:	71 81       	ldd	r23, Z+1	; 0x01
    2654:	82 81       	ldd	r24, Z+2	; 0x02
    2656:	93 81       	ldd	r25, Z+3	; 0x03
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e8       	ldi	r20, 0x80	; 128
    265e:	5f e3       	ldi	r21, 0x3F	; 63
    2660:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2664:	88 23       	and	r24, r24
    2666:	44 f4       	brge	.+16     	; 0x2678 <LCD_sendCommand+0x220>
		__ticks = 1;
    2668:	fe 01       	movw	r30, r28
    266a:	e5 5b       	subi	r30, 0xB5	; 181
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	91 83       	std	Z+1, r25	; 0x01
    2674:	80 83       	st	Z, r24
    2676:	64 c0       	rjmp	.+200    	; 0x2740 <LCD_sendCommand+0x2e8>
	else if (__tmp > 65535)
    2678:	fe 01       	movw	r30, r28
    267a:	e3 5b       	subi	r30, 0xB3	; 179
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	60 81       	ld	r22, Z
    2680:	71 81       	ldd	r23, Z+1	; 0x01
    2682:	82 81       	ldd	r24, Z+2	; 0x02
    2684:	93 81       	ldd	r25, Z+3	; 0x03
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	3f ef       	ldi	r19, 0xFF	; 255
    268a:	4f e7       	ldi	r20, 0x7F	; 127
    268c:	57 e4       	ldi	r21, 0x47	; 71
    268e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2692:	18 16       	cp	r1, r24
    2694:	0c f0       	brlt	.+2      	; 0x2698 <LCD_sendCommand+0x240>
    2696:	43 c0       	rjmp	.+134    	; 0x271e <LCD_sendCommand+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2698:	fe 01       	movw	r30, r28
    269a:	ef 5a       	subi	r30, 0xAF	; 175
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	60 81       	ld	r22, Z
    26a0:	71 81       	ldd	r23, Z+1	; 0x01
    26a2:	82 81       	ldd	r24, Z+2	; 0x02
    26a4:	93 81       	ldd	r25, Z+3	; 0x03
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 e2       	ldi	r20, 0x20	; 32
    26ac:	51 e4       	ldi	r21, 0x41	; 65
    26ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	8e 01       	movw	r16, r28
    26b8:	05 5b       	subi	r16, 0xB5	; 181
    26ba:	1f 4f       	sbci	r17, 0xFF	; 255
    26bc:	bc 01       	movw	r22, r24
    26be:	cd 01       	movw	r24, r26
    26c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	f8 01       	movw	r30, r16
    26ca:	91 83       	std	Z+1, r25	; 0x01
    26cc:	80 83       	st	Z, r24
    26ce:	1f c0       	rjmp	.+62     	; 0x270e <LCD_sendCommand+0x2b6>
    26d0:	fe 01       	movw	r30, r28
    26d2:	e7 5b       	subi	r30, 0xB7	; 183
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	89 e1       	ldi	r24, 0x19	; 25
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	80 83       	st	Z, r24
    26de:	fe 01       	movw	r30, r28
    26e0:	e7 5b       	subi	r30, 0xB7	; 183
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	80 81       	ld	r24, Z
    26e6:	91 81       	ldd	r25, Z+1	; 0x01
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	f1 f7       	brne	.-4      	; 0x26e8 <LCD_sendCommand+0x290>
    26ec:	fe 01       	movw	r30, r28
    26ee:	e7 5b       	subi	r30, 0xB7	; 183
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	91 83       	std	Z+1, r25	; 0x01
    26f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f6:	de 01       	movw	r26, r28
    26f8:	a5 5b       	subi	r26, 0xB5	; 181
    26fa:	bf 4f       	sbci	r27, 0xFF	; 255
    26fc:	fe 01       	movw	r30, r28
    26fe:	e5 5b       	subi	r30, 0xB5	; 181
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	80 81       	ld	r24, Z
    2704:	91 81       	ldd	r25, Z+1	; 0x01
    2706:	01 97       	sbiw	r24, 0x01	; 1
    2708:	11 96       	adiw	r26, 0x01	; 1
    270a:	9c 93       	st	X, r25
    270c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270e:	fe 01       	movw	r30, r28
    2710:	e5 5b       	subi	r30, 0xB5	; 181
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	80 81       	ld	r24, Z
    2716:	91 81       	ldd	r25, Z+1	; 0x01
    2718:	00 97       	sbiw	r24, 0x00	; 0
    271a:	d1 f6       	brne	.-76     	; 0x26d0 <LCD_sendCommand+0x278>
    271c:	27 c0       	rjmp	.+78     	; 0x276c <LCD_sendCommand+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    271e:	8e 01       	movw	r16, r28
    2720:	05 5b       	subi	r16, 0xB5	; 181
    2722:	1f 4f       	sbci	r17, 0xFF	; 255
    2724:	fe 01       	movw	r30, r28
    2726:	e3 5b       	subi	r30, 0xB3	; 179
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	60 81       	ld	r22, Z
    272c:	71 81       	ldd	r23, Z+1	; 0x01
    272e:	82 81       	ldd	r24, Z+2	; 0x02
    2730:	93 81       	ldd	r25, Z+3	; 0x03
    2732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	f8 01       	movw	r30, r16
    273c:	91 83       	std	Z+1, r25	; 0x01
    273e:	80 83       	st	Z, r24
    2740:	de 01       	movw	r26, r28
    2742:	a9 5b       	subi	r26, 0xB9	; 185
    2744:	bf 4f       	sbci	r27, 0xFF	; 255
    2746:	fe 01       	movw	r30, r28
    2748:	e5 5b       	subi	r30, 0xB5	; 181
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	80 81       	ld	r24, Z
    274e:	91 81       	ldd	r25, Z+1	; 0x01
    2750:	8d 93       	st	X+, r24
    2752:	9c 93       	st	X, r25
    2754:	fe 01       	movw	r30, r28
    2756:	e9 5b       	subi	r30, 0xB9	; 185
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	80 81       	ld	r24, Z
    275c:	91 81       	ldd	r25, Z+1	; 0x01
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	f1 f7       	brne	.-4      	; 0x275e <LCD_sendCommand+0x306>
    2762:	fe 01       	movw	r30, r28
    2764:	e9 5b       	subi	r30, 0xB9	; 185
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	91 83       	std	Z+1, r25	; 0x01
    276a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required command to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    276c:	82 e0       	ldi	r24, 0x02	; 2
    276e:	0e 94 b9 10 	call	0x2172	; 0x2172 <GPIO_readPort>
    2772:	fe 01       	movw	r30, r28
    2774:	ed 59       	subi	r30, 0x9D	; 157
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (command & 0xF0);
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((command & 0xF0) >> 4);
    277a:	fe 01       	movw	r30, r28
    277c:	ed 59       	subi	r30, 0x9D	; 157
    277e:	ff 4f       	sbci	r31, 0xFF	; 255
    2780:	80 81       	ld	r24, Z
    2782:	98 2f       	mov	r25, r24
    2784:	90 7f       	andi	r25, 0xF0	; 240
    2786:	fe 01       	movw	r30, r28
    2788:	ec 59       	subi	r30, 0x9C	; 156
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	80 81       	ld	r24, Z
    278e:	82 95       	swap	r24
    2790:	8f 70       	andi	r24, 0x0F	; 15
    2792:	89 2b       	or	r24, r25
    2794:	fe 01       	movw	r30, r28
    2796:	ed 59       	subi	r30, 0x9D	; 157
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	80 83       	st	Z, r24
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    279c:	fe 01       	movw	r30, r28
    279e:	ed 59       	subi	r30, 0x9D	; 157
    27a0:	ff 4f       	sbci	r31, 0xFF	; 255
    27a2:	82 e0       	ldi	r24, 0x02	; 2
    27a4:	60 81       	ld	r22, Z
    27a6:	0e 94 75 10 	call	0x20ea	; 0x20ea <GPIO_writePort>
    27aa:	fe 01       	movw	r30, r28
    27ac:	ed 5b       	subi	r30, 0xBD	; 189
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	a0 e8       	ldi	r26, 0x80	; 128
    27b6:	bf e3       	ldi	r27, 0x3F	; 63
    27b8:	80 83       	st	Z, r24
    27ba:	91 83       	std	Z+1, r25	; 0x01
    27bc:	a2 83       	std	Z+2, r26	; 0x02
    27be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c0:	8e 01       	movw	r16, r28
    27c2:	01 5c       	subi	r16, 0xC1	; 193
    27c4:	1f 4f       	sbci	r17, 0xFF	; 255
    27c6:	fe 01       	movw	r30, r28
    27c8:	ed 5b       	subi	r30, 0xBD	; 189
    27ca:	ff 4f       	sbci	r31, 0xFF	; 255
    27cc:	60 81       	ld	r22, Z
    27ce:	71 81       	ldd	r23, Z+1	; 0x01
    27d0:	82 81       	ldd	r24, Z+2	; 0x02
    27d2:	93 81       	ldd	r25, Z+3	; 0x03
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	4a e7       	ldi	r20, 0x7A	; 122
    27da:	53 e4       	ldi	r21, 0x43	; 67
    27dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	f8 01       	movw	r30, r16
    27e6:	80 83       	st	Z, r24
    27e8:	91 83       	std	Z+1, r25	; 0x01
    27ea:	a2 83       	std	Z+2, r26	; 0x02
    27ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27ee:	fe 01       	movw	r30, r28
    27f0:	ff 96       	adiw	r30, 0x3f	; 63
    27f2:	60 81       	ld	r22, Z
    27f4:	71 81       	ldd	r23, Z+1	; 0x01
    27f6:	82 81       	ldd	r24, Z+2	; 0x02
    27f8:	93 81       	ldd	r25, Z+3	; 0x03
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e8       	ldi	r20, 0x80	; 128
    2800:	5f e3       	ldi	r21, 0x3F	; 63
    2802:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2806:	88 23       	and	r24, r24
    2808:	2c f4       	brge	.+10     	; 0x2814 <LCD_sendCommand+0x3bc>
		__ticks = 1;
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	9e af       	std	Y+62, r25	; 0x3e
    2810:	8d af       	std	Y+61, r24	; 0x3d
    2812:	46 c0       	rjmp	.+140    	; 0x28a0 <LCD_sendCommand+0x448>
	else if (__tmp > 65535)
    2814:	fe 01       	movw	r30, r28
    2816:	ff 96       	adiw	r30, 0x3f	; 63
    2818:	60 81       	ld	r22, Z
    281a:	71 81       	ldd	r23, Z+1	; 0x01
    281c:	82 81       	ldd	r24, Z+2	; 0x02
    281e:	93 81       	ldd	r25, Z+3	; 0x03
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	3f ef       	ldi	r19, 0xFF	; 255
    2824:	4f e7       	ldi	r20, 0x7F	; 127
    2826:	57 e4       	ldi	r21, 0x47	; 71
    2828:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    282c:	18 16       	cp	r1, r24
    282e:	64 f5       	brge	.+88     	; 0x2888 <LCD_sendCommand+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2830:	fe 01       	movw	r30, r28
    2832:	ed 5b       	subi	r30, 0xBD	; 189
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	60 81       	ld	r22, Z
    2838:	71 81       	ldd	r23, Z+1	; 0x01
    283a:	82 81       	ldd	r24, Z+2	; 0x02
    283c:	93 81       	ldd	r25, Z+3	; 0x03
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	40 e2       	ldi	r20, 0x20	; 32
    2844:	51 e4       	ldi	r21, 0x41	; 65
    2846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	bc 01       	movw	r22, r24
    2850:	cd 01       	movw	r24, r26
    2852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	9e af       	std	Y+62, r25	; 0x3e
    285c:	8d af       	std	Y+61, r24	; 0x3d
    285e:	0f c0       	rjmp	.+30     	; 0x287e <LCD_sendCommand+0x426>
    2860:	89 e1       	ldi	r24, 0x19	; 25
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	9c af       	std	Y+60, r25	; 0x3c
    2866:	8b af       	std	Y+59, r24	; 0x3b
    2868:	8b ad       	ldd	r24, Y+59	; 0x3b
    286a:	9c ad       	ldd	r25, Y+60	; 0x3c
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	f1 f7       	brne	.-4      	; 0x286c <LCD_sendCommand+0x414>
    2870:	9c af       	std	Y+60, r25	; 0x3c
    2872:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2874:	8d ad       	ldd	r24, Y+61	; 0x3d
    2876:	9e ad       	ldd	r25, Y+62	; 0x3e
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	9e af       	std	Y+62, r25	; 0x3e
    287c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    287e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2880:	9e ad       	ldd	r25, Y+62	; 0x3e
    2882:	00 97       	sbiw	r24, 0x00	; 0
    2884:	69 f7       	brne	.-38     	; 0x2860 <LCD_sendCommand+0x408>
    2886:	16 c0       	rjmp	.+44     	; 0x28b4 <LCD_sendCommand+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2888:	fe 01       	movw	r30, r28
    288a:	ff 96       	adiw	r30, 0x3f	; 63
    288c:	60 81       	ld	r22, Z
    288e:	71 81       	ldd	r23, Z+1	; 0x01
    2890:	82 81       	ldd	r24, Z+2	; 0x02
    2892:	93 81       	ldd	r25, Z+3	; 0x03
    2894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	9e af       	std	Y+62, r25	; 0x3e
    289e:	8d af       	std	Y+61, r24	; 0x3d
    28a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    28a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    28a4:	9a af       	std	Y+58, r25	; 0x3a
    28a6:	89 af       	std	Y+57, r24	; 0x39
    28a8:	89 ad       	ldd	r24, Y+57	; 0x39
    28aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    28ac:	01 97       	sbiw	r24, 0x01	; 1
    28ae:	f1 f7       	brne	.-4      	; 0x28ac <LCD_sendCommand+0x454>
    28b0:	9a af       	std	Y+58, r25	; 0x3a
    28b2:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	63 e0       	ldi	r22, 0x03	; 3
    28b8:	40 e0       	ldi	r20, 0x00	; 0
    28ba:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GPIO_writePin>
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	a0 e8       	ldi	r26, 0x80	; 128
    28c4:	bf e3       	ldi	r27, 0x3F	; 63
    28c6:	8d ab       	std	Y+53, r24	; 0x35
    28c8:	9e ab       	std	Y+54, r25	; 0x36
    28ca:	af ab       	std	Y+55, r26	; 0x37
    28cc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ce:	6d a9       	ldd	r22, Y+53	; 0x35
    28d0:	7e a9       	ldd	r23, Y+54	; 0x36
    28d2:	8f a9       	ldd	r24, Y+55	; 0x37
    28d4:	98 ad       	ldd	r25, Y+56	; 0x38
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	4a e7       	ldi	r20, 0x7A	; 122
    28dc:	53 e4       	ldi	r21, 0x43	; 67
    28de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	89 ab       	std	Y+49, r24	; 0x31
    28e8:	9a ab       	std	Y+50, r25	; 0x32
    28ea:	ab ab       	std	Y+51, r26	; 0x33
    28ec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28ee:	69 a9       	ldd	r22, Y+49	; 0x31
    28f0:	7a a9       	ldd	r23, Y+50	; 0x32
    28f2:	8b a9       	ldd	r24, Y+51	; 0x33
    28f4:	9c a9       	ldd	r25, Y+52	; 0x34
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	40 e8       	ldi	r20, 0x80	; 128
    28fc:	5f e3       	ldi	r21, 0x3F	; 63
    28fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2902:	88 23       	and	r24, r24
    2904:	2c f4       	brge	.+10     	; 0x2910 <LCD_sendCommand+0x4b8>
		__ticks = 1;
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	98 ab       	std	Y+48, r25	; 0x30
    290c:	8f a7       	std	Y+47, r24	; 0x2f
    290e:	3f c0       	rjmp	.+126    	; 0x298e <LCD_sendCommand+0x536>
	else if (__tmp > 65535)
    2910:	69 a9       	ldd	r22, Y+49	; 0x31
    2912:	7a a9       	ldd	r23, Y+50	; 0x32
    2914:	8b a9       	ldd	r24, Y+51	; 0x33
    2916:	9c a9       	ldd	r25, Y+52	; 0x34
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	3f ef       	ldi	r19, 0xFF	; 255
    291c:	4f e7       	ldi	r20, 0x7F	; 127
    291e:	57 e4       	ldi	r21, 0x47	; 71
    2920:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2924:	18 16       	cp	r1, r24
    2926:	4c f5       	brge	.+82     	; 0x297a <LCD_sendCommand+0x522>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2928:	6d a9       	ldd	r22, Y+53	; 0x35
    292a:	7e a9       	ldd	r23, Y+54	; 0x36
    292c:	8f a9       	ldd	r24, Y+55	; 0x37
    292e:	98 ad       	ldd	r25, Y+56	; 0x38
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e2       	ldi	r20, 0x20	; 32
    2936:	51 e4       	ldi	r21, 0x41	; 65
    2938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	bc 01       	movw	r22, r24
    2942:	cd 01       	movw	r24, r26
    2944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	98 ab       	std	Y+48, r25	; 0x30
    294e:	8f a7       	std	Y+47, r24	; 0x2f
    2950:	0f c0       	rjmp	.+30     	; 0x2970 <LCD_sendCommand+0x518>
    2952:	89 e1       	ldi	r24, 0x19	; 25
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	9e a7       	std	Y+46, r25	; 0x2e
    2958:	8d a7       	std	Y+45, r24	; 0x2d
    295a:	8d a5       	ldd	r24, Y+45	; 0x2d
    295c:	9e a5       	ldd	r25, Y+46	; 0x2e
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	f1 f7       	brne	.-4      	; 0x295e <LCD_sendCommand+0x506>
    2962:	9e a7       	std	Y+46, r25	; 0x2e
    2964:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2966:	8f a5       	ldd	r24, Y+47	; 0x2f
    2968:	98 a9       	ldd	r25, Y+48	; 0x30
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	98 ab       	std	Y+48, r25	; 0x30
    296e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2970:	8f a5       	ldd	r24, Y+47	; 0x2f
    2972:	98 a9       	ldd	r25, Y+48	; 0x30
    2974:	00 97       	sbiw	r24, 0x00	; 0
    2976:	69 f7       	brne	.-38     	; 0x2952 <LCD_sendCommand+0x4fa>
    2978:	14 c0       	rjmp	.+40     	; 0x29a2 <LCD_sendCommand+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    297a:	69 a9       	ldd	r22, Y+49	; 0x31
    297c:	7a a9       	ldd	r23, Y+50	; 0x32
    297e:	8b a9       	ldd	r24, Y+51	; 0x33
    2980:	9c a9       	ldd	r25, Y+52	; 0x34
    2982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	98 ab       	std	Y+48, r25	; 0x30
    298c:	8f a7       	std	Y+47, r24	; 0x2f
    298e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2990:	98 a9       	ldd	r25, Y+48	; 0x30
    2992:	9c a7       	std	Y+44, r25	; 0x2c
    2994:	8b a7       	std	Y+43, r24	; 0x2b
    2996:	8b a5       	ldd	r24, Y+43	; 0x2b
    2998:	9c a5       	ldd	r25, Y+44	; 0x2c
    299a:	01 97       	sbiw	r24, 0x01	; 1
    299c:	f1 f7       	brne	.-4      	; 0x299a <LCD_sendCommand+0x542>
    299e:	9c a7       	std	Y+44, r25	; 0x2c
    29a0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	63 e0       	ldi	r22, 0x03	; 3
    29a6:	41 e0       	ldi	r20, 0x01	; 1
    29a8:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GPIO_writePin>
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	a0 e8       	ldi	r26, 0x80	; 128
    29b2:	bf e3       	ldi	r27, 0x3F	; 63
    29b4:	8f a3       	std	Y+39, r24	; 0x27
    29b6:	98 a7       	std	Y+40, r25	; 0x28
    29b8:	a9 a7       	std	Y+41, r26	; 0x29
    29ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29bc:	6f a1       	ldd	r22, Y+39	; 0x27
    29be:	78 a5       	ldd	r23, Y+40	; 0x28
    29c0:	89 a5       	ldd	r24, Y+41	; 0x29
    29c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	4a e7       	ldi	r20, 0x7A	; 122
    29ca:	53 e4       	ldi	r21, 0x43	; 67
    29cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	8b a3       	std	Y+35, r24	; 0x23
    29d6:	9c a3       	std	Y+36, r25	; 0x24
    29d8:	ad a3       	std	Y+37, r26	; 0x25
    29da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29dc:	6b a1       	ldd	r22, Y+35	; 0x23
    29de:	7c a1       	ldd	r23, Y+36	; 0x24
    29e0:	8d a1       	ldd	r24, Y+37	; 0x25
    29e2:	9e a1       	ldd	r25, Y+38	; 0x26
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	40 e8       	ldi	r20, 0x80	; 128
    29ea:	5f e3       	ldi	r21, 0x3F	; 63
    29ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f0:	88 23       	and	r24, r24
    29f2:	2c f4       	brge	.+10     	; 0x29fe <LCD_sendCommand+0x5a6>
		__ticks = 1;
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	9a a3       	std	Y+34, r25	; 0x22
    29fa:	89 a3       	std	Y+33, r24	; 0x21
    29fc:	3f c0       	rjmp	.+126    	; 0x2a7c <LCD_sendCommand+0x624>
	else if (__tmp > 65535)
    29fe:	6b a1       	ldd	r22, Y+35	; 0x23
    2a00:	7c a1       	ldd	r23, Y+36	; 0x24
    2a02:	8d a1       	ldd	r24, Y+37	; 0x25
    2a04:	9e a1       	ldd	r25, Y+38	; 0x26
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	3f ef       	ldi	r19, 0xFF	; 255
    2a0a:	4f e7       	ldi	r20, 0x7F	; 127
    2a0c:	57 e4       	ldi	r21, 0x47	; 71
    2a0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a12:	18 16       	cp	r1, r24
    2a14:	4c f5       	brge	.+82     	; 0x2a68 <LCD_sendCommand+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a16:	6f a1       	ldd	r22, Y+39	; 0x27
    2a18:	78 a5       	ldd	r23, Y+40	; 0x28
    2a1a:	89 a5       	ldd	r24, Y+41	; 0x29
    2a1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	40 e2       	ldi	r20, 0x20	; 32
    2a24:	51 e4       	ldi	r21, 0x41	; 65
    2a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	bc 01       	movw	r22, r24
    2a30:	cd 01       	movw	r24, r26
    2a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	9a a3       	std	Y+34, r25	; 0x22
    2a3c:	89 a3       	std	Y+33, r24	; 0x21
    2a3e:	0f c0       	rjmp	.+30     	; 0x2a5e <LCD_sendCommand+0x606>
    2a40:	89 e1       	ldi	r24, 0x19	; 25
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	98 a3       	std	Y+32, r25	; 0x20
    2a46:	8f 8f       	std	Y+31, r24	; 0x1f
    2a48:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a4a:	98 a1       	ldd	r25, Y+32	; 0x20
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	f1 f7       	brne	.-4      	; 0x2a4c <LCD_sendCommand+0x5f4>
    2a50:	98 a3       	std	Y+32, r25	; 0x20
    2a52:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a54:	89 a1       	ldd	r24, Y+33	; 0x21
    2a56:	9a a1       	ldd	r25, Y+34	; 0x22
    2a58:	01 97       	sbiw	r24, 0x01	; 1
    2a5a:	9a a3       	std	Y+34, r25	; 0x22
    2a5c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a60:	9a a1       	ldd	r25, Y+34	; 0x22
    2a62:	00 97       	sbiw	r24, 0x00	; 0
    2a64:	69 f7       	brne	.-38     	; 0x2a40 <LCD_sendCommand+0x5e8>
    2a66:	14 c0       	rjmp	.+40     	; 0x2a90 <LCD_sendCommand+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a68:	6b a1       	ldd	r22, Y+35	; 0x23
    2a6a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a6c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a6e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	9a a3       	std	Y+34, r25	; 0x22
    2a7a:	89 a3       	std	Y+33, r24	; 0x21
    2a7c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a7e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a80:	9e 8f       	std	Y+30, r25	; 0x1e
    2a82:	8d 8f       	std	Y+29, r24	; 0x1d
    2a84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a86:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a88:	01 97       	sbiw	r24, 0x01	; 1
    2a8a:	f1 f7       	brne	.-4      	; 0x2a88 <LCD_sendCommand+0x630>
    2a8c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a8e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required command to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    2a90:	82 e0       	ldi	r24, 0x02	; 2
    2a92:	0e 94 b9 10 	call	0x2172	; 0x2172 <GPIO_readPort>
    2a96:	fe 01       	movw	r30, r28
    2a98:	ed 59       	subi	r30, 0x9D	; 157
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((command & 0x0F) << 4);
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (command & 0x0F);
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	ed 59       	subi	r30, 0x9D	; 157
    2aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa4:	80 81       	ld	r24, Z
    2aa6:	98 2f       	mov	r25, r24
    2aa8:	90 7f       	andi	r25, 0xF0	; 240
    2aaa:	fe 01       	movw	r30, r28
    2aac:	ec 59       	subi	r30, 0x9C	; 156
    2aae:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab0:	80 81       	ld	r24, Z
    2ab2:	8f 70       	andi	r24, 0x0F	; 15
    2ab4:	89 2b       	or	r24, r25
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	ed 59       	subi	r30, 0x9D	; 157
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	80 83       	st	Z, r24
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    2abe:	fe 01       	movw	r30, r28
    2ac0:	ed 59       	subi	r30, 0x9D	; 157
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	82 e0       	ldi	r24, 0x02	; 2
    2ac6:	60 81       	ld	r22, Z
    2ac8:	0e 94 75 10 	call	0x20ea	; 0x20ea <GPIO_writePort>
    2acc:	80 e0       	ldi	r24, 0x00	; 0
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	a0 e8       	ldi	r26, 0x80	; 128
    2ad2:	bf e3       	ldi	r27, 0x3F	; 63
    2ad4:	89 8f       	std	Y+25, r24	; 0x19
    2ad6:	9a 8f       	std	Y+26, r25	; 0x1a
    2ad8:	ab 8f       	std	Y+27, r26	; 0x1b
    2ada:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2adc:	69 8d       	ldd	r22, Y+25	; 0x19
    2ade:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ae0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ae2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	4a e7       	ldi	r20, 0x7A	; 122
    2aea:	53 e4       	ldi	r21, 0x43	; 67
    2aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	8d 8b       	std	Y+21, r24	; 0x15
    2af6:	9e 8b       	std	Y+22, r25	; 0x16
    2af8:	af 8b       	std	Y+23, r26	; 0x17
    2afa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2afc:	6d 89       	ldd	r22, Y+21	; 0x15
    2afe:	7e 89       	ldd	r23, Y+22	; 0x16
    2b00:	8f 89       	ldd	r24, Y+23	; 0x17
    2b02:	98 8d       	ldd	r25, Y+24	; 0x18
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	40 e8       	ldi	r20, 0x80	; 128
    2b0a:	5f e3       	ldi	r21, 0x3F	; 63
    2b0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b10:	88 23       	and	r24, r24
    2b12:	2c f4       	brge	.+10     	; 0x2b1e <LCD_sendCommand+0x6c6>
		__ticks = 1;
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	9c 8b       	std	Y+20, r25	; 0x14
    2b1a:	8b 8b       	std	Y+19, r24	; 0x13
    2b1c:	3f c0       	rjmp	.+126    	; 0x2b9c <LCD_sendCommand+0x744>
	else if (__tmp > 65535)
    2b1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b20:	7e 89       	ldd	r23, Y+22	; 0x16
    2b22:	8f 89       	ldd	r24, Y+23	; 0x17
    2b24:	98 8d       	ldd	r25, Y+24	; 0x18
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	3f ef       	ldi	r19, 0xFF	; 255
    2b2a:	4f e7       	ldi	r20, 0x7F	; 127
    2b2c:	57 e4       	ldi	r21, 0x47	; 71
    2b2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b32:	18 16       	cp	r1, r24
    2b34:	4c f5       	brge	.+82     	; 0x2b88 <LCD_sendCommand+0x730>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b36:	69 8d       	ldd	r22, Y+25	; 0x19
    2b38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	40 e2       	ldi	r20, 0x20	; 32
    2b44:	51 e4       	ldi	r21, 0x41	; 65
    2b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4a:	dc 01       	movw	r26, r24
    2b4c:	cb 01       	movw	r24, r22
    2b4e:	bc 01       	movw	r22, r24
    2b50:	cd 01       	movw	r24, r26
    2b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	9c 8b       	std	Y+20, r25	; 0x14
    2b5c:	8b 8b       	std	Y+19, r24	; 0x13
    2b5e:	0f c0       	rjmp	.+30     	; 0x2b7e <LCD_sendCommand+0x726>
    2b60:	89 e1       	ldi	r24, 0x19	; 25
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	9a 8b       	std	Y+18, r25	; 0x12
    2b66:	89 8b       	std	Y+17, r24	; 0x11
    2b68:	89 89       	ldd	r24, Y+17	; 0x11
    2b6a:	9a 89       	ldd	r25, Y+18	; 0x12
    2b6c:	01 97       	sbiw	r24, 0x01	; 1
    2b6e:	f1 f7       	brne	.-4      	; 0x2b6c <LCD_sendCommand+0x714>
    2b70:	9a 8b       	std	Y+18, r25	; 0x12
    2b72:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b74:	8b 89       	ldd	r24, Y+19	; 0x13
    2b76:	9c 89       	ldd	r25, Y+20	; 0x14
    2b78:	01 97       	sbiw	r24, 0x01	; 1
    2b7a:	9c 8b       	std	Y+20, r25	; 0x14
    2b7c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b80:	9c 89       	ldd	r25, Y+20	; 0x14
    2b82:	00 97       	sbiw	r24, 0x00	; 0
    2b84:	69 f7       	brne	.-38     	; 0x2b60 <LCD_sendCommand+0x708>
    2b86:	14 c0       	rjmp	.+40     	; 0x2bb0 <LCD_sendCommand+0x758>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b88:	6d 89       	ldd	r22, Y+21	; 0x15
    2b8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b94:	dc 01       	movw	r26, r24
    2b96:	cb 01       	movw	r24, r22
    2b98:	9c 8b       	std	Y+20, r25	; 0x14
    2b9a:	8b 8b       	std	Y+19, r24	; 0x13
    2b9c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b9e:	9c 89       	ldd	r25, Y+20	; 0x14
    2ba0:	98 8b       	std	Y+16, r25	; 0x10
    2ba2:	8f 87       	std	Y+15, r24	; 0x0f
    2ba4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ba6:	98 89       	ldd	r25, Y+16	; 0x10
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	f1 f7       	brne	.-4      	; 0x2ba8 <LCD_sendCommand+0x750>
    2bac:	98 8b       	std	Y+16, r25	; 0x10
    2bae:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	63 e0       	ldi	r22, 0x03	; 3
    2bb4:	40 e0       	ldi	r20, 0x00	; 0
    2bb6:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GPIO_writePin>
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	a0 e8       	ldi	r26, 0x80	; 128
    2bc0:	bf e3       	ldi	r27, 0x3F	; 63
    2bc2:	8b 87       	std	Y+11, r24	; 0x0b
    2bc4:	9c 87       	std	Y+12, r25	; 0x0c
    2bc6:	ad 87       	std	Y+13, r26	; 0x0d
    2bc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	4a e7       	ldi	r20, 0x7A	; 122
    2bd8:	53 e4       	ldi	r21, 0x43	; 67
    2bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	8f 83       	std	Y+7, r24	; 0x07
    2be4:	98 87       	std	Y+8, r25	; 0x08
    2be6:	a9 87       	std	Y+9, r26	; 0x09
    2be8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bea:	6f 81       	ldd	r22, Y+7	; 0x07
    2bec:	78 85       	ldd	r23, Y+8	; 0x08
    2bee:	89 85       	ldd	r24, Y+9	; 0x09
    2bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e8       	ldi	r20, 0x80	; 128
    2bf8:	5f e3       	ldi	r21, 0x3F	; 63
    2bfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bfe:	88 23       	and	r24, r24
    2c00:	2c f4       	brge	.+10     	; 0x2c0c <LCD_sendCommand+0x7b4>
		__ticks = 1;
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	9e 83       	std	Y+6, r25	; 0x06
    2c08:	8d 83       	std	Y+5, r24	; 0x05
    2c0a:	3f c0       	rjmp	.+126    	; 0x2c8a <LCD_sendCommand+0x832>
	else if (__tmp > 65535)
    2c0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0e:	78 85       	ldd	r23, Y+8	; 0x08
    2c10:	89 85       	ldd	r24, Y+9	; 0x09
    2c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	3f ef       	ldi	r19, 0xFF	; 255
    2c18:	4f e7       	ldi	r20, 0x7F	; 127
    2c1a:	57 e4       	ldi	r21, 0x47	; 71
    2c1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c20:	18 16       	cp	r1, r24
    2c22:	4c f5       	brge	.+82     	; 0x2c76 <LCD_sendCommand+0x81e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	40 e2       	ldi	r20, 0x20	; 32
    2c32:	51 e4       	ldi	r21, 0x41	; 65
    2c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	bc 01       	movw	r22, r24
    2c3e:	cd 01       	movw	r24, r26
    2c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	9e 83       	std	Y+6, r25	; 0x06
    2c4a:	8d 83       	std	Y+5, r24	; 0x05
    2c4c:	0f c0       	rjmp	.+30     	; 0x2c6c <LCD_sendCommand+0x814>
    2c4e:	89 e1       	ldi	r24, 0x19	; 25
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	9c 83       	std	Y+4, r25	; 0x04
    2c54:	8b 83       	std	Y+3, r24	; 0x03
    2c56:	8b 81       	ldd	r24, Y+3	; 0x03
    2c58:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	f1 f7       	brne	.-4      	; 0x2c5a <LCD_sendCommand+0x802>
    2c5e:	9c 83       	std	Y+4, r25	; 0x04
    2c60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c62:	8d 81       	ldd	r24, Y+5	; 0x05
    2c64:	9e 81       	ldd	r25, Y+6	; 0x06
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	9e 83       	std	Y+6, r25	; 0x06
    2c6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c70:	00 97       	sbiw	r24, 0x00	; 0
    2c72:	69 f7       	brne	.-38     	; 0x2c4e <LCD_sendCommand+0x7f6>
    2c74:	14 c0       	rjmp	.+40     	; 0x2c9e <LCD_sendCommand+0x846>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c76:	6f 81       	ldd	r22, Y+7	; 0x07
    2c78:	78 85       	ldd	r23, Y+8	; 0x08
    2c7a:	89 85       	ldd	r24, Y+9	; 0x09
    2c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	9e 83       	std	Y+6, r25	; 0x06
    2c88:	8d 83       	std	Y+5, r24	; 0x05
    2c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8e:	9a 83       	std	Y+2, r25	; 0x02
    2c90:	89 83       	std	Y+1, r24	; 0x01
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	9a 81       	ldd	r25, Y+2	; 0x02
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	f1 f7       	brne	.-4      	; 0x2c96 <LCD_sendCommand+0x83e>
    2c9a:	9a 83       	std	Y+2, r25	; 0x02
    2c9c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2c9e:	cc 59       	subi	r28, 0x9C	; 156
    2ca0:	df 4f       	sbci	r29, 0xFF	; 255
    2ca2:	0f b6       	in	r0, 0x3f	; 63
    2ca4:	f8 94       	cli
    2ca6:	de bf       	out	0x3e, r29	; 62
    2ca8:	0f be       	out	0x3f, r0	; 63
    2caa:	cd bf       	out	0x3d, r28	; 61
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	1f 91       	pop	r17
    2cb2:	0f 91       	pop	r16
    2cb4:	08 95       	ret

00002cb6 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2cb6:	0f 93       	push	r16
    2cb8:	1f 93       	push	r17
    2cba:	df 93       	push	r29
    2cbc:	cf 93       	push	r28
    2cbe:	cd b7       	in	r28, 0x3d	; 61
    2cc0:	de b7       	in	r29, 0x3e	; 62
    2cc2:	c4 56       	subi	r28, 0x64	; 100
    2cc4:	d0 40       	sbci	r29, 0x00	; 0
    2cc6:	0f b6       	in	r0, 0x3f	; 63
    2cc8:	f8 94       	cli
    2cca:	de bf       	out	0x3e, r29	; 62
    2ccc:	0f be       	out	0x3f, r0	; 63
    2cce:	cd bf       	out	0x3d, r28	; 61
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	ec 59       	subi	r30, 0x9C	; 156
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	80 83       	st	Z, r24
	uint8 lcd_port_value = 0;
    2cd8:	fe 01       	movw	r30, r28
    2cda:	ed 59       	subi	r30, 0x9D	; 157
    2cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cde:	10 82       	st	Z, r1
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	61 e0       	ldi	r22, 0x01	; 1
    2ce4:	41 e0       	ldi	r20, 0x01	; 1
    2ce6:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	62 e0       	ldi	r22, 0x02	; 2
    2cee:	40 e0       	ldi	r20, 0x00	; 0
    2cf0:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GPIO_writePin>
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	e1 5a       	subi	r30, 0xA1	; 161
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	80 e0       	ldi	r24, 0x00	; 0
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	a0 e8       	ldi	r26, 0x80	; 128
    2d00:	bf e3       	ldi	r27, 0x3F	; 63
    2d02:	80 83       	st	Z, r24
    2d04:	91 83       	std	Z+1, r25	; 0x01
    2d06:	a2 83       	std	Z+2, r26	; 0x02
    2d08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d0a:	8e 01       	movw	r16, r28
    2d0c:	05 5a       	subi	r16, 0xA5	; 165
    2d0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d10:	fe 01       	movw	r30, r28
    2d12:	e1 5a       	subi	r30, 0xA1	; 161
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	60 81       	ld	r22, Z
    2d18:	71 81       	ldd	r23, Z+1	; 0x01
    2d1a:	82 81       	ldd	r24, Z+2	; 0x02
    2d1c:	93 81       	ldd	r25, Z+3	; 0x03
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	4a e7       	ldi	r20, 0x7A	; 122
    2d24:	53 e4       	ldi	r21, 0x43	; 67
    2d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	f8 01       	movw	r30, r16
    2d30:	80 83       	st	Z, r24
    2d32:	91 83       	std	Z+1, r25	; 0x01
    2d34:	a2 83       	std	Z+2, r26	; 0x02
    2d36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d38:	fe 01       	movw	r30, r28
    2d3a:	e5 5a       	subi	r30, 0xA5	; 165
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	60 81       	ld	r22, Z
    2d40:	71 81       	ldd	r23, Z+1	; 0x01
    2d42:	82 81       	ldd	r24, Z+2	; 0x02
    2d44:	93 81       	ldd	r25, Z+3	; 0x03
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	40 e8       	ldi	r20, 0x80	; 128
    2d4c:	5f e3       	ldi	r21, 0x3F	; 63
    2d4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d52:	88 23       	and	r24, r24
    2d54:	44 f4       	brge	.+16     	; 0x2d66 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    2d56:	fe 01       	movw	r30, r28
    2d58:	e7 5a       	subi	r30, 0xA7	; 167
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	91 83       	std	Z+1, r25	; 0x01
    2d62:	80 83       	st	Z, r24
    2d64:	64 c0       	rjmp	.+200    	; 0x2e2e <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    2d66:	fe 01       	movw	r30, r28
    2d68:	e5 5a       	subi	r30, 0xA5	; 165
    2d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6c:	60 81       	ld	r22, Z
    2d6e:	71 81       	ldd	r23, Z+1	; 0x01
    2d70:	82 81       	ldd	r24, Z+2	; 0x02
    2d72:	93 81       	ldd	r25, Z+3	; 0x03
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	3f ef       	ldi	r19, 0xFF	; 255
    2d78:	4f e7       	ldi	r20, 0x7F	; 127
    2d7a:	57 e4       	ldi	r21, 0x47	; 71
    2d7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d80:	18 16       	cp	r1, r24
    2d82:	0c f0       	brlt	.+2      	; 0x2d86 <LCD_displayCharacter+0xd0>
    2d84:	43 c0       	rjmp	.+134    	; 0x2e0c <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d86:	fe 01       	movw	r30, r28
    2d88:	e1 5a       	subi	r30, 0xA1	; 161
    2d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8c:	60 81       	ld	r22, Z
    2d8e:	71 81       	ldd	r23, Z+1	; 0x01
    2d90:	82 81       	ldd	r24, Z+2	; 0x02
    2d92:	93 81       	ldd	r25, Z+3	; 0x03
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	40 e2       	ldi	r20, 0x20	; 32
    2d9a:	51 e4       	ldi	r21, 0x41	; 65
    2d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	8e 01       	movw	r16, r28
    2da6:	07 5a       	subi	r16, 0xA7	; 167
    2da8:	1f 4f       	sbci	r17, 0xFF	; 255
    2daa:	bc 01       	movw	r22, r24
    2dac:	cd 01       	movw	r24, r26
    2dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	f8 01       	movw	r30, r16
    2db8:	91 83       	std	Z+1, r25	; 0x01
    2dba:	80 83       	st	Z, r24
    2dbc:	1f c0       	rjmp	.+62     	; 0x2dfc <LCD_displayCharacter+0x146>
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	e9 5a       	subi	r30, 0xA9	; 169
    2dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc4:	89 e1       	ldi	r24, 0x19	; 25
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	91 83       	std	Z+1, r25	; 0x01
    2dca:	80 83       	st	Z, r24
    2dcc:	fe 01       	movw	r30, r28
    2dce:	e9 5a       	subi	r30, 0xA9	; 169
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	80 81       	ld	r24, Z
    2dd4:	91 81       	ldd	r25, Z+1	; 0x01
    2dd6:	01 97       	sbiw	r24, 0x01	; 1
    2dd8:	f1 f7       	brne	.-4      	; 0x2dd6 <LCD_displayCharacter+0x120>
    2dda:	fe 01       	movw	r30, r28
    2ddc:	e9 5a       	subi	r30, 0xA9	; 169
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	91 83       	std	Z+1, r25	; 0x01
    2de2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2de4:	de 01       	movw	r26, r28
    2de6:	a7 5a       	subi	r26, 0xA7	; 167
    2de8:	bf 4f       	sbci	r27, 0xFF	; 255
    2dea:	fe 01       	movw	r30, r28
    2dec:	e7 5a       	subi	r30, 0xA7	; 167
    2dee:	ff 4f       	sbci	r31, 0xFF	; 255
    2df0:	80 81       	ld	r24, Z
    2df2:	91 81       	ldd	r25, Z+1	; 0x01
    2df4:	01 97       	sbiw	r24, 0x01	; 1
    2df6:	11 96       	adiw	r26, 0x01	; 1
    2df8:	9c 93       	st	X, r25
    2dfa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dfc:	fe 01       	movw	r30, r28
    2dfe:	e7 5a       	subi	r30, 0xA7	; 167
    2e00:	ff 4f       	sbci	r31, 0xFF	; 255
    2e02:	80 81       	ld	r24, Z
    2e04:	91 81       	ldd	r25, Z+1	; 0x01
    2e06:	00 97       	sbiw	r24, 0x00	; 0
    2e08:	d1 f6       	brne	.-76     	; 0x2dbe <LCD_displayCharacter+0x108>
    2e0a:	27 c0       	rjmp	.+78     	; 0x2e5a <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e0c:	8e 01       	movw	r16, r28
    2e0e:	07 5a       	subi	r16, 0xA7	; 167
    2e10:	1f 4f       	sbci	r17, 0xFF	; 255
    2e12:	fe 01       	movw	r30, r28
    2e14:	e5 5a       	subi	r30, 0xA5	; 165
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	60 81       	ld	r22, Z
    2e1a:	71 81       	ldd	r23, Z+1	; 0x01
    2e1c:	82 81       	ldd	r24, Z+2	; 0x02
    2e1e:	93 81       	ldd	r25, Z+3	; 0x03
    2e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	f8 01       	movw	r30, r16
    2e2a:	91 83       	std	Z+1, r25	; 0x01
    2e2c:	80 83       	st	Z, r24
    2e2e:	de 01       	movw	r26, r28
    2e30:	ab 5a       	subi	r26, 0xAB	; 171
    2e32:	bf 4f       	sbci	r27, 0xFF	; 255
    2e34:	fe 01       	movw	r30, r28
    2e36:	e7 5a       	subi	r30, 0xA7	; 167
    2e38:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3a:	80 81       	ld	r24, Z
    2e3c:	91 81       	ldd	r25, Z+1	; 0x01
    2e3e:	8d 93       	st	X+, r24
    2e40:	9c 93       	st	X, r25
    2e42:	fe 01       	movw	r30, r28
    2e44:	eb 5a       	subi	r30, 0xAB	; 171
    2e46:	ff 4f       	sbci	r31, 0xFF	; 255
    2e48:	80 81       	ld	r24, Z
    2e4a:	91 81       	ldd	r25, Z+1	; 0x01
    2e4c:	01 97       	sbiw	r24, 0x01	; 1
    2e4e:	f1 f7       	brne	.-4      	; 0x2e4c <LCD_displayCharacter+0x196>
    2e50:	fe 01       	movw	r30, r28
    2e52:	eb 5a       	subi	r30, 0xAB	; 171
    2e54:	ff 4f       	sbci	r31, 0xFF	; 255
    2e56:	91 83       	std	Z+1, r25	; 0x01
    2e58:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	63 e0       	ldi	r22, 0x03	; 3
    2e5e:	41 e0       	ldi	r20, 0x01	; 1
    2e60:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GPIO_writePin>
    2e64:	fe 01       	movw	r30, r28
    2e66:	ef 5a       	subi	r30, 0xAF	; 175
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	80 e0       	ldi	r24, 0x00	; 0
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	a0 e8       	ldi	r26, 0x80	; 128
    2e70:	bf e3       	ldi	r27, 0x3F	; 63
    2e72:	80 83       	st	Z, r24
    2e74:	91 83       	std	Z+1, r25	; 0x01
    2e76:	a2 83       	std	Z+2, r26	; 0x02
    2e78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e7a:	8e 01       	movw	r16, r28
    2e7c:	03 5b       	subi	r16, 0xB3	; 179
    2e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e80:	fe 01       	movw	r30, r28
    2e82:	ef 5a       	subi	r30, 0xAF	; 175
    2e84:	ff 4f       	sbci	r31, 0xFF	; 255
    2e86:	60 81       	ld	r22, Z
    2e88:	71 81       	ldd	r23, Z+1	; 0x01
    2e8a:	82 81       	ldd	r24, Z+2	; 0x02
    2e8c:	93 81       	ldd	r25, Z+3	; 0x03
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	4a e7       	ldi	r20, 0x7A	; 122
    2e94:	53 e4       	ldi	r21, 0x43	; 67
    2e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	f8 01       	movw	r30, r16
    2ea0:	80 83       	st	Z, r24
    2ea2:	91 83       	std	Z+1, r25	; 0x01
    2ea4:	a2 83       	std	Z+2, r26	; 0x02
    2ea6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	e3 5b       	subi	r30, 0xB3	; 179
    2eac:	ff 4f       	sbci	r31, 0xFF	; 255
    2eae:	60 81       	ld	r22, Z
    2eb0:	71 81       	ldd	r23, Z+1	; 0x01
    2eb2:	82 81       	ldd	r24, Z+2	; 0x02
    2eb4:	93 81       	ldd	r25, Z+3	; 0x03
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	40 e8       	ldi	r20, 0x80	; 128
    2ebc:	5f e3       	ldi	r21, 0x3F	; 63
    2ebe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ec2:	88 23       	and	r24, r24
    2ec4:	44 f4       	brge	.+16     	; 0x2ed6 <LCD_displayCharacter+0x220>
		__ticks = 1;
    2ec6:	fe 01       	movw	r30, r28
    2ec8:	e5 5b       	subi	r30, 0xB5	; 181
    2eca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	91 83       	std	Z+1, r25	; 0x01
    2ed2:	80 83       	st	Z, r24
    2ed4:	64 c0       	rjmp	.+200    	; 0x2f9e <LCD_displayCharacter+0x2e8>
	else if (__tmp > 65535)
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	e3 5b       	subi	r30, 0xB3	; 179
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	60 81       	ld	r22, Z
    2ede:	71 81       	ldd	r23, Z+1	; 0x01
    2ee0:	82 81       	ldd	r24, Z+2	; 0x02
    2ee2:	93 81       	ldd	r25, Z+3	; 0x03
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	3f ef       	ldi	r19, 0xFF	; 255
    2ee8:	4f e7       	ldi	r20, 0x7F	; 127
    2eea:	57 e4       	ldi	r21, 0x47	; 71
    2eec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ef0:	18 16       	cp	r1, r24
    2ef2:	0c f0       	brlt	.+2      	; 0x2ef6 <LCD_displayCharacter+0x240>
    2ef4:	43 c0       	rjmp	.+134    	; 0x2f7c <LCD_displayCharacter+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef6:	fe 01       	movw	r30, r28
    2ef8:	ef 5a       	subi	r30, 0xAF	; 175
    2efa:	ff 4f       	sbci	r31, 0xFF	; 255
    2efc:	60 81       	ld	r22, Z
    2efe:	71 81       	ldd	r23, Z+1	; 0x01
    2f00:	82 81       	ldd	r24, Z+2	; 0x02
    2f02:	93 81       	ldd	r25, Z+3	; 0x03
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	40 e2       	ldi	r20, 0x20	; 32
    2f0a:	51 e4       	ldi	r21, 0x41	; 65
    2f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	8e 01       	movw	r16, r28
    2f16:	05 5b       	subi	r16, 0xB5	; 181
    2f18:	1f 4f       	sbci	r17, 0xFF	; 255
    2f1a:	bc 01       	movw	r22, r24
    2f1c:	cd 01       	movw	r24, r26
    2f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	f8 01       	movw	r30, r16
    2f28:	91 83       	std	Z+1, r25	; 0x01
    2f2a:	80 83       	st	Z, r24
    2f2c:	1f c0       	rjmp	.+62     	; 0x2f6c <LCD_displayCharacter+0x2b6>
    2f2e:	fe 01       	movw	r30, r28
    2f30:	e7 5b       	subi	r30, 0xB7	; 183
    2f32:	ff 4f       	sbci	r31, 0xFF	; 255
    2f34:	89 e1       	ldi	r24, 0x19	; 25
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	91 83       	std	Z+1, r25	; 0x01
    2f3a:	80 83       	st	Z, r24
    2f3c:	fe 01       	movw	r30, r28
    2f3e:	e7 5b       	subi	r30, 0xB7	; 183
    2f40:	ff 4f       	sbci	r31, 0xFF	; 255
    2f42:	80 81       	ld	r24, Z
    2f44:	91 81       	ldd	r25, Z+1	; 0x01
    2f46:	01 97       	sbiw	r24, 0x01	; 1
    2f48:	f1 f7       	brne	.-4      	; 0x2f46 <LCD_displayCharacter+0x290>
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	e7 5b       	subi	r30, 0xB7	; 183
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	91 83       	std	Z+1, r25	; 0x01
    2f52:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f54:	de 01       	movw	r26, r28
    2f56:	a5 5b       	subi	r26, 0xB5	; 181
    2f58:	bf 4f       	sbci	r27, 0xFF	; 255
    2f5a:	fe 01       	movw	r30, r28
    2f5c:	e5 5b       	subi	r30, 0xB5	; 181
    2f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f60:	80 81       	ld	r24, Z
    2f62:	91 81       	ldd	r25, Z+1	; 0x01
    2f64:	01 97       	sbiw	r24, 0x01	; 1
    2f66:	11 96       	adiw	r26, 0x01	; 1
    2f68:	9c 93       	st	X, r25
    2f6a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f6c:	fe 01       	movw	r30, r28
    2f6e:	e5 5b       	subi	r30, 0xB5	; 181
    2f70:	ff 4f       	sbci	r31, 0xFF	; 255
    2f72:	80 81       	ld	r24, Z
    2f74:	91 81       	ldd	r25, Z+1	; 0x01
    2f76:	00 97       	sbiw	r24, 0x00	; 0
    2f78:	d1 f6       	brne	.-76     	; 0x2f2e <LCD_displayCharacter+0x278>
    2f7a:	27 c0       	rjmp	.+78     	; 0x2fca <LCD_displayCharacter+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f7c:	8e 01       	movw	r16, r28
    2f7e:	05 5b       	subi	r16, 0xB5	; 181
    2f80:	1f 4f       	sbci	r17, 0xFF	; 255
    2f82:	fe 01       	movw	r30, r28
    2f84:	e3 5b       	subi	r30, 0xB3	; 179
    2f86:	ff 4f       	sbci	r31, 0xFF	; 255
    2f88:	60 81       	ld	r22, Z
    2f8a:	71 81       	ldd	r23, Z+1	; 0x01
    2f8c:	82 81       	ldd	r24, Z+2	; 0x02
    2f8e:	93 81       	ldd	r25, Z+3	; 0x03
    2f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	f8 01       	movw	r30, r16
    2f9a:	91 83       	std	Z+1, r25	; 0x01
    2f9c:	80 83       	st	Z, r24
    2f9e:	de 01       	movw	r26, r28
    2fa0:	a9 5b       	subi	r26, 0xB9	; 185
    2fa2:	bf 4f       	sbci	r27, 0xFF	; 255
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	e5 5b       	subi	r30, 0xB5	; 181
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	80 81       	ld	r24, Z
    2fac:	91 81       	ldd	r25, Z+1	; 0x01
    2fae:	8d 93       	st	X+, r24
    2fb0:	9c 93       	st	X, r25
    2fb2:	fe 01       	movw	r30, r28
    2fb4:	e9 5b       	subi	r30, 0xB9	; 185
    2fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb8:	80 81       	ld	r24, Z
    2fba:	91 81       	ldd	r25, Z+1	; 0x01
    2fbc:	01 97       	sbiw	r24, 0x01	; 1
    2fbe:	f1 f7       	brne	.-4      	; 0x2fbc <LCD_displayCharacter+0x306>
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	e9 5b       	subi	r30, 0xB9	; 185
    2fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc6:	91 83       	std	Z+1, r25	; 0x01
    2fc8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required data to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    2fca:	82 e0       	ldi	r24, 0x02	; 2
    2fcc:	0e 94 b9 10 	call	0x2172	; 0x2172 <GPIO_readPort>
    2fd0:	fe 01       	movw	r30, r28
    2fd2:	ed 59       	subi	r30, 0x9D	; 157
    2fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd6:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (data & 0xF0);
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((data & 0xF0) >> 4);
    2fd8:	fe 01       	movw	r30, r28
    2fda:	ed 59       	subi	r30, 0x9D	; 157
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	80 81       	ld	r24, Z
    2fe0:	98 2f       	mov	r25, r24
    2fe2:	90 7f       	andi	r25, 0xF0	; 240
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	ec 59       	subi	r30, 0x9C	; 156
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	80 81       	ld	r24, Z
    2fec:	82 95       	swap	r24
    2fee:	8f 70       	andi	r24, 0x0F	; 15
    2ff0:	89 2b       	or	r24, r25
    2ff2:	fe 01       	movw	r30, r28
    2ff4:	ed 59       	subi	r30, 0x9D	; 157
    2ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff8:	80 83       	st	Z, r24
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	ed 59       	subi	r30, 0x9D	; 157
    2ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    3000:	82 e0       	ldi	r24, 0x02	; 2
    3002:	60 81       	ld	r22, Z
    3004:	0e 94 75 10 	call	0x20ea	; 0x20ea <GPIO_writePort>
    3008:	fe 01       	movw	r30, r28
    300a:	ed 5b       	subi	r30, 0xBD	; 189
    300c:	ff 4f       	sbci	r31, 0xFF	; 255
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	a0 e8       	ldi	r26, 0x80	; 128
    3014:	bf e3       	ldi	r27, 0x3F	; 63
    3016:	80 83       	st	Z, r24
    3018:	91 83       	std	Z+1, r25	; 0x01
    301a:	a2 83       	std	Z+2, r26	; 0x02
    301c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    301e:	8e 01       	movw	r16, r28
    3020:	01 5c       	subi	r16, 0xC1	; 193
    3022:	1f 4f       	sbci	r17, 0xFF	; 255
    3024:	fe 01       	movw	r30, r28
    3026:	ed 5b       	subi	r30, 0xBD	; 189
    3028:	ff 4f       	sbci	r31, 0xFF	; 255
    302a:	60 81       	ld	r22, Z
    302c:	71 81       	ldd	r23, Z+1	; 0x01
    302e:	82 81       	ldd	r24, Z+2	; 0x02
    3030:	93 81       	ldd	r25, Z+3	; 0x03
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	4a e7       	ldi	r20, 0x7A	; 122
    3038:	53 e4       	ldi	r21, 0x43	; 67
    303a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	f8 01       	movw	r30, r16
    3044:	80 83       	st	Z, r24
    3046:	91 83       	std	Z+1, r25	; 0x01
    3048:	a2 83       	std	Z+2, r26	; 0x02
    304a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    304c:	fe 01       	movw	r30, r28
    304e:	ff 96       	adiw	r30, 0x3f	; 63
    3050:	60 81       	ld	r22, Z
    3052:	71 81       	ldd	r23, Z+1	; 0x01
    3054:	82 81       	ldd	r24, Z+2	; 0x02
    3056:	93 81       	ldd	r25, Z+3	; 0x03
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	40 e8       	ldi	r20, 0x80	; 128
    305e:	5f e3       	ldi	r21, 0x3F	; 63
    3060:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3064:	88 23       	and	r24, r24
    3066:	2c f4       	brge	.+10     	; 0x3072 <LCD_displayCharacter+0x3bc>
		__ticks = 1;
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	9e af       	std	Y+62, r25	; 0x3e
    306e:	8d af       	std	Y+61, r24	; 0x3d
    3070:	46 c0       	rjmp	.+140    	; 0x30fe <LCD_displayCharacter+0x448>
	else if (__tmp > 65535)
    3072:	fe 01       	movw	r30, r28
    3074:	ff 96       	adiw	r30, 0x3f	; 63
    3076:	60 81       	ld	r22, Z
    3078:	71 81       	ldd	r23, Z+1	; 0x01
    307a:	82 81       	ldd	r24, Z+2	; 0x02
    307c:	93 81       	ldd	r25, Z+3	; 0x03
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	3f ef       	ldi	r19, 0xFF	; 255
    3082:	4f e7       	ldi	r20, 0x7F	; 127
    3084:	57 e4       	ldi	r21, 0x47	; 71
    3086:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    308a:	18 16       	cp	r1, r24
    308c:	64 f5       	brge	.+88     	; 0x30e6 <LCD_displayCharacter+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    308e:	fe 01       	movw	r30, r28
    3090:	ed 5b       	subi	r30, 0xBD	; 189
    3092:	ff 4f       	sbci	r31, 0xFF	; 255
    3094:	60 81       	ld	r22, Z
    3096:	71 81       	ldd	r23, Z+1	; 0x01
    3098:	82 81       	ldd	r24, Z+2	; 0x02
    309a:	93 81       	ldd	r25, Z+3	; 0x03
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	40 e2       	ldi	r20, 0x20	; 32
    30a2:	51 e4       	ldi	r21, 0x41	; 65
    30a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a8:	dc 01       	movw	r26, r24
    30aa:	cb 01       	movw	r24, r22
    30ac:	bc 01       	movw	r22, r24
    30ae:	cd 01       	movw	r24, r26
    30b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b4:	dc 01       	movw	r26, r24
    30b6:	cb 01       	movw	r24, r22
    30b8:	9e af       	std	Y+62, r25	; 0x3e
    30ba:	8d af       	std	Y+61, r24	; 0x3d
    30bc:	0f c0       	rjmp	.+30     	; 0x30dc <LCD_displayCharacter+0x426>
    30be:	89 e1       	ldi	r24, 0x19	; 25
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	9c af       	std	Y+60, r25	; 0x3c
    30c4:	8b af       	std	Y+59, r24	; 0x3b
    30c6:	8b ad       	ldd	r24, Y+59	; 0x3b
    30c8:	9c ad       	ldd	r25, Y+60	; 0x3c
    30ca:	01 97       	sbiw	r24, 0x01	; 1
    30cc:	f1 f7       	brne	.-4      	; 0x30ca <LCD_displayCharacter+0x414>
    30ce:	9c af       	std	Y+60, r25	; 0x3c
    30d0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    30d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    30d6:	01 97       	sbiw	r24, 0x01	; 1
    30d8:	9e af       	std	Y+62, r25	; 0x3e
    30da:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    30de:	9e ad       	ldd	r25, Y+62	; 0x3e
    30e0:	00 97       	sbiw	r24, 0x00	; 0
    30e2:	69 f7       	brne	.-38     	; 0x30be <LCD_displayCharacter+0x408>
    30e4:	16 c0       	rjmp	.+44     	; 0x3112 <LCD_displayCharacter+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e6:	fe 01       	movw	r30, r28
    30e8:	ff 96       	adiw	r30, 0x3f	; 63
    30ea:	60 81       	ld	r22, Z
    30ec:	71 81       	ldd	r23, Z+1	; 0x01
    30ee:	82 81       	ldd	r24, Z+2	; 0x02
    30f0:	93 81       	ldd	r25, Z+3	; 0x03
    30f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	9e af       	std	Y+62, r25	; 0x3e
    30fc:	8d af       	std	Y+61, r24	; 0x3d
    30fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    3100:	9e ad       	ldd	r25, Y+62	; 0x3e
    3102:	9a af       	std	Y+58, r25	; 0x3a
    3104:	89 af       	std	Y+57, r24	; 0x39
    3106:	89 ad       	ldd	r24, Y+57	; 0x39
    3108:	9a ad       	ldd	r25, Y+58	; 0x3a
    310a:	01 97       	sbiw	r24, 0x01	; 1
    310c:	f1 f7       	brne	.-4      	; 0x310a <LCD_displayCharacter+0x454>
    310e:	9a af       	std	Y+58, r25	; 0x3a
    3110:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	63 e0       	ldi	r22, 0x03	; 3
    3116:	40 e0       	ldi	r20, 0x00	; 0
    3118:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GPIO_writePin>
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	a0 e8       	ldi	r26, 0x80	; 128
    3122:	bf e3       	ldi	r27, 0x3F	; 63
    3124:	8d ab       	std	Y+53, r24	; 0x35
    3126:	9e ab       	std	Y+54, r25	; 0x36
    3128:	af ab       	std	Y+55, r26	; 0x37
    312a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    312c:	6d a9       	ldd	r22, Y+53	; 0x35
    312e:	7e a9       	ldd	r23, Y+54	; 0x36
    3130:	8f a9       	ldd	r24, Y+55	; 0x37
    3132:	98 ad       	ldd	r25, Y+56	; 0x38
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	4a e7       	ldi	r20, 0x7A	; 122
    313a:	53 e4       	ldi	r21, 0x43	; 67
    313c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	89 ab       	std	Y+49, r24	; 0x31
    3146:	9a ab       	std	Y+50, r25	; 0x32
    3148:	ab ab       	std	Y+51, r26	; 0x33
    314a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    314c:	69 a9       	ldd	r22, Y+49	; 0x31
    314e:	7a a9       	ldd	r23, Y+50	; 0x32
    3150:	8b a9       	ldd	r24, Y+51	; 0x33
    3152:	9c a9       	ldd	r25, Y+52	; 0x34
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	40 e8       	ldi	r20, 0x80	; 128
    315a:	5f e3       	ldi	r21, 0x3F	; 63
    315c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3160:	88 23       	and	r24, r24
    3162:	2c f4       	brge	.+10     	; 0x316e <LCD_displayCharacter+0x4b8>
		__ticks = 1;
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	98 ab       	std	Y+48, r25	; 0x30
    316a:	8f a7       	std	Y+47, r24	; 0x2f
    316c:	3f c0       	rjmp	.+126    	; 0x31ec <LCD_displayCharacter+0x536>
	else if (__tmp > 65535)
    316e:	69 a9       	ldd	r22, Y+49	; 0x31
    3170:	7a a9       	ldd	r23, Y+50	; 0x32
    3172:	8b a9       	ldd	r24, Y+51	; 0x33
    3174:	9c a9       	ldd	r25, Y+52	; 0x34
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	3f ef       	ldi	r19, 0xFF	; 255
    317a:	4f e7       	ldi	r20, 0x7F	; 127
    317c:	57 e4       	ldi	r21, 0x47	; 71
    317e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3182:	18 16       	cp	r1, r24
    3184:	4c f5       	brge	.+82     	; 0x31d8 <LCD_displayCharacter+0x522>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3186:	6d a9       	ldd	r22, Y+53	; 0x35
    3188:	7e a9       	ldd	r23, Y+54	; 0x36
    318a:	8f a9       	ldd	r24, Y+55	; 0x37
    318c:	98 ad       	ldd	r25, Y+56	; 0x38
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	40 e2       	ldi	r20, 0x20	; 32
    3194:	51 e4       	ldi	r21, 0x41	; 65
    3196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	bc 01       	movw	r22, r24
    31a0:	cd 01       	movw	r24, r26
    31a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a6:	dc 01       	movw	r26, r24
    31a8:	cb 01       	movw	r24, r22
    31aa:	98 ab       	std	Y+48, r25	; 0x30
    31ac:	8f a7       	std	Y+47, r24	; 0x2f
    31ae:	0f c0       	rjmp	.+30     	; 0x31ce <LCD_displayCharacter+0x518>
    31b0:	89 e1       	ldi	r24, 0x19	; 25
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	9e a7       	std	Y+46, r25	; 0x2e
    31b6:	8d a7       	std	Y+45, r24	; 0x2d
    31b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    31ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    31bc:	01 97       	sbiw	r24, 0x01	; 1
    31be:	f1 f7       	brne	.-4      	; 0x31bc <LCD_displayCharacter+0x506>
    31c0:	9e a7       	std	Y+46, r25	; 0x2e
    31c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    31c6:	98 a9       	ldd	r25, Y+48	; 0x30
    31c8:	01 97       	sbiw	r24, 0x01	; 1
    31ca:	98 ab       	std	Y+48, r25	; 0x30
    31cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    31d0:	98 a9       	ldd	r25, Y+48	; 0x30
    31d2:	00 97       	sbiw	r24, 0x00	; 0
    31d4:	69 f7       	brne	.-38     	; 0x31b0 <LCD_displayCharacter+0x4fa>
    31d6:	14 c0       	rjmp	.+40     	; 0x3200 <LCD_displayCharacter+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d8:	69 a9       	ldd	r22, Y+49	; 0x31
    31da:	7a a9       	ldd	r23, Y+50	; 0x32
    31dc:	8b a9       	ldd	r24, Y+51	; 0x33
    31de:	9c a9       	ldd	r25, Y+52	; 0x34
    31e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e4:	dc 01       	movw	r26, r24
    31e6:	cb 01       	movw	r24, r22
    31e8:	98 ab       	std	Y+48, r25	; 0x30
    31ea:	8f a7       	std	Y+47, r24	; 0x2f
    31ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    31ee:	98 a9       	ldd	r25, Y+48	; 0x30
    31f0:	9c a7       	std	Y+44, r25	; 0x2c
    31f2:	8b a7       	std	Y+43, r24	; 0x2b
    31f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    31f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	f1 f7       	brne	.-4      	; 0x31f8 <LCD_displayCharacter+0x542>
    31fc:	9c a7       	std	Y+44, r25	; 0x2c
    31fe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	63 e0       	ldi	r22, 0x03	; 3
    3204:	41 e0       	ldi	r20, 0x01	; 1
    3206:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GPIO_writePin>
    320a:	80 e0       	ldi	r24, 0x00	; 0
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	a0 e8       	ldi	r26, 0x80	; 128
    3210:	bf e3       	ldi	r27, 0x3F	; 63
    3212:	8f a3       	std	Y+39, r24	; 0x27
    3214:	98 a7       	std	Y+40, r25	; 0x28
    3216:	a9 a7       	std	Y+41, r26	; 0x29
    3218:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    321a:	6f a1       	ldd	r22, Y+39	; 0x27
    321c:	78 a5       	ldd	r23, Y+40	; 0x28
    321e:	89 a5       	ldd	r24, Y+41	; 0x29
    3220:	9a a5       	ldd	r25, Y+42	; 0x2a
    3222:	20 e0       	ldi	r18, 0x00	; 0
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	4a e7       	ldi	r20, 0x7A	; 122
    3228:	53 e4       	ldi	r21, 0x43	; 67
    322a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322e:	dc 01       	movw	r26, r24
    3230:	cb 01       	movw	r24, r22
    3232:	8b a3       	std	Y+35, r24	; 0x23
    3234:	9c a3       	std	Y+36, r25	; 0x24
    3236:	ad a3       	std	Y+37, r26	; 0x25
    3238:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    323a:	6b a1       	ldd	r22, Y+35	; 0x23
    323c:	7c a1       	ldd	r23, Y+36	; 0x24
    323e:	8d a1       	ldd	r24, Y+37	; 0x25
    3240:	9e a1       	ldd	r25, Y+38	; 0x26
    3242:	20 e0       	ldi	r18, 0x00	; 0
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	40 e8       	ldi	r20, 0x80	; 128
    3248:	5f e3       	ldi	r21, 0x3F	; 63
    324a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    324e:	88 23       	and	r24, r24
    3250:	2c f4       	brge	.+10     	; 0x325c <LCD_displayCharacter+0x5a6>
		__ticks = 1;
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	9a a3       	std	Y+34, r25	; 0x22
    3258:	89 a3       	std	Y+33, r24	; 0x21
    325a:	3f c0       	rjmp	.+126    	; 0x32da <LCD_displayCharacter+0x624>
	else if (__tmp > 65535)
    325c:	6b a1       	ldd	r22, Y+35	; 0x23
    325e:	7c a1       	ldd	r23, Y+36	; 0x24
    3260:	8d a1       	ldd	r24, Y+37	; 0x25
    3262:	9e a1       	ldd	r25, Y+38	; 0x26
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	3f ef       	ldi	r19, 0xFF	; 255
    3268:	4f e7       	ldi	r20, 0x7F	; 127
    326a:	57 e4       	ldi	r21, 0x47	; 71
    326c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3270:	18 16       	cp	r1, r24
    3272:	4c f5       	brge	.+82     	; 0x32c6 <LCD_displayCharacter+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3274:	6f a1       	ldd	r22, Y+39	; 0x27
    3276:	78 a5       	ldd	r23, Y+40	; 0x28
    3278:	89 a5       	ldd	r24, Y+41	; 0x29
    327a:	9a a5       	ldd	r25, Y+42	; 0x2a
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	40 e2       	ldi	r20, 0x20	; 32
    3282:	51 e4       	ldi	r21, 0x41	; 65
    3284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3288:	dc 01       	movw	r26, r24
    328a:	cb 01       	movw	r24, r22
    328c:	bc 01       	movw	r22, r24
    328e:	cd 01       	movw	r24, r26
    3290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3294:	dc 01       	movw	r26, r24
    3296:	cb 01       	movw	r24, r22
    3298:	9a a3       	std	Y+34, r25	; 0x22
    329a:	89 a3       	std	Y+33, r24	; 0x21
    329c:	0f c0       	rjmp	.+30     	; 0x32bc <LCD_displayCharacter+0x606>
    329e:	89 e1       	ldi	r24, 0x19	; 25
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	98 a3       	std	Y+32, r25	; 0x20
    32a4:	8f 8f       	std	Y+31, r24	; 0x1f
    32a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32a8:	98 a1       	ldd	r25, Y+32	; 0x20
    32aa:	01 97       	sbiw	r24, 0x01	; 1
    32ac:	f1 f7       	brne	.-4      	; 0x32aa <LCD_displayCharacter+0x5f4>
    32ae:	98 a3       	std	Y+32, r25	; 0x20
    32b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32b2:	89 a1       	ldd	r24, Y+33	; 0x21
    32b4:	9a a1       	ldd	r25, Y+34	; 0x22
    32b6:	01 97       	sbiw	r24, 0x01	; 1
    32b8:	9a a3       	std	Y+34, r25	; 0x22
    32ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32bc:	89 a1       	ldd	r24, Y+33	; 0x21
    32be:	9a a1       	ldd	r25, Y+34	; 0x22
    32c0:	00 97       	sbiw	r24, 0x00	; 0
    32c2:	69 f7       	brne	.-38     	; 0x329e <LCD_displayCharacter+0x5e8>
    32c4:	14 c0       	rjmp	.+40     	; 0x32ee <LCD_displayCharacter+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c6:	6b a1       	ldd	r22, Y+35	; 0x23
    32c8:	7c a1       	ldd	r23, Y+36	; 0x24
    32ca:	8d a1       	ldd	r24, Y+37	; 0x25
    32cc:	9e a1       	ldd	r25, Y+38	; 0x26
    32ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d2:	dc 01       	movw	r26, r24
    32d4:	cb 01       	movw	r24, r22
    32d6:	9a a3       	std	Y+34, r25	; 0x22
    32d8:	89 a3       	std	Y+33, r24	; 0x21
    32da:	89 a1       	ldd	r24, Y+33	; 0x21
    32dc:	9a a1       	ldd	r25, Y+34	; 0x22
    32de:	9e 8f       	std	Y+30, r25	; 0x1e
    32e0:	8d 8f       	std	Y+29, r24	; 0x1d
    32e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32e6:	01 97       	sbiw	r24, 0x01	; 1
    32e8:	f1 f7       	brne	.-4      	; 0x32e6 <LCD_displayCharacter+0x630>
    32ea:	9e 8f       	std	Y+30, r25	; 0x1e
    32ec:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required data to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    32ee:	82 e0       	ldi	r24, 0x02	; 2
    32f0:	0e 94 b9 10 	call	0x2172	; 0x2172 <GPIO_readPort>
    32f4:	fe 01       	movw	r30, r28
    32f6:	ed 59       	subi	r30, 0x9D	; 157
    32f8:	ff 4f       	sbci	r31, 0xFF	; 255
    32fa:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((data & 0x0F) << 4);
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (data & 0x0F);
    32fc:	fe 01       	movw	r30, r28
    32fe:	ed 59       	subi	r30, 0x9D	; 157
    3300:	ff 4f       	sbci	r31, 0xFF	; 255
    3302:	80 81       	ld	r24, Z
    3304:	98 2f       	mov	r25, r24
    3306:	90 7f       	andi	r25, 0xF0	; 240
    3308:	fe 01       	movw	r30, r28
    330a:	ec 59       	subi	r30, 0x9C	; 156
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	80 81       	ld	r24, Z
    3310:	8f 70       	andi	r24, 0x0F	; 15
    3312:	89 2b       	or	r24, r25
    3314:	fe 01       	movw	r30, r28
    3316:	ed 59       	subi	r30, 0x9D	; 157
    3318:	ff 4f       	sbci	r31, 0xFF	; 255
    331a:	80 83       	st	Z, r24
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    331c:	fe 01       	movw	r30, r28
    331e:	ed 59       	subi	r30, 0x9D	; 157
    3320:	ff 4f       	sbci	r31, 0xFF	; 255
    3322:	82 e0       	ldi	r24, 0x02	; 2
    3324:	60 81       	ld	r22, Z
    3326:	0e 94 75 10 	call	0x20ea	; 0x20ea <GPIO_writePort>
    332a:	80 e0       	ldi	r24, 0x00	; 0
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	a0 e8       	ldi	r26, 0x80	; 128
    3330:	bf e3       	ldi	r27, 0x3F	; 63
    3332:	89 8f       	std	Y+25, r24	; 0x19
    3334:	9a 8f       	std	Y+26, r25	; 0x1a
    3336:	ab 8f       	std	Y+27, r26	; 0x1b
    3338:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    333a:	69 8d       	ldd	r22, Y+25	; 0x19
    333c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    333e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3340:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3342:	20 e0       	ldi	r18, 0x00	; 0
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	4a e7       	ldi	r20, 0x7A	; 122
    3348:	53 e4       	ldi	r21, 0x43	; 67
    334a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    334e:	dc 01       	movw	r26, r24
    3350:	cb 01       	movw	r24, r22
    3352:	8d 8b       	std	Y+21, r24	; 0x15
    3354:	9e 8b       	std	Y+22, r25	; 0x16
    3356:	af 8b       	std	Y+23, r26	; 0x17
    3358:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    335a:	6d 89       	ldd	r22, Y+21	; 0x15
    335c:	7e 89       	ldd	r23, Y+22	; 0x16
    335e:	8f 89       	ldd	r24, Y+23	; 0x17
    3360:	98 8d       	ldd	r25, Y+24	; 0x18
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	40 e8       	ldi	r20, 0x80	; 128
    3368:	5f e3       	ldi	r21, 0x3F	; 63
    336a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    336e:	88 23       	and	r24, r24
    3370:	2c f4       	brge	.+10     	; 0x337c <LCD_displayCharacter+0x6c6>
		__ticks = 1;
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	9c 8b       	std	Y+20, r25	; 0x14
    3378:	8b 8b       	std	Y+19, r24	; 0x13
    337a:	3f c0       	rjmp	.+126    	; 0x33fa <LCD_displayCharacter+0x744>
	else if (__tmp > 65535)
    337c:	6d 89       	ldd	r22, Y+21	; 0x15
    337e:	7e 89       	ldd	r23, Y+22	; 0x16
    3380:	8f 89       	ldd	r24, Y+23	; 0x17
    3382:	98 8d       	ldd	r25, Y+24	; 0x18
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	3f ef       	ldi	r19, 0xFF	; 255
    3388:	4f e7       	ldi	r20, 0x7F	; 127
    338a:	57 e4       	ldi	r21, 0x47	; 71
    338c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3390:	18 16       	cp	r1, r24
    3392:	4c f5       	brge	.+82     	; 0x33e6 <LCD_displayCharacter+0x730>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3394:	69 8d       	ldd	r22, Y+25	; 0x19
    3396:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3398:	8b 8d       	ldd	r24, Y+27	; 0x1b
    339a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    339c:	20 e0       	ldi	r18, 0x00	; 0
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	40 e2       	ldi	r20, 0x20	; 32
    33a2:	51 e4       	ldi	r21, 0x41	; 65
    33a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a8:	dc 01       	movw	r26, r24
    33aa:	cb 01       	movw	r24, r22
    33ac:	bc 01       	movw	r22, r24
    33ae:	cd 01       	movw	r24, r26
    33b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b4:	dc 01       	movw	r26, r24
    33b6:	cb 01       	movw	r24, r22
    33b8:	9c 8b       	std	Y+20, r25	; 0x14
    33ba:	8b 8b       	std	Y+19, r24	; 0x13
    33bc:	0f c0       	rjmp	.+30     	; 0x33dc <LCD_displayCharacter+0x726>
    33be:	89 e1       	ldi	r24, 0x19	; 25
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	9a 8b       	std	Y+18, r25	; 0x12
    33c4:	89 8b       	std	Y+17, r24	; 0x11
    33c6:	89 89       	ldd	r24, Y+17	; 0x11
    33c8:	9a 89       	ldd	r25, Y+18	; 0x12
    33ca:	01 97       	sbiw	r24, 0x01	; 1
    33cc:	f1 f7       	brne	.-4      	; 0x33ca <LCD_displayCharacter+0x714>
    33ce:	9a 8b       	std	Y+18, r25	; 0x12
    33d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d2:	8b 89       	ldd	r24, Y+19	; 0x13
    33d4:	9c 89       	ldd	r25, Y+20	; 0x14
    33d6:	01 97       	sbiw	r24, 0x01	; 1
    33d8:	9c 8b       	std	Y+20, r25	; 0x14
    33da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33dc:	8b 89       	ldd	r24, Y+19	; 0x13
    33de:	9c 89       	ldd	r25, Y+20	; 0x14
    33e0:	00 97       	sbiw	r24, 0x00	; 0
    33e2:	69 f7       	brne	.-38     	; 0x33be <LCD_displayCharacter+0x708>
    33e4:	14 c0       	rjmp	.+40     	; 0x340e <LCD_displayCharacter+0x758>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33e6:	6d 89       	ldd	r22, Y+21	; 0x15
    33e8:	7e 89       	ldd	r23, Y+22	; 0x16
    33ea:	8f 89       	ldd	r24, Y+23	; 0x17
    33ec:	98 8d       	ldd	r25, Y+24	; 0x18
    33ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f2:	dc 01       	movw	r26, r24
    33f4:	cb 01       	movw	r24, r22
    33f6:	9c 8b       	std	Y+20, r25	; 0x14
    33f8:	8b 8b       	std	Y+19, r24	; 0x13
    33fa:	8b 89       	ldd	r24, Y+19	; 0x13
    33fc:	9c 89       	ldd	r25, Y+20	; 0x14
    33fe:	98 8b       	std	Y+16, r25	; 0x10
    3400:	8f 87       	std	Y+15, r24	; 0x0f
    3402:	8f 85       	ldd	r24, Y+15	; 0x0f
    3404:	98 89       	ldd	r25, Y+16	; 0x10
    3406:	01 97       	sbiw	r24, 0x01	; 1
    3408:	f1 f7       	brne	.-4      	; 0x3406 <LCD_displayCharacter+0x750>
    340a:	98 8b       	std	Y+16, r25	; 0x10
    340c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    340e:	81 e0       	ldi	r24, 0x01	; 1
    3410:	63 e0       	ldi	r22, 0x03	; 3
    3412:	40 e0       	ldi	r20, 0x00	; 0
    3414:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GPIO_writePin>
    3418:	80 e0       	ldi	r24, 0x00	; 0
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	a0 e8       	ldi	r26, 0x80	; 128
    341e:	bf e3       	ldi	r27, 0x3F	; 63
    3420:	8b 87       	std	Y+11, r24	; 0x0b
    3422:	9c 87       	std	Y+12, r25	; 0x0c
    3424:	ad 87       	std	Y+13, r26	; 0x0d
    3426:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3428:	6b 85       	ldd	r22, Y+11	; 0x0b
    342a:	7c 85       	ldd	r23, Y+12	; 0x0c
    342c:	8d 85       	ldd	r24, Y+13	; 0x0d
    342e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	4a e7       	ldi	r20, 0x7A	; 122
    3436:	53 e4       	ldi	r21, 0x43	; 67
    3438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343c:	dc 01       	movw	r26, r24
    343e:	cb 01       	movw	r24, r22
    3440:	8f 83       	std	Y+7, r24	; 0x07
    3442:	98 87       	std	Y+8, r25	; 0x08
    3444:	a9 87       	std	Y+9, r26	; 0x09
    3446:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3448:	6f 81       	ldd	r22, Y+7	; 0x07
    344a:	78 85       	ldd	r23, Y+8	; 0x08
    344c:	89 85       	ldd	r24, Y+9	; 0x09
    344e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3450:	20 e0       	ldi	r18, 0x00	; 0
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	40 e8       	ldi	r20, 0x80	; 128
    3456:	5f e3       	ldi	r21, 0x3F	; 63
    3458:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    345c:	88 23       	and	r24, r24
    345e:	2c f4       	brge	.+10     	; 0x346a <LCD_displayCharacter+0x7b4>
		__ticks = 1;
    3460:	81 e0       	ldi	r24, 0x01	; 1
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	9e 83       	std	Y+6, r25	; 0x06
    3466:	8d 83       	std	Y+5, r24	; 0x05
    3468:	3f c0       	rjmp	.+126    	; 0x34e8 <LCD_displayCharacter+0x832>
	else if (__tmp > 65535)
    346a:	6f 81       	ldd	r22, Y+7	; 0x07
    346c:	78 85       	ldd	r23, Y+8	; 0x08
    346e:	89 85       	ldd	r24, Y+9	; 0x09
    3470:	9a 85       	ldd	r25, Y+10	; 0x0a
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	3f ef       	ldi	r19, 0xFF	; 255
    3476:	4f e7       	ldi	r20, 0x7F	; 127
    3478:	57 e4       	ldi	r21, 0x47	; 71
    347a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    347e:	18 16       	cp	r1, r24
    3480:	4c f5       	brge	.+82     	; 0x34d4 <LCD_displayCharacter+0x81e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3482:	6b 85       	ldd	r22, Y+11	; 0x0b
    3484:	7c 85       	ldd	r23, Y+12	; 0x0c
    3486:	8d 85       	ldd	r24, Y+13	; 0x0d
    3488:	9e 85       	ldd	r25, Y+14	; 0x0e
    348a:	20 e0       	ldi	r18, 0x00	; 0
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	40 e2       	ldi	r20, 0x20	; 32
    3490:	51 e4       	ldi	r21, 0x41	; 65
    3492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	bc 01       	movw	r22, r24
    349c:	cd 01       	movw	r24, r26
    349e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a2:	dc 01       	movw	r26, r24
    34a4:	cb 01       	movw	r24, r22
    34a6:	9e 83       	std	Y+6, r25	; 0x06
    34a8:	8d 83       	std	Y+5, r24	; 0x05
    34aa:	0f c0       	rjmp	.+30     	; 0x34ca <LCD_displayCharacter+0x814>
    34ac:	89 e1       	ldi	r24, 0x19	; 25
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	9c 83       	std	Y+4, r25	; 0x04
    34b2:	8b 83       	std	Y+3, r24	; 0x03
    34b4:	8b 81       	ldd	r24, Y+3	; 0x03
    34b6:	9c 81       	ldd	r25, Y+4	; 0x04
    34b8:	01 97       	sbiw	r24, 0x01	; 1
    34ba:	f1 f7       	brne	.-4      	; 0x34b8 <LCD_displayCharacter+0x802>
    34bc:	9c 83       	std	Y+4, r25	; 0x04
    34be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34c0:	8d 81       	ldd	r24, Y+5	; 0x05
    34c2:	9e 81       	ldd	r25, Y+6	; 0x06
    34c4:	01 97       	sbiw	r24, 0x01	; 1
    34c6:	9e 83       	std	Y+6, r25	; 0x06
    34c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ca:	8d 81       	ldd	r24, Y+5	; 0x05
    34cc:	9e 81       	ldd	r25, Y+6	; 0x06
    34ce:	00 97       	sbiw	r24, 0x00	; 0
    34d0:	69 f7       	brne	.-38     	; 0x34ac <LCD_displayCharacter+0x7f6>
    34d2:	14 c0       	rjmp	.+40     	; 0x34fc <LCD_displayCharacter+0x846>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34d4:	6f 81       	ldd	r22, Y+7	; 0x07
    34d6:	78 85       	ldd	r23, Y+8	; 0x08
    34d8:	89 85       	ldd	r24, Y+9	; 0x09
    34da:	9a 85       	ldd	r25, Y+10	; 0x0a
    34dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e0:	dc 01       	movw	r26, r24
    34e2:	cb 01       	movw	r24, r22
    34e4:	9e 83       	std	Y+6, r25	; 0x06
    34e6:	8d 83       	std	Y+5, r24	; 0x05
    34e8:	8d 81       	ldd	r24, Y+5	; 0x05
    34ea:	9e 81       	ldd	r25, Y+6	; 0x06
    34ec:	9a 83       	std	Y+2, r25	; 0x02
    34ee:	89 83       	std	Y+1, r24	; 0x01
    34f0:	89 81       	ldd	r24, Y+1	; 0x01
    34f2:	9a 81       	ldd	r25, Y+2	; 0x02
    34f4:	01 97       	sbiw	r24, 0x01	; 1
    34f6:	f1 f7       	brne	.-4      	; 0x34f4 <LCD_displayCharacter+0x83e>
    34f8:	9a 83       	std	Y+2, r25	; 0x02
    34fa:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    34fc:	cc 59       	subi	r28, 0x9C	; 156
    34fe:	df 4f       	sbci	r29, 0xFF	; 255
    3500:	0f b6       	in	r0, 0x3f	; 63
    3502:	f8 94       	cli
    3504:	de bf       	out	0x3e, r29	; 62
    3506:	0f be       	out	0x3f, r0	; 63
    3508:	cd bf       	out	0x3d, r28	; 61
    350a:	cf 91       	pop	r28
    350c:	df 91       	pop	r29
    350e:	1f 91       	pop	r17
    3510:	0f 91       	pop	r16
    3512:	08 95       	ret

00003514 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3514:	df 93       	push	r29
    3516:	cf 93       	push	r28
    3518:	00 d0       	rcall	.+0      	; 0x351a <LCD_displayString+0x6>
    351a:	0f 92       	push	r0
    351c:	cd b7       	in	r28, 0x3d	; 61
    351e:	de b7       	in	r29, 0x3e	; 62
    3520:	9b 83       	std	Y+3, r25	; 0x03
    3522:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3524:	19 82       	std	Y+1, r1	; 0x01
    3526:	0e c0       	rjmp	.+28     	; 0x3544 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3528:	89 81       	ldd	r24, Y+1	; 0x01
    352a:	28 2f       	mov	r18, r24
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	8a 81       	ldd	r24, Y+2	; 0x02
    3530:	9b 81       	ldd	r25, Y+3	; 0x03
    3532:	fc 01       	movw	r30, r24
    3534:	e2 0f       	add	r30, r18
    3536:	f3 1f       	adc	r31, r19
    3538:	80 81       	ld	r24, Z
    353a:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <LCD_displayCharacter>
		i++;
    353e:	89 81       	ldd	r24, Y+1	; 0x01
    3540:	8f 5f       	subi	r24, 0xFF	; 255
    3542:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3544:	89 81       	ldd	r24, Y+1	; 0x01
    3546:	28 2f       	mov	r18, r24
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	8a 81       	ldd	r24, Y+2	; 0x02
    354c:	9b 81       	ldd	r25, Y+3	; 0x03
    354e:	fc 01       	movw	r30, r24
    3550:	e2 0f       	add	r30, r18
    3552:	f3 1f       	adc	r31, r19
    3554:	80 81       	ld	r24, Z
    3556:	88 23       	and	r24, r24
    3558:	39 f7       	brne	.-50     	; 0x3528 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    355a:	0f 90       	pop	r0
    355c:	0f 90       	pop	r0
    355e:	0f 90       	pop	r0
    3560:	cf 91       	pop	r28
    3562:	df 91       	pop	r29
    3564:	08 95       	ret

00003566 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3566:	df 93       	push	r29
    3568:	cf 93       	push	r28
    356a:	00 d0       	rcall	.+0      	; 0x356c <LCD_moveCursor+0x6>
    356c:	00 d0       	rcall	.+0      	; 0x356e <LCD_moveCursor+0x8>
    356e:	0f 92       	push	r0
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
    3574:	8a 83       	std	Y+2, r24	; 0x02
    3576:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3578:	8a 81       	ldd	r24, Y+2	; 0x02
    357a:	28 2f       	mov	r18, r24
    357c:	30 e0       	ldi	r19, 0x00	; 0
    357e:	3d 83       	std	Y+5, r19	; 0x05
    3580:	2c 83       	std	Y+4, r18	; 0x04
    3582:	8c 81       	ldd	r24, Y+4	; 0x04
    3584:	9d 81       	ldd	r25, Y+5	; 0x05
    3586:	81 30       	cpi	r24, 0x01	; 1
    3588:	91 05       	cpc	r25, r1
    358a:	c1 f0       	breq	.+48     	; 0x35bc <LCD_moveCursor+0x56>
    358c:	2c 81       	ldd	r18, Y+4	; 0x04
    358e:	3d 81       	ldd	r19, Y+5	; 0x05
    3590:	22 30       	cpi	r18, 0x02	; 2
    3592:	31 05       	cpc	r19, r1
    3594:	2c f4       	brge	.+10     	; 0x35a0 <LCD_moveCursor+0x3a>
    3596:	8c 81       	ldd	r24, Y+4	; 0x04
    3598:	9d 81       	ldd	r25, Y+5	; 0x05
    359a:	00 97       	sbiw	r24, 0x00	; 0
    359c:	61 f0       	breq	.+24     	; 0x35b6 <LCD_moveCursor+0x50>
    359e:	19 c0       	rjmp	.+50     	; 0x35d2 <LCD_moveCursor+0x6c>
    35a0:	2c 81       	ldd	r18, Y+4	; 0x04
    35a2:	3d 81       	ldd	r19, Y+5	; 0x05
    35a4:	22 30       	cpi	r18, 0x02	; 2
    35a6:	31 05       	cpc	r19, r1
    35a8:	69 f0       	breq	.+26     	; 0x35c4 <LCD_moveCursor+0x5e>
    35aa:	8c 81       	ldd	r24, Y+4	; 0x04
    35ac:	9d 81       	ldd	r25, Y+5	; 0x05
    35ae:	83 30       	cpi	r24, 0x03	; 3
    35b0:	91 05       	cpc	r25, r1
    35b2:	61 f0       	breq	.+24     	; 0x35cc <LCD_moveCursor+0x66>
    35b4:	0e c0       	rjmp	.+28     	; 0x35d2 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    35b6:	8b 81       	ldd	r24, Y+3	; 0x03
    35b8:	89 83       	std	Y+1, r24	; 0x01
    35ba:	0b c0       	rjmp	.+22     	; 0x35d2 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    35bc:	8b 81       	ldd	r24, Y+3	; 0x03
    35be:	80 5c       	subi	r24, 0xC0	; 192
    35c0:	89 83       	std	Y+1, r24	; 0x01
    35c2:	07 c0       	rjmp	.+14     	; 0x35d2 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    35c4:	8b 81       	ldd	r24, Y+3	; 0x03
    35c6:	80 5f       	subi	r24, 0xF0	; 240
    35c8:	89 83       	std	Y+1, r24	; 0x01
    35ca:	03 c0       	rjmp	.+6      	; 0x35d2 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    35cc:	8b 81       	ldd	r24, Y+3	; 0x03
    35ce:	80 5b       	subi	r24, 0xB0	; 176
    35d0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    35d2:	89 81       	ldd	r24, Y+1	; 0x01
    35d4:	80 68       	ori	r24, 0x80	; 128
    35d6:	0e 94 2c 12 	call	0x2458	; 0x2458 <LCD_sendCommand>
}
    35da:	0f 90       	pop	r0
    35dc:	0f 90       	pop	r0
    35de:	0f 90       	pop	r0
    35e0:	0f 90       	pop	r0
    35e2:	0f 90       	pop	r0
    35e4:	cf 91       	pop	r28
    35e6:	df 91       	pop	r29
    35e8:	08 95       	ret

000035ea <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    35ea:	df 93       	push	r29
    35ec:	cf 93       	push	r28
    35ee:	00 d0       	rcall	.+0      	; 0x35f0 <LCD_displayStringRowColumn+0x6>
    35f0:	00 d0       	rcall	.+0      	; 0x35f2 <LCD_displayStringRowColumn+0x8>
    35f2:	cd b7       	in	r28, 0x3d	; 61
    35f4:	de b7       	in	r29, 0x3e	; 62
    35f6:	89 83       	std	Y+1, r24	; 0x01
    35f8:	6a 83       	std	Y+2, r22	; 0x02
    35fa:	5c 83       	std	Y+4, r21	; 0x04
    35fc:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    35fe:	89 81       	ldd	r24, Y+1	; 0x01
    3600:	6a 81       	ldd	r22, Y+2	; 0x02
    3602:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3606:	8b 81       	ldd	r24, Y+3	; 0x03
    3608:	9c 81       	ldd	r25, Y+4	; 0x04
    360a:	0e 94 8a 1a 	call	0x3514	; 0x3514 <LCD_displayString>
}
    360e:	0f 90       	pop	r0
    3610:	0f 90       	pop	r0
    3612:	0f 90       	pop	r0
    3614:	0f 90       	pop	r0
    3616:	cf 91       	pop	r28
    3618:	df 91       	pop	r29
    361a:	08 95       	ret

0000361c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    361c:	df 93       	push	r29
    361e:	cf 93       	push	r28
    3620:	cd b7       	in	r28, 0x3d	; 61
    3622:	de b7       	in	r29, 0x3e	; 62
    3624:	62 97       	sbiw	r28, 0x12	; 18
    3626:	0f b6       	in	r0, 0x3f	; 63
    3628:	f8 94       	cli
    362a:	de bf       	out	0x3e, r29	; 62
    362c:	0f be       	out	0x3f, r0	; 63
    362e:	cd bf       	out	0x3d, r28	; 61
    3630:	9a 8b       	std	Y+18, r25	; 0x12
    3632:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3634:	89 89       	ldd	r24, Y+17	; 0x11
    3636:	9a 89       	ldd	r25, Y+18	; 0x12
    3638:	9e 01       	movw	r18, r28
    363a:	2f 5f       	subi	r18, 0xFF	; 255
    363c:	3f 4f       	sbci	r19, 0xFF	; 255
    363e:	b9 01       	movw	r22, r18
    3640:	4a e0       	ldi	r20, 0x0A	; 10
    3642:	50 e0       	ldi	r21, 0x00	; 0
    3644:	0e 94 54 1e 	call	0x3ca8	; 0x3ca8 <itoa>
   LCD_displayString(buff); /* Display the string */
    3648:	ce 01       	movw	r24, r28
    364a:	01 96       	adiw	r24, 0x01	; 1
    364c:	0e 94 8a 1a 	call	0x3514	; 0x3514 <LCD_displayString>
}
    3650:	62 96       	adiw	r28, 0x12	; 18
    3652:	0f b6       	in	r0, 0x3f	; 63
    3654:	f8 94       	cli
    3656:	de bf       	out	0x3e, r29	; 62
    3658:	0f be       	out	0x3f, r0	; 63
    365a:	cd bf       	out	0x3d, r28	; 61
    365c:	cf 91       	pop	r28
    365e:	df 91       	pop	r29
    3660:	08 95       	ret

00003662 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3662:	df 93       	push	r29
    3664:	cf 93       	push	r28
    3666:	cd b7       	in	r28, 0x3d	; 61
    3668:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    366a:	81 e0       	ldi	r24, 0x01	; 1
    366c:	0e 94 2c 12 	call	0x2458	; 0x2458 <LCD_sendCommand>
}
    3670:	cf 91       	pop	r28
    3672:	df 91       	pop	r29
    3674:	08 95       	ret

00003676 <__vector_19>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_COMP_vect)
{
    3676:	1f 92       	push	r1
    3678:	0f 92       	push	r0
    367a:	0f b6       	in	r0, 0x3f	; 63
    367c:	0f 92       	push	r0
    367e:	11 24       	eor	r1, r1
    3680:	2f 93       	push	r18
    3682:	3f 93       	push	r19
    3684:	4f 93       	push	r20
    3686:	5f 93       	push	r21
    3688:	6f 93       	push	r22
    368a:	7f 93       	push	r23
    368c:	8f 93       	push	r24
    368e:	9f 93       	push	r25
    3690:	af 93       	push	r26
    3692:	bf 93       	push	r27
    3694:	ef 93       	push	r30
    3696:	ff 93       	push	r31
    3698:	df 93       	push	r29
    369a:	cf 93       	push	r28
    369c:	cd b7       	in	r28, 0x3d	; 61
    369e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    36a0:	80 91 98 00 	lds	r24, 0x0098
    36a4:	90 91 99 00 	lds	r25, 0x0099
    36a8:	00 97       	sbiw	r24, 0x00	; 0
    36aa:	29 f0       	breq	.+10     	; 0x36b6 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    36ac:	e0 91 98 00 	lds	r30, 0x0098
    36b0:	f0 91 99 00 	lds	r31, 0x0099
    36b4:	09 95       	icall
	}
}
    36b6:	cf 91       	pop	r28
    36b8:	df 91       	pop	r29
    36ba:	ff 91       	pop	r31
    36bc:	ef 91       	pop	r30
    36be:	bf 91       	pop	r27
    36c0:	af 91       	pop	r26
    36c2:	9f 91       	pop	r25
    36c4:	8f 91       	pop	r24
    36c6:	7f 91       	pop	r23
    36c8:	6f 91       	pop	r22
    36ca:	5f 91       	pop	r21
    36cc:	4f 91       	pop	r20
    36ce:	3f 91       	pop	r19
    36d0:	2f 91       	pop	r18
    36d2:	0f 90       	pop	r0
    36d4:	0f be       	out	0x3f, r0	; 63
    36d6:	0f 90       	pop	r0
    36d8:	1f 90       	pop	r1
    36da:	18 95       	reti

000036dc <__vector_9>:

ISR(TIMER0_OVF_vect)
{
    36dc:	1f 92       	push	r1
    36de:	0f 92       	push	r0
    36e0:	0f b6       	in	r0, 0x3f	; 63
    36e2:	0f 92       	push	r0
    36e4:	11 24       	eor	r1, r1
    36e6:	2f 93       	push	r18
    36e8:	3f 93       	push	r19
    36ea:	4f 93       	push	r20
    36ec:	5f 93       	push	r21
    36ee:	6f 93       	push	r22
    36f0:	7f 93       	push	r23
    36f2:	8f 93       	push	r24
    36f4:	9f 93       	push	r25
    36f6:	af 93       	push	r26
    36f8:	bf 93       	push	r27
    36fa:	ef 93       	push	r30
    36fc:	ff 93       	push	r31
    36fe:	df 93       	push	r29
    3700:	cf 93       	push	r28
    3702:	cd b7       	in	r28, 0x3d	; 61
    3704:	de b7       	in	r29, 0x3e	; 62
 	if(g_callBackPtr != NULL_PTR)
    3706:	80 91 98 00 	lds	r24, 0x0098
    370a:	90 91 99 00 	lds	r25, 0x0099
    370e:	00 97       	sbiw	r24, 0x00	; 0
    3710:	29 f0       	breq	.+10     	; 0x371c <__vector_9+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3712:	e0 91 98 00 	lds	r30, 0x0098
    3716:	f0 91 99 00 	lds	r31, 0x0099
    371a:	09 95       	icall
	}
}
    371c:	cf 91       	pop	r28
    371e:	df 91       	pop	r29
    3720:	ff 91       	pop	r31
    3722:	ef 91       	pop	r30
    3724:	bf 91       	pop	r27
    3726:	af 91       	pop	r26
    3728:	9f 91       	pop	r25
    372a:	8f 91       	pop	r24
    372c:	7f 91       	pop	r23
    372e:	6f 91       	pop	r22
    3730:	5f 91       	pop	r21
    3732:	4f 91       	pop	r20
    3734:	3f 91       	pop	r19
    3736:	2f 91       	pop	r18
    3738:	0f 90       	pop	r0
    373a:	0f be       	out	0x3f, r0	; 63
    373c:	0f 90       	pop	r0
    373e:	1f 90       	pop	r1
    3740:	18 95       	reti

00003742 <Timer0_Init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer0_Init(const Timer0_ConfigType * Config_Ptr)
{
    3742:	df 93       	push	r29
    3744:	cf 93       	push	r28
    3746:	00 d0       	rcall	.+0      	; 0x3748 <Timer0_Init+0x6>
    3748:	cd b7       	in	r28, 0x3d	; 61
    374a:	de b7       	in	r29, 0x3e	; 62
    374c:	9a 83       	std	Y+2, r25	; 0x02
    374e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TCCR0,FOC0); /*non PWM mode*/
    3750:	a3 e5       	ldi	r26, 0x53	; 83
    3752:	b0 e0       	ldi	r27, 0x00	; 0
    3754:	e3 e5       	ldi	r30, 0x53	; 83
    3756:	f0 e0       	ldi	r31, 0x00	; 0
    3758:	80 81       	ld	r24, Z
    375a:	80 68       	ori	r24, 0x80	; 128
    375c:	8c 93       	st	X, r24
	if((Config_Ptr->timer_mode)==NORMAL_MODE)
    375e:	e9 81       	ldd	r30, Y+1	; 0x01
    3760:	fa 81       	ldd	r31, Y+2	; 0x02
    3762:	80 81       	ld	r24, Z
    3764:	88 23       	and	r24, r24
    3766:	b1 f4       	brne	.+44     	; 0x3794 <Timer0_Init+0x52>
	{
		/*choosing normal mode*/
		CLEAR_BIT(TCCR0,WGM00);
    3768:	a3 e5       	ldi	r26, 0x53	; 83
    376a:	b0 e0       	ldi	r27, 0x00	; 0
    376c:	e3 e5       	ldi	r30, 0x53	; 83
    376e:	f0 e0       	ldi	r31, 0x00	; 0
    3770:	80 81       	ld	r24, Z
    3772:	8f 7b       	andi	r24, 0xBF	; 191
    3774:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,WGM01);
    3776:	a3 e5       	ldi	r26, 0x53	; 83
    3778:	b0 e0       	ldi	r27, 0x00	; 0
    377a:	e3 e5       	ldi	r30, 0x53	; 83
    377c:	f0 e0       	ldi	r31, 0x00	; 0
    377e:	80 81       	ld	r24, Z
    3780:	87 7f       	andi	r24, 0xF7	; 247
    3782:	8c 93       	st	X, r24
		/*enable normal mode interrupt*/
		SET_BIT(TIMSK,TOIE0);
    3784:	a9 e5       	ldi	r26, 0x59	; 89
    3786:	b0 e0       	ldi	r27, 0x00	; 0
    3788:	e9 e5       	ldi	r30, 0x59	; 89
    378a:	f0 e0       	ldi	r31, 0x00	; 0
    378c:	80 81       	ld	r24, Z
    378e:	81 60       	ori	r24, 0x01	; 1
    3790:	8c 93       	st	X, r24
    3792:	20 c0       	rjmp	.+64     	; 0x37d4 <Timer0_Init+0x92>
	}
	else if((Config_Ptr->timer_mode)==COMPARE_MODE)
    3794:	e9 81       	ldd	r30, Y+1	; 0x01
    3796:	fa 81       	ldd	r31, Y+2	; 0x02
    3798:	80 81       	ld	r24, Z
    379a:	81 30       	cpi	r24, 0x01	; 1
    379c:	d9 f4       	brne	.+54     	; 0x37d4 <Timer0_Init+0x92>
	{
		/*choosing compare mode*/
		CLEAR_BIT(TCCR0,WGM00);
    379e:	a3 e5       	ldi	r26, 0x53	; 83
    37a0:	b0 e0       	ldi	r27, 0x00	; 0
    37a2:	e3 e5       	ldi	r30, 0x53	; 83
    37a4:	f0 e0       	ldi	r31, 0x00	; 0
    37a6:	80 81       	ld	r24, Z
    37a8:	8f 7b       	andi	r24, 0xBF	; 191
    37aa:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    37ac:	a3 e5       	ldi	r26, 0x53	; 83
    37ae:	b0 e0       	ldi	r27, 0x00	; 0
    37b0:	e3 e5       	ldi	r30, 0x53	; 83
    37b2:	f0 e0       	ldi	r31, 0x00	; 0
    37b4:	80 81       	ld	r24, Z
    37b6:	88 60       	ori	r24, 0x08	; 8
    37b8:	8c 93       	st	X, r24
		/*enable compare mode interrupt*/
		SET_BIT(TIMSK,OCIE0);
    37ba:	a9 e5       	ldi	r26, 0x59	; 89
    37bc:	b0 e0       	ldi	r27, 0x00	; 0
    37be:	e9 e5       	ldi	r30, 0x59	; 89
    37c0:	f0 e0       	ldi	r31, 0x00	; 0
    37c2:	80 81       	ld	r24, Z
    37c4:	82 60       	ori	r24, 0x02	; 2
    37c6:	8c 93       	st	X, r24
		/*Compare value of the timer*/
		OCR0 = Config_Ptr->compare_value;
    37c8:	ac e5       	ldi	r26, 0x5C	; 92
    37ca:	b0 e0       	ldi	r27, 0x00	; 0
    37cc:	e9 81       	ldd	r30, Y+1	; 0x01
    37ce:	fa 81       	ldd	r31, Y+2	; 0x02
    37d0:	83 81       	ldd	r24, Z+3	; 0x03
    37d2:	8c 93       	st	X, r24
	}
	/*Normal port operation, OC0 disconnected*/
	CLEAR_BIT(TCCR0,COM00);
    37d4:	a3 e5       	ldi	r26, 0x53	; 83
    37d6:	b0 e0       	ldi	r27, 0x00	; 0
    37d8:	e3 e5       	ldi	r30, 0x53	; 83
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	80 81       	ld	r24, Z
    37de:	8f 7e       	andi	r24, 0xEF	; 239
    37e0:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,COM01);
    37e2:	a3 e5       	ldi	r26, 0x53	; 83
    37e4:	b0 e0       	ldi	r27, 0x00	; 0
    37e6:	e3 e5       	ldi	r30, 0x53	; 83
    37e8:	f0 e0       	ldi	r31, 0x00	; 0
    37ea:	80 81       	ld	r24, Z
    37ec:	8f 7d       	andi	r24, 0xDF	; 223
    37ee:	8c 93       	st	X, r24

	/*prescaler*/
	TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->prescaler);
    37f0:	a3 e5       	ldi	r26, 0x53	; 83
    37f2:	b0 e0       	ldi	r27, 0x00	; 0
    37f4:	e3 e5       	ldi	r30, 0x53	; 83
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	80 81       	ld	r24, Z
    37fa:	98 2f       	mov	r25, r24
    37fc:	98 7f       	andi	r25, 0xF8	; 248
    37fe:	e9 81       	ldd	r30, Y+1	; 0x01
    3800:	fa 81       	ldd	r31, Y+2	; 0x02
    3802:	81 81       	ldd	r24, Z+1	; 0x01
    3804:	89 2b       	or	r24, r25
    3806:	8c 93       	st	X, r24

	/*initial value of the timer*/
	TCNT0 = Config_Ptr->initial_value;
    3808:	a2 e5       	ldi	r26, 0x52	; 82
    380a:	b0 e0       	ldi	r27, 0x00	; 0
    380c:	e9 81       	ldd	r30, Y+1	; 0x01
    380e:	fa 81       	ldd	r31, Y+2	; 0x02
    3810:	82 81       	ldd	r24, Z+2	; 0x02
    3812:	8c 93       	st	X, r24


}
    3814:	0f 90       	pop	r0
    3816:	0f 90       	pop	r0
    3818:	cf 91       	pop	r28
    381a:	df 91       	pop	r29
    381c:	08 95       	ret

0000381e <Timer0_DeInit>:

void Timer0_DeInit(void)
{
    381e:	df 93       	push	r29
    3820:	cf 93       	push	r28
    3822:	cd b7       	in	r28, 0x3d	; 61
    3824:	de b7       	in	r29, 0x3e	; 62
	/*clear all the timer registers*/
	TCCR0=0;
    3826:	e3 e5       	ldi	r30, 0x53	; 83
    3828:	f0 e0       	ldi	r31, 0x00	; 0
    382a:	10 82       	st	Z, r1
	TCNT0=0;
    382c:	e2 e5       	ldi	r30, 0x52	; 82
    382e:	f0 e0       	ldi	r31, 0x00	; 0
    3830:	10 82       	st	Z, r1
	OCR0=0;
    3832:	ec e5       	ldi	r30, 0x5C	; 92
    3834:	f0 e0       	ldi	r31, 0x00	; 0
    3836:	10 82       	st	Z, r1
    /*Disable the interrupts*/
	CLEAR_BIT(TIMSK,OCIE0);
    3838:	a9 e5       	ldi	r26, 0x59	; 89
    383a:	b0 e0       	ldi	r27, 0x00	; 0
    383c:	e9 e5       	ldi	r30, 0x59	; 89
    383e:	f0 e0       	ldi	r31, 0x00	; 0
    3840:	80 81       	ld	r24, Z
    3842:	8d 7f       	andi	r24, 0xFD	; 253
    3844:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE0);
    3846:	a9 e5       	ldi	r26, 0x59	; 89
    3848:	b0 e0       	ldi	r27, 0x00	; 0
    384a:	e9 e5       	ldi	r30, 0x59	; 89
    384c:	f0 e0       	ldi	r31, 0x00	; 0
    384e:	80 81       	ld	r24, Z
    3850:	8e 7f       	andi	r24, 0xFE	; 254
    3852:	8c 93       	st	X, r24
}
    3854:	cf 91       	pop	r28
    3856:	df 91       	pop	r29
    3858:	08 95       	ret

0000385a <Timer0_setCallBack>:

void Timer0_setCallBack(void(*a_ptr)(void))
{
    385a:	df 93       	push	r29
    385c:	cf 93       	push	r28
    385e:	00 d0       	rcall	.+0      	; 0x3860 <Timer0_setCallBack+0x6>
    3860:	cd b7       	in	r28, 0x3d	; 61
    3862:	de b7       	in	r29, 0x3e	; 62
    3864:	9a 83       	std	Y+2, r25	; 0x02
    3866:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    3868:	89 81       	ldd	r24, Y+1	; 0x01
    386a:	9a 81       	ldd	r25, Y+2	; 0x02
    386c:	90 93 99 00 	sts	0x0099, r25
    3870:	80 93 98 00 	sts	0x0098, r24
}
    3874:	0f 90       	pop	r0
    3876:	0f 90       	pop	r0
    3878:	cf 91       	pop	r28
    387a:	df 91       	pop	r29
    387c:	08 95       	ret

0000387e <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    387e:	0f 93       	push	r16
    3880:	1f 93       	push	r17
    3882:	df 93       	push	r29
    3884:	cf 93       	push	r28
    3886:	00 d0       	rcall	.+0      	; 0x3888 <TWI_init+0xa>
    3888:	cd b7       	in	r28, 0x3d	; 61
    388a:	de b7       	in	r29, 0x3e	; 62
    388c:	9a 83       	std	Y+2, r25	; 0x02
    388e:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = (4000000/Config_Ptr->bit_rate)-8;
    3890:	00 e2       	ldi	r16, 0x20	; 32
    3892:	10 e0       	ldi	r17, 0x00	; 0
    3894:	e9 81       	ldd	r30, Y+1	; 0x01
    3896:	fa 81       	ldd	r31, Y+2	; 0x02
    3898:	21 81       	ldd	r18, Z+1	; 0x01
    389a:	32 81       	ldd	r19, Z+2	; 0x02
    389c:	43 81       	ldd	r20, Z+3	; 0x03
    389e:	54 81       	ldd	r21, Z+4	; 0x04
    38a0:	80 e0       	ldi	r24, 0x00	; 0
    38a2:	99 e0       	ldi	r25, 0x09	; 9
    38a4:	ad e3       	ldi	r26, 0x3D	; 61
    38a6:	b0 e0       	ldi	r27, 0x00	; 0
    38a8:	bc 01       	movw	r22, r24
    38aa:	cd 01       	movw	r24, r26
    38ac:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <__udivmodsi4>
    38b0:	da 01       	movw	r26, r20
    38b2:	c9 01       	movw	r24, r18
    38b4:	88 50       	subi	r24, 0x08	; 8
    38b6:	f8 01       	movw	r30, r16
    38b8:	80 83       	st	Z, r24
	TWSR = 0x00;
    38ba:	e1 e2       	ldi	r30, 0x21	; 33
    38bc:	f0 e0       	ldi	r31, 0x00	; 0
    38be:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    //TWAR = 0b00000010; // my address = 0x01 :)
	TWAR =Config_Ptr->address;
    38c0:	a2 e2       	ldi	r26, 0x22	; 34
    38c2:	b0 e0       	ldi	r27, 0x00	; 0
    38c4:	e9 81       	ldd	r30, Y+1	; 0x01
    38c6:	fa 81       	ldd	r31, Y+2	; 0x02
    38c8:	80 81       	ld	r24, Z
    38ca:	8c 93       	st	X, r24
    TWCR = (1<<TWEN); /* enable TWI */
    38cc:	e6 e5       	ldi	r30, 0x56	; 86
    38ce:	f0 e0       	ldi	r31, 0x00	; 0
    38d0:	84 e0       	ldi	r24, 0x04	; 4
    38d2:	80 83       	st	Z, r24
}
    38d4:	0f 90       	pop	r0
    38d6:	0f 90       	pop	r0
    38d8:	cf 91       	pop	r28
    38da:	df 91       	pop	r29
    38dc:	1f 91       	pop	r17
    38de:	0f 91       	pop	r16
    38e0:	08 95       	ret

000038e2 <TWI_start>:

void TWI_start(void)
{
    38e2:	df 93       	push	r29
    38e4:	cf 93       	push	r28
    38e6:	cd b7       	in	r28, 0x3d	; 61
    38e8:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    38ea:	e6 e5       	ldi	r30, 0x56	; 86
    38ec:	f0 e0       	ldi	r31, 0x00	; 0
    38ee:	84 ea       	ldi	r24, 0xA4	; 164
    38f0:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    38f2:	e6 e5       	ldi	r30, 0x56	; 86
    38f4:	f0 e0       	ldi	r31, 0x00	; 0
    38f6:	80 81       	ld	r24, Z
    38f8:	88 23       	and	r24, r24
    38fa:	dc f7       	brge	.-10     	; 0x38f2 <TWI_start+0x10>
}
    38fc:	cf 91       	pop	r28
    38fe:	df 91       	pop	r29
    3900:	08 95       	ret

00003902 <TWI_stop>:

void TWI_stop(void)
{
    3902:	df 93       	push	r29
    3904:	cf 93       	push	r28
    3906:	cd b7       	in	r28, 0x3d	; 61
    3908:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    390a:	e6 e5       	ldi	r30, 0x56	; 86
    390c:	f0 e0       	ldi	r31, 0x00	; 0
    390e:	84 e9       	ldi	r24, 0x94	; 148
    3910:	80 83       	st	Z, r24
}
    3912:	cf 91       	pop	r28
    3914:	df 91       	pop	r29
    3916:	08 95       	ret

00003918 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    3918:	df 93       	push	r29
    391a:	cf 93       	push	r28
    391c:	0f 92       	push	r0
    391e:	cd b7       	in	r28, 0x3d	; 61
    3920:	de b7       	in	r29, 0x3e	; 62
    3922:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    3924:	e3 e2       	ldi	r30, 0x23	; 35
    3926:	f0 e0       	ldi	r31, 0x00	; 0
    3928:	89 81       	ldd	r24, Y+1	; 0x01
    392a:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    392c:	e6 e5       	ldi	r30, 0x56	; 86
    392e:	f0 e0       	ldi	r31, 0x00	; 0
    3930:	84 e8       	ldi	r24, 0x84	; 132
    3932:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3934:	e6 e5       	ldi	r30, 0x56	; 86
    3936:	f0 e0       	ldi	r31, 0x00	; 0
    3938:	80 81       	ld	r24, Z
    393a:	88 23       	and	r24, r24
    393c:	dc f7       	brge	.-10     	; 0x3934 <TWI_writeByte+0x1c>
}
    393e:	0f 90       	pop	r0
    3940:	cf 91       	pop	r28
    3942:	df 91       	pop	r29
    3944:	08 95       	ret

00003946 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    3946:	df 93       	push	r29
    3948:	cf 93       	push	r28
    394a:	cd b7       	in	r28, 0x3d	; 61
    394c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    394e:	e6 e5       	ldi	r30, 0x56	; 86
    3950:	f0 e0       	ldi	r31, 0x00	; 0
    3952:	84 ec       	ldi	r24, 0xC4	; 196
    3954:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3956:	e6 e5       	ldi	r30, 0x56	; 86
    3958:	f0 e0       	ldi	r31, 0x00	; 0
    395a:	80 81       	ld	r24, Z
    395c:	88 23       	and	r24, r24
    395e:	dc f7       	brge	.-10     	; 0x3956 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    3960:	e3 e2       	ldi	r30, 0x23	; 35
    3962:	f0 e0       	ldi	r31, 0x00	; 0
    3964:	80 81       	ld	r24, Z
}
    3966:	cf 91       	pop	r28
    3968:	df 91       	pop	r29
    396a:	08 95       	ret

0000396c <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    396c:	df 93       	push	r29
    396e:	cf 93       	push	r28
    3970:	cd b7       	in	r28, 0x3d	; 61
    3972:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    3974:	e6 e5       	ldi	r30, 0x56	; 86
    3976:	f0 e0       	ldi	r31, 0x00	; 0
    3978:	84 e8       	ldi	r24, 0x84	; 132
    397a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    397c:	e6 e5       	ldi	r30, 0x56	; 86
    397e:	f0 e0       	ldi	r31, 0x00	; 0
    3980:	80 81       	ld	r24, Z
    3982:	88 23       	and	r24, r24
    3984:	dc f7       	brge	.-10     	; 0x397c <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    3986:	e3 e2       	ldi	r30, 0x23	; 35
    3988:	f0 e0       	ldi	r31, 0x00	; 0
    398a:	80 81       	ld	r24, Z
}
    398c:	cf 91       	pop	r28
    398e:	df 91       	pop	r29
    3990:	08 95       	ret

00003992 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    3992:	df 93       	push	r29
    3994:	cf 93       	push	r28
    3996:	0f 92       	push	r0
    3998:	cd b7       	in	r28, 0x3d	; 61
    399a:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    399c:	e1 e2       	ldi	r30, 0x21	; 33
    399e:	f0 e0       	ldi	r31, 0x00	; 0
    39a0:	80 81       	ld	r24, Z
    39a2:	88 7f       	andi	r24, 0xF8	; 248
    39a4:	89 83       	std	Y+1, r24	; 0x01
    return status;
    39a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    39a8:	0f 90       	pop	r0
    39aa:	cf 91       	pop	r28
    39ac:	df 91       	pop	r29
    39ae:	08 95       	ret

000039b0 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    39b0:	df 93       	push	r29
    39b2:	cf 93       	push	r28
    39b4:	00 d0       	rcall	.+0      	; 0x39b6 <UART_init+0x6>
    39b6:	00 d0       	rcall	.+0      	; 0x39b8 <UART_init+0x8>
    39b8:	cd b7       	in	r28, 0x3d	; 61
    39ba:	de b7       	in	r29, 0x3e	; 62
    39bc:	9c 83       	std	Y+4, r25	; 0x04
    39be:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    39c0:	1a 82       	std	Y+2, r1	; 0x02
    39c2:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    39c4:	eb e2       	ldi	r30, 0x2B	; 43
    39c6:	f0 e0       	ldi	r31, 0x00	; 0
    39c8:	82 e0       	ldi	r24, 0x02	; 2
    39ca:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 *************************/
	if((Config_Ptr->data_bits_number)>Eight){
    39cc:	eb 81       	ldd	r30, Y+3	; 0x03
    39ce:	fc 81       	ldd	r31, Y+4	; 0x04
    39d0:	82 81       	ldd	r24, Z+2	; 0x02
    39d2:	84 30       	cpi	r24, 0x04	; 4
    39d4:	28 f0       	brcs	.+10     	; 0x39e0 <UART_init+0x30>
		UCSRB=(1<<RXEN) | (1<<TXEN) | (1<<UCSZ2);
    39d6:	ea e2       	ldi	r30, 0x2A	; 42
    39d8:	f0 e0       	ldi	r31, 0x00	; 0
    39da:	8c e1       	ldi	r24, 0x1C	; 28
    39dc:	80 83       	st	Z, r24
    39de:	04 c0       	rjmp	.+8      	; 0x39e8 <UART_init+0x38>
	}
	else{
		UCSRB = (1<<RXEN) | (1<<TXEN);
    39e0:	ea e2       	ldi	r30, 0x2A	; 42
    39e2:	f0 e0       	ldi	r31, 0x00	; 0
    39e4:	88 e1       	ldi	r24, 0x18	; 24
    39e6:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 *************************/
	UCSRC=0;
    39e8:	e0 e4       	ldi	r30, 0x40	; 64
    39ea:	f0 e0       	ldi	r31, 0x00	; 0
    39ec:	10 82       	st	Z, r1
	UCSRC=(UCSRC&0xf9) | (Config_Ptr->data_bits_number<<1);
    39ee:	a0 e4       	ldi	r26, 0x40	; 64
    39f0:	b0 e0       	ldi	r27, 0x00	; 0
    39f2:	e0 e4       	ldi	r30, 0x40	; 64
    39f4:	f0 e0       	ldi	r31, 0x00	; 0
    39f6:	80 81       	ld	r24, Z
    39f8:	28 2f       	mov	r18, r24
    39fa:	29 7f       	andi	r18, 0xF9	; 249
    39fc:	eb 81       	ldd	r30, Y+3	; 0x03
    39fe:	fc 81       	ldd	r31, Y+4	; 0x04
    3a00:	82 81       	ldd	r24, Z+2	; 0x02
    3a02:	88 2f       	mov	r24, r24
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	88 0f       	add	r24, r24
    3a08:	99 1f       	adc	r25, r25
    3a0a:	82 2b       	or	r24, r18
    3a0c:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xf7)|((Config_Ptr->stop_bit)<<3);
    3a0e:	a0 e4       	ldi	r26, 0x40	; 64
    3a10:	b0 e0       	ldi	r27, 0x00	; 0
    3a12:	e0 e4       	ldi	r30, 0x40	; 64
    3a14:	f0 e0       	ldi	r31, 0x00	; 0
    3a16:	80 81       	ld	r24, Z
    3a18:	28 2f       	mov	r18, r24
    3a1a:	27 7f       	andi	r18, 0xF7	; 247
    3a1c:	eb 81       	ldd	r30, Y+3	; 0x03
    3a1e:	fc 81       	ldd	r31, Y+4	; 0x04
    3a20:	81 81       	ldd	r24, Z+1	; 0x01
    3a22:	88 2f       	mov	r24, r24
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	88 0f       	add	r24, r24
    3a28:	99 1f       	adc	r25, r25
    3a2a:	88 0f       	add	r24, r24
    3a2c:	99 1f       	adc	r25, r25
    3a2e:	88 0f       	add	r24, r24
    3a30:	99 1f       	adc	r25, r25
    3a32:	82 2b       	or	r24, r18
    3a34:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xcf)|((Config_Ptr->parity)<<4);
    3a36:	a0 e4       	ldi	r26, 0x40	; 64
    3a38:	b0 e0       	ldi	r27, 0x00	; 0
    3a3a:	e0 e4       	ldi	r30, 0x40	; 64
    3a3c:	f0 e0       	ldi	r31, 0x00	; 0
    3a3e:	80 81       	ld	r24, Z
    3a40:	28 2f       	mov	r18, r24
    3a42:	2f 7c       	andi	r18, 0xCF	; 207
    3a44:	eb 81       	ldd	r30, Y+3	; 0x03
    3a46:	fc 81       	ldd	r31, Y+4	; 0x04
    3a48:	80 81       	ld	r24, Z
    3a4a:	88 2f       	mov	r24, r24
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	82 95       	swap	r24
    3a50:	92 95       	swap	r25
    3a52:	90 7f       	andi	r25, 0xF0	; 240
    3a54:	98 27       	eor	r25, r24
    3a56:	80 7f       	andi	r24, 0xF0	; 240
    3a58:	98 27       	eor	r25, r24
    3a5a:	82 2b       	or	r24, r18
    3a5c:	8c 93       	st	X, r24
	UCSRC = UCSRC|(1<<URSEL);
    3a5e:	a0 e4       	ldi	r26, 0x40	; 64
    3a60:	b0 e0       	ldi	r27, 0x00	; 0
    3a62:	e0 e4       	ldi	r30, 0x40	; 64
    3a64:	f0 e0       	ldi	r31, 0x00	; 0
    3a66:	80 81       	ld	r24, Z
    3a68:	80 68       	ori	r24, 0x80	; 128
    3a6a:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) *8UL))) - 1);
    3a6c:	eb 81       	ldd	r30, Y+3	; 0x03
    3a6e:	fc 81       	ldd	r31, Y+4	; 0x04
    3a70:	83 81       	ldd	r24, Z+3	; 0x03
    3a72:	94 81       	ldd	r25, Z+4	; 0x04
    3a74:	a5 81       	ldd	r26, Z+5	; 0x05
    3a76:	b6 81       	ldd	r27, Z+6	; 0x06
    3a78:	88 0f       	add	r24, r24
    3a7a:	99 1f       	adc	r25, r25
    3a7c:	aa 1f       	adc	r26, r26
    3a7e:	bb 1f       	adc	r27, r27
    3a80:	88 0f       	add	r24, r24
    3a82:	99 1f       	adc	r25, r25
    3a84:	aa 1f       	adc	r26, r26
    3a86:	bb 1f       	adc	r27, r27
    3a88:	88 0f       	add	r24, r24
    3a8a:	99 1f       	adc	r25, r25
    3a8c:	aa 1f       	adc	r26, r26
    3a8e:	bb 1f       	adc	r27, r27
    3a90:	9c 01       	movw	r18, r24
    3a92:	ad 01       	movw	r20, r26
    3a94:	80 e4       	ldi	r24, 0x40	; 64
    3a96:	92 e4       	ldi	r25, 0x42	; 66
    3a98:	af e0       	ldi	r26, 0x0F	; 15
    3a9a:	b0 e0       	ldi	r27, 0x00	; 0
    3a9c:	bc 01       	movw	r22, r24
    3a9e:	cd 01       	movw	r24, r26
    3aa0:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <__udivmodsi4>
    3aa4:	da 01       	movw	r26, r20
    3aa6:	c9 01       	movw	r24, r18
    3aa8:	01 97       	sbiw	r24, 0x01	; 1
    3aaa:	9a 83       	std	Y+2, r25	; 0x02
    3aac:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3aae:	e0 e4       	ldi	r30, 0x40	; 64
    3ab0:	f0 e0       	ldi	r31, 0x00	; 0
    3ab2:	89 81       	ldd	r24, Y+1	; 0x01
    3ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab6:	89 2f       	mov	r24, r25
    3ab8:	99 27       	eor	r25, r25
    3aba:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3abc:	e9 e2       	ldi	r30, 0x29	; 41
    3abe:	f0 e0       	ldi	r31, 0x00	; 0
    3ac0:	89 81       	ldd	r24, Y+1	; 0x01
    3ac2:	80 83       	st	Z, r24
}
    3ac4:	0f 90       	pop	r0
    3ac6:	0f 90       	pop	r0
    3ac8:	0f 90       	pop	r0
    3aca:	0f 90       	pop	r0
    3acc:	cf 91       	pop	r28
    3ace:	df 91       	pop	r29
    3ad0:	08 95       	ret

00003ad2 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3ad2:	df 93       	push	r29
    3ad4:	cf 93       	push	r28
    3ad6:	0f 92       	push	r0
    3ad8:	cd b7       	in	r28, 0x3d	; 61
    3ada:	de b7       	in	r29, 0x3e	; 62
    3adc:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3ade:	eb e2       	ldi	r30, 0x2B	; 43
    3ae0:	f0 e0       	ldi	r31, 0x00	; 0
    3ae2:	80 81       	ld	r24, Z
    3ae4:	88 2f       	mov	r24, r24
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	80 72       	andi	r24, 0x20	; 32
    3aea:	90 70       	andi	r25, 0x00	; 0
    3aec:	00 97       	sbiw	r24, 0x00	; 0
    3aee:	b9 f3       	breq	.-18     	; 0x3ade <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3af0:	ec e2       	ldi	r30, 0x2C	; 44
    3af2:	f0 e0       	ldi	r31, 0x00	; 0
    3af4:	89 81       	ldd	r24, Y+1	; 0x01
    3af6:	80 83       	st	Z, r24
	/********* Another Method *********
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	***********************/
}
    3af8:	0f 90       	pop	r0
    3afa:	cf 91       	pop	r28
    3afc:	df 91       	pop	r29
    3afe:	08 95       	ret

00003b00 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3b00:	df 93       	push	r29
    3b02:	cf 93       	push	r28
    3b04:	cd b7       	in	r28, 0x3d	; 61
    3b06:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3b08:	eb e2       	ldi	r30, 0x2B	; 43
    3b0a:	f0 e0       	ldi	r31, 0x00	; 0
    3b0c:	80 81       	ld	r24, Z
    3b0e:	88 23       	and	r24, r24
    3b10:	dc f7       	brge	.-10     	; 0x3b08 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3b12:	ec e2       	ldi	r30, 0x2C	; 44
    3b14:	f0 e0       	ldi	r31, 0x00	; 0
    3b16:	80 81       	ld	r24, Z
}
    3b18:	cf 91       	pop	r28
    3b1a:	df 91       	pop	r29
    3b1c:	08 95       	ret

00003b1e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3b1e:	df 93       	push	r29
    3b20:	cf 93       	push	r28
    3b22:	00 d0       	rcall	.+0      	; 0x3b24 <UART_sendString+0x6>
    3b24:	0f 92       	push	r0
    3b26:	cd b7       	in	r28, 0x3d	; 61
    3b28:	de b7       	in	r29, 0x3e	; 62
    3b2a:	9b 83       	std	Y+3, r25	; 0x03
    3b2c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3b2e:	19 82       	std	Y+1, r1	; 0x01
    3b30:	0e c0       	rjmp	.+28     	; 0x3b4e <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3b32:	89 81       	ldd	r24, Y+1	; 0x01
    3b34:	28 2f       	mov	r18, r24
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	8a 81       	ldd	r24, Y+2	; 0x02
    3b3a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b3c:	fc 01       	movw	r30, r24
    3b3e:	e2 0f       	add	r30, r18
    3b40:	f3 1f       	adc	r31, r19
    3b42:	80 81       	ld	r24, Z
    3b44:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <UART_sendByte>
		i++;
    3b48:	89 81       	ldd	r24, Y+1	; 0x01
    3b4a:	8f 5f       	subi	r24, 0xFF	; 255
    3b4c:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3b4e:	89 81       	ldd	r24, Y+1	; 0x01
    3b50:	28 2f       	mov	r18, r24
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	8a 81       	ldd	r24, Y+2	; 0x02
    3b56:	9b 81       	ldd	r25, Y+3	; 0x03
    3b58:	fc 01       	movw	r30, r24
    3b5a:	e2 0f       	add	r30, r18
    3b5c:	f3 1f       	adc	r31, r19
    3b5e:	80 81       	ld	r24, Z
    3b60:	88 23       	and	r24, r24
    3b62:	39 f7       	brne	.-50     	; 0x3b32 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	***********************/
}
    3b64:	0f 90       	pop	r0
    3b66:	0f 90       	pop	r0
    3b68:	0f 90       	pop	r0
    3b6a:	cf 91       	pop	r28
    3b6c:	df 91       	pop	r29
    3b6e:	08 95       	ret

00003b70 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3b70:	0f 93       	push	r16
    3b72:	1f 93       	push	r17
    3b74:	df 93       	push	r29
    3b76:	cf 93       	push	r28
    3b78:	00 d0       	rcall	.+0      	; 0x3b7a <UART_receiveString+0xa>
    3b7a:	0f 92       	push	r0
    3b7c:	cd b7       	in	r28, 0x3d	; 61
    3b7e:	de b7       	in	r29, 0x3e	; 62
    3b80:	9b 83       	std	Y+3, r25	; 0x03
    3b82:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3b84:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3b86:	89 81       	ldd	r24, Y+1	; 0x01
    3b88:	28 2f       	mov	r18, r24
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b8e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b90:	8c 01       	movw	r16, r24
    3b92:	02 0f       	add	r16, r18
    3b94:	13 1f       	adc	r17, r19
    3b96:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <UART_recieveByte>
    3b9a:	f8 01       	movw	r30, r16
    3b9c:	80 83       	st	Z, r24
    3b9e:	0f c0       	rjmp	.+30     	; 0x3bbe <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3ba0:	89 81       	ldd	r24, Y+1	; 0x01
    3ba2:	8f 5f       	subi	r24, 0xFF	; 255
    3ba4:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3ba6:	89 81       	ldd	r24, Y+1	; 0x01
    3ba8:	28 2f       	mov	r18, r24
    3baa:	30 e0       	ldi	r19, 0x00	; 0
    3bac:	8a 81       	ldd	r24, Y+2	; 0x02
    3bae:	9b 81       	ldd	r25, Y+3	; 0x03
    3bb0:	8c 01       	movw	r16, r24
    3bb2:	02 0f       	add	r16, r18
    3bb4:	13 1f       	adc	r17, r19
    3bb6:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <UART_recieveByte>
    3bba:	f8 01       	movw	r30, r16
    3bbc:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3bbe:	89 81       	ldd	r24, Y+1	; 0x01
    3bc0:	28 2f       	mov	r18, r24
    3bc2:	30 e0       	ldi	r19, 0x00	; 0
    3bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc6:	9b 81       	ldd	r25, Y+3	; 0x03
    3bc8:	fc 01       	movw	r30, r24
    3bca:	e2 0f       	add	r30, r18
    3bcc:	f3 1f       	adc	r31, r19
    3bce:	80 81       	ld	r24, Z
    3bd0:	83 32       	cpi	r24, 0x23	; 35
    3bd2:	31 f7       	brne	.-52     	; 0x3ba0 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3bd4:	89 81       	ldd	r24, Y+1	; 0x01
    3bd6:	28 2f       	mov	r18, r24
    3bd8:	30 e0       	ldi	r19, 0x00	; 0
    3bda:	8a 81       	ldd	r24, Y+2	; 0x02
    3bdc:	9b 81       	ldd	r25, Y+3	; 0x03
    3bde:	fc 01       	movw	r30, r24
    3be0:	e2 0f       	add	r30, r18
    3be2:	f3 1f       	adc	r31, r19
    3be4:	10 82       	st	Z, r1
}
    3be6:	0f 90       	pop	r0
    3be8:	0f 90       	pop	r0
    3bea:	0f 90       	pop	r0
    3bec:	cf 91       	pop	r28
    3bee:	df 91       	pop	r29
    3bf0:	1f 91       	pop	r17
    3bf2:	0f 91       	pop	r16
    3bf4:	08 95       	ret

00003bf6 <__udivmodsi4>:
    3bf6:	a1 e2       	ldi	r26, 0x21	; 33
    3bf8:	1a 2e       	mov	r1, r26
    3bfa:	aa 1b       	sub	r26, r26
    3bfc:	bb 1b       	sub	r27, r27
    3bfe:	fd 01       	movw	r30, r26
    3c00:	0d c0       	rjmp	.+26     	; 0x3c1c <__udivmodsi4_ep>

00003c02 <__udivmodsi4_loop>:
    3c02:	aa 1f       	adc	r26, r26
    3c04:	bb 1f       	adc	r27, r27
    3c06:	ee 1f       	adc	r30, r30
    3c08:	ff 1f       	adc	r31, r31
    3c0a:	a2 17       	cp	r26, r18
    3c0c:	b3 07       	cpc	r27, r19
    3c0e:	e4 07       	cpc	r30, r20
    3c10:	f5 07       	cpc	r31, r21
    3c12:	20 f0       	brcs	.+8      	; 0x3c1c <__udivmodsi4_ep>
    3c14:	a2 1b       	sub	r26, r18
    3c16:	b3 0b       	sbc	r27, r19
    3c18:	e4 0b       	sbc	r30, r20
    3c1a:	f5 0b       	sbc	r31, r21

00003c1c <__udivmodsi4_ep>:
    3c1c:	66 1f       	adc	r22, r22
    3c1e:	77 1f       	adc	r23, r23
    3c20:	88 1f       	adc	r24, r24
    3c22:	99 1f       	adc	r25, r25
    3c24:	1a 94       	dec	r1
    3c26:	69 f7       	brne	.-38     	; 0x3c02 <__udivmodsi4_loop>
    3c28:	60 95       	com	r22
    3c2a:	70 95       	com	r23
    3c2c:	80 95       	com	r24
    3c2e:	90 95       	com	r25
    3c30:	9b 01       	movw	r18, r22
    3c32:	ac 01       	movw	r20, r24
    3c34:	bd 01       	movw	r22, r26
    3c36:	cf 01       	movw	r24, r30
    3c38:	08 95       	ret

00003c3a <__prologue_saves__>:
    3c3a:	2f 92       	push	r2
    3c3c:	3f 92       	push	r3
    3c3e:	4f 92       	push	r4
    3c40:	5f 92       	push	r5
    3c42:	6f 92       	push	r6
    3c44:	7f 92       	push	r7
    3c46:	8f 92       	push	r8
    3c48:	9f 92       	push	r9
    3c4a:	af 92       	push	r10
    3c4c:	bf 92       	push	r11
    3c4e:	cf 92       	push	r12
    3c50:	df 92       	push	r13
    3c52:	ef 92       	push	r14
    3c54:	ff 92       	push	r15
    3c56:	0f 93       	push	r16
    3c58:	1f 93       	push	r17
    3c5a:	cf 93       	push	r28
    3c5c:	df 93       	push	r29
    3c5e:	cd b7       	in	r28, 0x3d	; 61
    3c60:	de b7       	in	r29, 0x3e	; 62
    3c62:	ca 1b       	sub	r28, r26
    3c64:	db 0b       	sbc	r29, r27
    3c66:	0f b6       	in	r0, 0x3f	; 63
    3c68:	f8 94       	cli
    3c6a:	de bf       	out	0x3e, r29	; 62
    3c6c:	0f be       	out	0x3f, r0	; 63
    3c6e:	cd bf       	out	0x3d, r28	; 61
    3c70:	09 94       	ijmp

00003c72 <__epilogue_restores__>:
    3c72:	2a 88       	ldd	r2, Y+18	; 0x12
    3c74:	39 88       	ldd	r3, Y+17	; 0x11
    3c76:	48 88       	ldd	r4, Y+16	; 0x10
    3c78:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c7a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c7c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c7e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c80:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c82:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c84:	b9 84       	ldd	r11, Y+9	; 0x09
    3c86:	c8 84       	ldd	r12, Y+8	; 0x08
    3c88:	df 80       	ldd	r13, Y+7	; 0x07
    3c8a:	ee 80       	ldd	r14, Y+6	; 0x06
    3c8c:	fd 80       	ldd	r15, Y+5	; 0x05
    3c8e:	0c 81       	ldd	r16, Y+4	; 0x04
    3c90:	1b 81       	ldd	r17, Y+3	; 0x03
    3c92:	aa 81       	ldd	r26, Y+2	; 0x02
    3c94:	b9 81       	ldd	r27, Y+1	; 0x01
    3c96:	ce 0f       	add	r28, r30
    3c98:	d1 1d       	adc	r29, r1
    3c9a:	0f b6       	in	r0, 0x3f	; 63
    3c9c:	f8 94       	cli
    3c9e:	de bf       	out	0x3e, r29	; 62
    3ca0:	0f be       	out	0x3f, r0	; 63
    3ca2:	cd bf       	out	0x3d, r28	; 61
    3ca4:	ed 01       	movw	r28, r26
    3ca6:	08 95       	ret

00003ca8 <itoa>:
    3ca8:	fb 01       	movw	r30, r22
    3caa:	9f 01       	movw	r18, r30
    3cac:	e8 94       	clt
    3cae:	42 30       	cpi	r20, 0x02	; 2
    3cb0:	c4 f0       	brlt	.+48     	; 0x3ce2 <itoa+0x3a>
    3cb2:	45 32       	cpi	r20, 0x25	; 37
    3cb4:	b4 f4       	brge	.+44     	; 0x3ce2 <itoa+0x3a>
    3cb6:	4a 30       	cpi	r20, 0x0A	; 10
    3cb8:	29 f4       	brne	.+10     	; 0x3cc4 <itoa+0x1c>
    3cba:	97 fb       	bst	r25, 7
    3cbc:	1e f4       	brtc	.+6      	; 0x3cc4 <itoa+0x1c>
    3cbe:	90 95       	com	r25
    3cc0:	81 95       	neg	r24
    3cc2:	9f 4f       	sbci	r25, 0xFF	; 255
    3cc4:	64 2f       	mov	r22, r20
    3cc6:	77 27       	eor	r23, r23
    3cc8:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <__udivmodhi4>
    3ccc:	80 5d       	subi	r24, 0xD0	; 208
    3cce:	8a 33       	cpi	r24, 0x3A	; 58
    3cd0:	0c f0       	brlt	.+2      	; 0x3cd4 <itoa+0x2c>
    3cd2:	89 5d       	subi	r24, 0xD9	; 217
    3cd4:	81 93       	st	Z+, r24
    3cd6:	cb 01       	movw	r24, r22
    3cd8:	00 97       	sbiw	r24, 0x00	; 0
    3cda:	a1 f7       	brne	.-24     	; 0x3cc4 <itoa+0x1c>
    3cdc:	16 f4       	brtc	.+4      	; 0x3ce2 <itoa+0x3a>
    3cde:	5d e2       	ldi	r21, 0x2D	; 45
    3ce0:	51 93       	st	Z+, r21
    3ce2:	10 82       	st	Z, r1
    3ce4:	c9 01       	movw	r24, r18
    3ce6:	0c 94 75 1e 	jmp	0x3cea	; 0x3cea <strrev>

00003cea <strrev>:
    3cea:	dc 01       	movw	r26, r24
    3cec:	fc 01       	movw	r30, r24
    3cee:	67 2f       	mov	r22, r23
    3cf0:	71 91       	ld	r23, Z+
    3cf2:	77 23       	and	r23, r23
    3cf4:	e1 f7       	brne	.-8      	; 0x3cee <strrev+0x4>
    3cf6:	32 97       	sbiw	r30, 0x02	; 2
    3cf8:	04 c0       	rjmp	.+8      	; 0x3d02 <strrev+0x18>
    3cfa:	7c 91       	ld	r23, X
    3cfc:	6d 93       	st	X+, r22
    3cfe:	70 83       	st	Z, r23
    3d00:	62 91       	ld	r22, -Z
    3d02:	ae 17       	cp	r26, r30
    3d04:	bf 07       	cpc	r27, r31
    3d06:	c8 f3       	brcs	.-14     	; 0x3cfa <strrev+0x10>
    3d08:	08 95       	ret

00003d0a <__udivmodhi4>:
    3d0a:	aa 1b       	sub	r26, r26
    3d0c:	bb 1b       	sub	r27, r27
    3d0e:	51 e1       	ldi	r21, 0x11	; 17
    3d10:	07 c0       	rjmp	.+14     	; 0x3d20 <__udivmodhi4_ep>

00003d12 <__udivmodhi4_loop>:
    3d12:	aa 1f       	adc	r26, r26
    3d14:	bb 1f       	adc	r27, r27
    3d16:	a6 17       	cp	r26, r22
    3d18:	b7 07       	cpc	r27, r23
    3d1a:	10 f0       	brcs	.+4      	; 0x3d20 <__udivmodhi4_ep>
    3d1c:	a6 1b       	sub	r26, r22
    3d1e:	b7 0b       	sbc	r27, r23

00003d20 <__udivmodhi4_ep>:
    3d20:	88 1f       	adc	r24, r24
    3d22:	99 1f       	adc	r25, r25
    3d24:	5a 95       	dec	r21
    3d26:	a9 f7       	brne	.-22     	; 0x3d12 <__udivmodhi4_loop>
    3d28:	80 95       	com	r24
    3d2a:	90 95       	com	r25
    3d2c:	bc 01       	movw	r22, r24
    3d2e:	cd 01       	movw	r24, r26
    3d30:	08 95       	ret

00003d32 <_exit>:
    3d32:	f8 94       	cli

00003d34 <__stop_program>:
    3d34:	ff cf       	rjmp	.-2      	; 0x3d34 <__stop_program>
