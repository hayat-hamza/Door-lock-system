
MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003dc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  00003dc6  00003e5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080018c  0080018c  00003f86  2**0
                  ALLOC
  3 .stab         000039a8  00000000  00000000  00003f88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001567  00000000  00000000  00007930  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008e97  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00009037  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00009229  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b634  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c9ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000db90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000dd50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000e046  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e9b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b6 1b 	jmp	0x376c	; 0x376c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ec       	ldi	r30, 0xC6	; 198
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3a       	cpi	r26, 0xA0	; 160
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 e1 1e 	jmp	0x3dc2	; 0x3dc2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 65 1e 	jmp	0x3cca	; 0x3cca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e8       	ldi	r26, 0x82	; 130
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 81 1e 	jmp	0x3d02	; 0x3d02 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 71 1e 	jmp	0x3ce2	; 0x3ce2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8d 1e 	jmp	0x3d1a	; 0x3d1a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 71 1e 	jmp	0x3ce2	; 0x3ce2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8d 1e 	jmp	0x3d1a	; 0x3d1a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 65 1e 	jmp	0x3cca	; 0x3cca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	82 e8       	ldi	r24, 0x82	; 130
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 81 1e 	jmp	0x3d02	; 0x3d02 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6d 1e 	jmp	0x3cda	; 0x3cda <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e8       	ldi	r22, 0x82	; 130
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 89 1e 	jmp	0x3d12	; 0x3d12 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 71 1e 	jmp	0x3ce2	; 0x3ce2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 8d 1e 	jmp	0x3d1a	; 0x3d1a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 71 1e 	jmp	0x3ce2	; 0x3ce2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 8d 1e 	jmp	0x3d1a	; 0x3d1a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 71 1e 	jmp	0x3ce2	; 0x3ce2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 8d 1e 	jmp	0x3d1a	; 0x3d1a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 75 1e 	jmp	0x3cea	; 0x3cea <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 91 1e 	jmp	0x3d22	; 0x3d22 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 6d 1e 	jmp	0x3cda	; 0x3cda <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 89 1e 	jmp	0x3d12	; 0x3d12 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e6 57       	subi	r30, 0x76	; 118
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <main>:
 * **********************function discription****************
 * incriments the count
 */
void Timer0_count1(void);
int main(void)
{
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	2d 97       	sbiw	r28, 0x0d	; 13
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	f8 94       	cli
     e40:	de bf       	out	0x3e, r29	; 62
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	cd bf       	out	0x3d, r28	; 61
	uint8 i=0;
     e46:	19 82       	std	Y+1, r1	; 0x01

	UART_ConfigType uart_configration;
	uart_configration.baud_rate=9600;		/*uart configration*/
     e48:	80 e8       	ldi	r24, 0x80	; 128
     e4a:	95 e2       	ldi	r25, 0x25	; 37
     e4c:	a0 e0       	ldi	r26, 0x00	; 0
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	8d 83       	std	Y+5, r24	; 0x05
     e52:	9e 83       	std	Y+6, r25	; 0x06
     e54:	af 83       	std	Y+7, r26	; 0x07
     e56:	b8 87       	std	Y+8, r27	; 0x08
	uart_configration.data_bits_number=Eight;
     e58:	83 e0       	ldi	r24, 0x03	; 3
     e5a:	8c 83       	std	Y+4, r24	; 0x04
	uart_configration.parity=Disabled;
     e5c:	1a 82       	std	Y+2, r1	; 0x02
	uart_configration.stop_bit=One;
     e5e:	1b 82       	std	Y+3, r1	; 0x03

	TWI_ConfigType twi_configration;		/*i2c configration*/
	twi_configration.address=0b00000010;
     e60:	82 e0       	ldi	r24, 0x02	; 2
     e62:	89 87       	std	Y+9, r24	; 0x09
	twi_configration.bit_rate=400000;
     e64:	80 e8       	ldi	r24, 0x80	; 128
     e66:	9a e1       	ldi	r25, 0x1A	; 26
     e68:	a6 e0       	ldi	r26, 0x06	; 6
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	8a 87       	std	Y+10, r24	; 0x0a
     e6e:	9b 87       	std	Y+11, r25	; 0x0b
     e70:	ac 87       	std	Y+12, r26	; 0x0c
     e72:	bd 87       	std	Y+13, r27	; 0x0d


	UART_init(&uart_configration);		/*uart configration*/
     e74:	ce 01       	movw	r24, r28
     e76:	02 96       	adiw	r24, 0x02	; 2
     e78:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <UART_init>
	TWI_init(&twi_configration);
     e7c:	ce 01       	movw	r24, r28
     e7e:	09 96       	adiw	r24, 0x09	; 9
     e80:	0e 94 87 1c 	call	0x390e	; 0x390e <TWI_init>

	timer0_configration.initial_value=0;
     e84:	10 92 94 01 	sts	0x0194, r1
	timer0_configration.timer_mode=NORMAL_MODE;
     e88:	10 92 92 01 	sts	0x0192, r1
	timer0_configration.prescaler=FCPU_1024;
     e8c:	85 e0       	ldi	r24, 0x05	; 5
     e8e:	80 93 93 01 	sts	0x0193, r24
	Timer0_setCallBack(Timer0_count1);
     e92:	84 e7       	ldi	r24, 0x74	; 116
     e94:	9d e0       	ldi	r25, 0x0D	; 13
     e96:	0e 94 75 1c 	call	0x38ea	; 0x38ea <Timer0_setCallBack>

	DcMotor_Init();
     e9a:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <DcMotor_Init>
	BUZZER_init();
     e9e:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <BUZZER_init>
	{

		/*
		 * receive password using uart
		 */
		i=0;
     ea2:	19 82       	std	Y+1, r1	; 0x01
     ea4:	0c c0       	rjmp	.+24     	; 0xebe <main+0x90>
		while(i<5){
			g_received_password[i]=UART_recieveByte();
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	08 2f       	mov	r16, r24
     eaa:	10 e0       	ldi	r17, 0x00	; 0
     eac:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <UART_recieveByte>
     eb0:	f8 01       	movw	r30, r16
     eb2:	ea 56       	subi	r30, 0x6A	; 106
     eb4:	fe 4f       	sbci	r31, 0xFE	; 254
     eb6:	80 83       	st	Z, r24
			i++;
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	8f 5f       	subi	r24, 0xFF	; 255
     ebc:	89 83       	std	Y+1, r24	; 0x01

		/*
		 * receive password using uart
		 */
		i=0;
		while(i<5){
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	85 30       	cpi	r24, 0x05	; 5
     ec2:	88 f3       	brcs	.-30     	; 0xea6 <main+0x78>
		}
		/*
		 * receive re entered password using uart
		 * and put into another array
		 */
		i=0;
     ec4:	19 82       	std	Y+1, r1	; 0x01
     ec6:	0c c0       	rjmp	.+24     	; 0xee0 <main+0xb2>
		while(i<5){
			g_received_re_entered_password[i]=UART_recieveByte();
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	08 2f       	mov	r16, r24
     ecc:	10 e0       	ldi	r17, 0x00	; 0
     ece:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <UART_recieveByte>
     ed2:	f8 01       	movw	r30, r16
     ed4:	e5 56       	subi	r30, 0x65	; 101
     ed6:	fe 4f       	sbci	r31, 0xFE	; 254
     ed8:	80 83       	st	Z, r24
			i++;
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	8f 5f       	subi	r24, 0xFF	; 255
     ede:	89 83       	std	Y+1, r24	; 0x01
		/*
		 * receive re entered password using uart
		 * and put into another array
		 */
		i=0;
		while(i<5){
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	85 30       	cpi	r24, 0x05	; 5
     ee4:	88 f3       	brcs	.-30     	; 0xec8 <main+0x9a>
			g_received_re_entered_password[i]=UART_recieveByte();
			i++;
		}
		rightOrWrongProccessing();
     ee6:	0e 94 11 08 	call	0x1022	; 0x1022 <rightOrWrongProccessing>
     eea:	db cf       	rjmp	.-74     	; 0xea2 <main+0x74>

00000eec <checkIfCorrect>:
	return 0;
}


uint8 checkIfCorrect(uint8 g_password[],uint8 re_entered_password[])
{
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <checkIfCorrect+0x6>
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <checkIfCorrect+0x8>
     ef4:	00 d0       	rcall	.+0      	; 0xef6 <checkIfCorrect+0xa>
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	9c 83       	std	Y+4, r25	; 0x04
     efc:	8b 83       	std	Y+3, r24	; 0x03
     efe:	7e 83       	std	Y+6, r23	; 0x06
     f00:	6d 83       	std	Y+5, r22	; 0x05
	uint8 count=0;
     f02:	1a 82       	std	Y+2, r1	; 0x02
	uint8 correctness=RIGHT;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	89 83       	std	Y+1, r24	; 0x01
     f08:	14 c0       	rjmp	.+40     	; 0xf32 <checkIfCorrect+0x46>
	/*
	 * if one of the chars is not correct then the password is wrong
	 */
	while(count<5){
		if(g_received_re_entered_password[count]!=g_received_password[count])
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	88 2f       	mov	r24, r24
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	fc 01       	movw	r30, r24
     f12:	e5 56       	subi	r30, 0x65	; 101
     f14:	fe 4f       	sbci	r31, 0xFE	; 254
     f16:	20 81       	ld	r18, Z
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	88 2f       	mov	r24, r24
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	fc 01       	movw	r30, r24
     f20:	ea 56       	subi	r30, 0x6A	; 106
     f22:	fe 4f       	sbci	r31, 0xFE	; 254
     f24:	80 81       	ld	r24, Z
     f26:	28 17       	cp	r18, r24
     f28:	09 f0       	breq	.+2      	; 0xf2c <checkIfCorrect+0x40>
		{
			correctness= WRONG;
     f2a:	19 82       	std	Y+1, r1	; 0x01
		}
		count++;
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	8f 5f       	subi	r24, 0xFF	; 255
     f30:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count=0;
	uint8 correctness=RIGHT;
	/*
	 * if one of the chars is not correct then the password is wrong
	 */
	while(count<5){
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	85 30       	cpi	r24, 0x05	; 5
     f36:	48 f3       	brcs	.-46     	; 0xf0a <checkIfCorrect+0x1e>
			correctness= WRONG;
		}
		count++;
	}

	return correctness;
     f38:	89 81       	ldd	r24, Y+1	; 0x01
}
     f3a:	26 96       	adiw	r28, 0x06	; 6
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <receivePasswordUsingUart>:
void receivePasswordUsingUart(uint8 received_pass[])
{
     f4c:	0f 93       	push	r16
     f4e:	1f 93       	push	r17
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	00 d0       	rcall	.+0      	; 0xf56 <receivePasswordUsingUart+0xa>
     f56:	0f 92       	push	r0
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	9b 83       	std	Y+3, r25	; 0x03
     f5e:	8a 83       	std	Y+2, r24	; 0x02
     f60:	0f c0       	rjmp	.+30     	; 0xf80 <receivePasswordUsingUart+0x34>
	uint8 count;
	while(count<5){
		received_pass[count]=UART_recieveByte();
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	9b 81       	ldd	r25, Y+3	; 0x03
     f6c:	8c 01       	movw	r16, r24
     f6e:	02 0f       	add	r16, r18
     f70:	13 1f       	adc	r17, r19
     f72:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <UART_recieveByte>
     f76:	f8 01       	movw	r30, r16
     f78:	80 83       	st	Z, r24
		count++;
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	8f 5f       	subi	r24, 0xFF	; 255
     f7e:	89 83       	std	Y+1, r24	; 0x01
	return correctness;
}
void receivePasswordUsingUart(uint8 received_pass[])
{
	uint8 count;
	while(count<5){
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	85 30       	cpi	r24, 0x05	; 5
     f84:	70 f3       	brcs	.-36     	; 0xf62 <receivePasswordUsingUart+0x16>
		received_pass[count]=UART_recieveByte();
		count++;
	}
}
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	08 95       	ret

00000f96 <savePassword>:

void savePassword(uint8 password[])
{
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <savePassword+0x6>
     f9c:	0f 92       	push	r0
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	9b 83       	std	Y+3, r25	; 0x03
     fa4:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * password is saved byte by byte
	 */
	uint8 i=0;
     fa6:	19 82       	std	Y+1, r1	; 0x01
     fa8:	11 c0       	rjmp	.+34     	; 0xfcc <savePassword+0x36>
	while(i<5)
	{
		EEPROM_writeByte(0x0311, password[i]); /* Write password in the external EEPROM */
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	9b 81       	ldd	r25, Y+3	; 0x03
     fb4:	fc 01       	movw	r30, r24
     fb6:	e2 0f       	add	r30, r18
     fb8:	f3 1f       	adc	r31, r19
     fba:	20 81       	ld	r18, Z
     fbc:	81 e1       	ldi	r24, 0x11	; 17
     fbe:	93 e0       	ldi	r25, 0x03	; 3
     fc0:	62 2f       	mov	r22, r18
     fc2:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <EEPROM_writeByte>
		i++;
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	8f 5f       	subi	r24, 0xFF	; 255
     fca:	89 83       	std	Y+1, r24	; 0x01
{
	/*
	 * password is saved byte by byte
	 */
	uint8 i=0;
	while(i<5)
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	85 30       	cpi	r24, 0x05	; 5
     fd0:	60 f3       	brcs	.-40     	; 0xfaa <savePassword+0x14>
		EEPROM_writeByte(0x0311, password[i]); /* Write password in the external EEPROM */
		i++;
	}


}
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <retreivePassword>:
void retreivePassword(uint8 password[])
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <retreivePassword+0x6>
     fe4:	0f 92       	push	r0
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	9b 83       	std	Y+3, r25	; 0x03
     fec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
     fee:	19 82       	std	Y+1, r1	; 0x01
     ff0:	0f c0       	rjmp	.+30     	; 0x1010 <retreivePassword+0x32>
	/*
	 * password is retrieved byte by byte
	 */
	while(i<5)
	{
		EEPROM_readByte(0x0311, &password[i]);  /* Read password from the external EEPROM */
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	9b 81       	ldd	r25, Y+3	; 0x03
     ffc:	28 0f       	add	r18, r24
     ffe:	39 1f       	adc	r19, r25
    1000:	81 e1       	ldi	r24, 0x11	; 17
    1002:	93 e0       	ldi	r25, 0x03	; 3
    1004:	b9 01       	movw	r22, r18
    1006:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <EEPROM_readByte>
		i++;
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	8f 5f       	subi	r24, 0xFF	; 255
    100e:	89 83       	std	Y+1, r24	; 0x01
{
	uint8 i=0;
	/*
	 * password is retrieved byte by byte
	 */
	while(i<5)
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	85 30       	cpi	r24, 0x05	; 5
    1014:	70 f3       	brcs	.-36     	; 0xff2 <retreivePassword+0x14>
	{
		EEPROM_readByte(0x0311, &password[i]);  /* Read password from the external EEPROM */
		i++;
	}
}
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <rightOrWrongProccessing>:

void rightOrWrongProccessing(void)
{
    1022:	0f 93       	push	r16
    1024:	1f 93       	push	r17
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	c3 57       	subi	r28, 0x73	; 115
    1030:	d0 40       	sbci	r29, 0x00	; 0
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
	uint8 pass_check;			/*checks if passwrod is right or wrong*/
	static uint8 trials=1;		/*the number of password trials that the user is allowed to make*/
	uint8 password_from_mem;			/*password retrieve from memory is stored here*/
	pass_check=checkIfCorrect(g_received_password,g_received_re_entered_password);	//compare
    103c:	86 e9       	ldi	r24, 0x96	; 150
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	2b e9       	ldi	r18, 0x9B	; 155
    1042:	31 e0       	ldi	r19, 0x01	; 1
    1044:	b9 01       	movw	r22, r18
    1046:	0e 94 76 07 	call	0xeec	; 0xeec <checkIfCorrect>
    104a:	fe 01       	movw	r30, r28
    104c:	ee 58       	subi	r30, 0x8E	; 142
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	80 83       	st	Z, r24

	if(pass_check==WRONG)
    1052:	fe 01       	movw	r30, r28
    1054:	ee 58       	subi	r30, 0x8E	; 142
    1056:	ff 4f       	sbci	r31, 0xFF	; 255
    1058:	80 81       	ld	r24, Z
    105a:	88 23       	and	r24, r24
    105c:	19 f4       	brne	.+6      	; 0x1064 <rightOrWrongProccessing+0x42>
	{
		/*
		 * W indicates wrong answer and that the password iis not saved in eeprom yet
		 */
		UART_sendByte('W');
    105e:	87 e5       	ldi	r24, 0x57	; 87
    1060:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <UART_sendByte>
	}
	if(pass_check==RIGHT)
    1064:	fe 01       	movw	r30, r28
    1066:	ee 58       	subi	r30, 0x8E	; 142
    1068:	ff 4f       	sbci	r31, 0xFF	; 255
    106a:	80 81       	ld	r24, Z
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	09 f0       	breq	.+2      	; 0x1072 <rightOrWrongProccessing+0x50>
    1070:	2f c5       	rjmp	.+2654   	; 0x1ad0 <rightOrWrongProccessing+0xaae>
	{
		savePassword(g_received_password);		/*save the password in eeprom*/
    1072:	86 e9       	ldi	r24, 0x96	; 150
    1074:	91 e0       	ldi	r25, 0x01	; 1
    1076:	0e 94 cb 07 	call	0xf96	; 0xf96 <savePassword>
		UART_sendByte('R');			/*R indicates that the password is right*/
    107a:	82 e5       	ldi	r24, 0x52	; 82
    107c:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <UART_sendByte>
    1080:	fe 01       	movw	r30, r28
    1082:	e3 59       	subi	r30, 0x93	; 147
    1084:	ff 4f       	sbci	r31, 0xFF	; 255
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	aa ef       	ldi	r26, 0xFA	; 250
    108c:	b3 e4       	ldi	r27, 0x43	; 67
    108e:	80 83       	st	Z, r24
    1090:	91 83       	std	Z+1, r25	; 0x01
    1092:	a2 83       	std	Z+2, r26	; 0x02
    1094:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1096:	8e 01       	movw	r16, r28
    1098:	07 59       	subi	r16, 0x97	; 151
    109a:	1f 4f       	sbci	r17, 0xFF	; 255
    109c:	fe 01       	movw	r30, r28
    109e:	e3 59       	subi	r30, 0x93	; 147
    10a0:	ff 4f       	sbci	r31, 0xFF	; 255
    10a2:	60 81       	ld	r22, Z
    10a4:	71 81       	ldd	r23, Z+1	; 0x01
    10a6:	82 81       	ldd	r24, Z+2	; 0x02
    10a8:	93 81       	ldd	r25, Z+3	; 0x03
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	4a e7       	ldi	r20, 0x7A	; 122
    10b0:	53 e4       	ldi	r21, 0x43	; 67
    10b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	f8 01       	movw	r30, r16
    10bc:	80 83       	st	Z, r24
    10be:	91 83       	std	Z+1, r25	; 0x01
    10c0:	a2 83       	std	Z+2, r26	; 0x02
    10c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10c4:	fe 01       	movw	r30, r28
    10c6:	e7 59       	subi	r30, 0x97	; 151
    10c8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ca:	60 81       	ld	r22, Z
    10cc:	71 81       	ldd	r23, Z+1	; 0x01
    10ce:	82 81       	ldd	r24, Z+2	; 0x02
    10d0:	93 81       	ldd	r25, Z+3	; 0x03
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	40 e8       	ldi	r20, 0x80	; 128
    10d8:	5f e3       	ldi	r21, 0x3F	; 63
    10da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10de:	88 23       	and	r24, r24
    10e0:	44 f4       	brge	.+16     	; 0x10f2 <rightOrWrongProccessing+0xd0>
		__ticks = 1;
    10e2:	fe 01       	movw	r30, r28
    10e4:	e9 59       	subi	r30, 0x99	; 153
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	91 83       	std	Z+1, r25	; 0x01
    10ee:	80 83       	st	Z, r24
    10f0:	64 c0       	rjmp	.+200    	; 0x11ba <rightOrWrongProccessing+0x198>
	else if (__tmp > 65535)
    10f2:	fe 01       	movw	r30, r28
    10f4:	e7 59       	subi	r30, 0x97	; 151
    10f6:	ff 4f       	sbci	r31, 0xFF	; 255
    10f8:	60 81       	ld	r22, Z
    10fa:	71 81       	ldd	r23, Z+1	; 0x01
    10fc:	82 81       	ldd	r24, Z+2	; 0x02
    10fe:	93 81       	ldd	r25, Z+3	; 0x03
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	3f ef       	ldi	r19, 0xFF	; 255
    1104:	4f e7       	ldi	r20, 0x7F	; 127
    1106:	57 e4       	ldi	r21, 0x47	; 71
    1108:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    110c:	18 16       	cp	r1, r24
    110e:	0c f0       	brlt	.+2      	; 0x1112 <rightOrWrongProccessing+0xf0>
    1110:	43 c0       	rjmp	.+134    	; 0x1198 <rightOrWrongProccessing+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1112:	fe 01       	movw	r30, r28
    1114:	e3 59       	subi	r30, 0x93	; 147
    1116:	ff 4f       	sbci	r31, 0xFF	; 255
    1118:	60 81       	ld	r22, Z
    111a:	71 81       	ldd	r23, Z+1	; 0x01
    111c:	82 81       	ldd	r24, Z+2	; 0x02
    111e:	93 81       	ldd	r25, Z+3	; 0x03
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	40 e2       	ldi	r20, 0x20	; 32
    1126:	51 e4       	ldi	r21, 0x41	; 65
    1128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	8e 01       	movw	r16, r28
    1132:	09 59       	subi	r16, 0x99	; 153
    1134:	1f 4f       	sbci	r17, 0xFF	; 255
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	f8 01       	movw	r30, r16
    1144:	91 83       	std	Z+1, r25	; 0x01
    1146:	80 83       	st	Z, r24
    1148:	1f c0       	rjmp	.+62     	; 0x1188 <rightOrWrongProccessing+0x166>
    114a:	fe 01       	movw	r30, r28
    114c:	eb 59       	subi	r30, 0x9B	; 155
    114e:	ff 4f       	sbci	r31, 0xFF	; 255
    1150:	89 e1       	ldi	r24, 0x19	; 25
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	91 83       	std	Z+1, r25	; 0x01
    1156:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1158:	fe 01       	movw	r30, r28
    115a:	eb 59       	subi	r30, 0x9B	; 155
    115c:	ff 4f       	sbci	r31, 0xFF	; 255
    115e:	80 81       	ld	r24, Z
    1160:	91 81       	ldd	r25, Z+1	; 0x01
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	f1 f7       	brne	.-4      	; 0x1162 <rightOrWrongProccessing+0x140>
    1166:	fe 01       	movw	r30, r28
    1168:	eb 59       	subi	r30, 0x9B	; 155
    116a:	ff 4f       	sbci	r31, 0xFF	; 255
    116c:	91 83       	std	Z+1, r25	; 0x01
    116e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1170:	de 01       	movw	r26, r28
    1172:	a9 59       	subi	r26, 0x99	; 153
    1174:	bf 4f       	sbci	r27, 0xFF	; 255
    1176:	fe 01       	movw	r30, r28
    1178:	e9 59       	subi	r30, 0x99	; 153
    117a:	ff 4f       	sbci	r31, 0xFF	; 255
    117c:	80 81       	ld	r24, Z
    117e:	91 81       	ldd	r25, Z+1	; 0x01
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	11 96       	adiw	r26, 0x01	; 1
    1184:	9c 93       	st	X, r25
    1186:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1188:	fe 01       	movw	r30, r28
    118a:	e9 59       	subi	r30, 0x99	; 153
    118c:	ff 4f       	sbci	r31, 0xFF	; 255
    118e:	80 81       	ld	r24, Z
    1190:	91 81       	ldd	r25, Z+1	; 0x01
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	d1 f6       	brne	.-76     	; 0x114a <rightOrWrongProccessing+0x128>
    1196:	27 c0       	rjmp	.+78     	; 0x11e6 <rightOrWrongProccessing+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1198:	8e 01       	movw	r16, r28
    119a:	09 59       	subi	r16, 0x99	; 153
    119c:	1f 4f       	sbci	r17, 0xFF	; 255
    119e:	fe 01       	movw	r30, r28
    11a0:	e7 59       	subi	r30, 0x97	; 151
    11a2:	ff 4f       	sbci	r31, 0xFF	; 255
    11a4:	60 81       	ld	r22, Z
    11a6:	71 81       	ldd	r23, Z+1	; 0x01
    11a8:	82 81       	ldd	r24, Z+2	; 0x02
    11aa:	93 81       	ldd	r25, Z+3	; 0x03
    11ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	f8 01       	movw	r30, r16
    11b6:	91 83       	std	Z+1, r25	; 0x01
    11b8:	80 83       	st	Z, r24
    11ba:	de 01       	movw	r26, r28
    11bc:	ad 59       	subi	r26, 0x9D	; 157
    11be:	bf 4f       	sbci	r27, 0xFF	; 255
    11c0:	fe 01       	movw	r30, r28
    11c2:	e9 59       	subi	r30, 0x99	; 153
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	80 81       	ld	r24, Z
    11c8:	91 81       	ldd	r25, Z+1	; 0x01
    11ca:	8d 93       	st	X+, r24
    11cc:	9c 93       	st	X, r25
    11ce:	fe 01       	movw	r30, r28
    11d0:	ed 59       	subi	r30, 0x9D	; 157
    11d2:	ff 4f       	sbci	r31, 0xFF	; 255
    11d4:	80 81       	ld	r24, Z
    11d6:	91 81       	ldd	r25, Z+1	; 0x01
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	f1 f7       	brne	.-4      	; 0x11d8 <rightOrWrongProccessing+0x1b6>
    11dc:	fe 01       	movw	r30, r28
    11de:	ed 59       	subi	r30, 0x9D	; 157
    11e0:	ff 4f       	sbci	r31, 0xFF	; 255
    11e2:	91 83       	std	Z+1, r25	; 0x01
    11e4:	80 83       	st	Z, r24
		_delay_ms(500);
		/*
		 * tell MCU1 to display this strings and take input from user
		 */
		UART_sendString("+:OpenDoor#");
    11e6:	80 e6       	ldi	r24, 0x60	; 96
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <UART_sendString>
    11ee:	fe 01       	movw	r30, r28
    11f0:	e1 5a       	subi	r30, 0xA1	; 161
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	aa ef       	ldi	r26, 0xFA	; 250
    11fa:	b3 e4       	ldi	r27, 0x43	; 67
    11fc:	80 83       	st	Z, r24
    11fe:	91 83       	std	Z+1, r25	; 0x01
    1200:	a2 83       	std	Z+2, r26	; 0x02
    1202:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1204:	8e 01       	movw	r16, r28
    1206:	05 5a       	subi	r16, 0xA5	; 165
    1208:	1f 4f       	sbci	r17, 0xFF	; 255
    120a:	fe 01       	movw	r30, r28
    120c:	e1 5a       	subi	r30, 0xA1	; 161
    120e:	ff 4f       	sbci	r31, 0xFF	; 255
    1210:	60 81       	ld	r22, Z
    1212:	71 81       	ldd	r23, Z+1	; 0x01
    1214:	82 81       	ldd	r24, Z+2	; 0x02
    1216:	93 81       	ldd	r25, Z+3	; 0x03
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	4a e7       	ldi	r20, 0x7A	; 122
    121e:	53 e4       	ldi	r21, 0x43	; 67
    1220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	f8 01       	movw	r30, r16
    122a:	80 83       	st	Z, r24
    122c:	91 83       	std	Z+1, r25	; 0x01
    122e:	a2 83       	std	Z+2, r26	; 0x02
    1230:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1232:	fe 01       	movw	r30, r28
    1234:	e5 5a       	subi	r30, 0xA5	; 165
    1236:	ff 4f       	sbci	r31, 0xFF	; 255
    1238:	60 81       	ld	r22, Z
    123a:	71 81       	ldd	r23, Z+1	; 0x01
    123c:	82 81       	ldd	r24, Z+2	; 0x02
    123e:	93 81       	ldd	r25, Z+3	; 0x03
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	40 e8       	ldi	r20, 0x80	; 128
    1246:	5f e3       	ldi	r21, 0x3F	; 63
    1248:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    124c:	88 23       	and	r24, r24
    124e:	44 f4       	brge	.+16     	; 0x1260 <rightOrWrongProccessing+0x23e>
		__ticks = 1;
    1250:	fe 01       	movw	r30, r28
    1252:	e7 5a       	subi	r30, 0xA7	; 167
    1254:	ff 4f       	sbci	r31, 0xFF	; 255
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	91 83       	std	Z+1, r25	; 0x01
    125c:	80 83       	st	Z, r24
    125e:	64 c0       	rjmp	.+200    	; 0x1328 <rightOrWrongProccessing+0x306>
	else if (__tmp > 65535)
    1260:	fe 01       	movw	r30, r28
    1262:	e5 5a       	subi	r30, 0xA5	; 165
    1264:	ff 4f       	sbci	r31, 0xFF	; 255
    1266:	60 81       	ld	r22, Z
    1268:	71 81       	ldd	r23, Z+1	; 0x01
    126a:	82 81       	ldd	r24, Z+2	; 0x02
    126c:	93 81       	ldd	r25, Z+3	; 0x03
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	3f ef       	ldi	r19, 0xFF	; 255
    1272:	4f e7       	ldi	r20, 0x7F	; 127
    1274:	57 e4       	ldi	r21, 0x47	; 71
    1276:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    127a:	18 16       	cp	r1, r24
    127c:	0c f0       	brlt	.+2      	; 0x1280 <rightOrWrongProccessing+0x25e>
    127e:	43 c0       	rjmp	.+134    	; 0x1306 <rightOrWrongProccessing+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1280:	fe 01       	movw	r30, r28
    1282:	e1 5a       	subi	r30, 0xA1	; 161
    1284:	ff 4f       	sbci	r31, 0xFF	; 255
    1286:	60 81       	ld	r22, Z
    1288:	71 81       	ldd	r23, Z+1	; 0x01
    128a:	82 81       	ldd	r24, Z+2	; 0x02
    128c:	93 81       	ldd	r25, Z+3	; 0x03
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e2       	ldi	r20, 0x20	; 32
    1294:	51 e4       	ldi	r21, 0x41	; 65
    1296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	8e 01       	movw	r16, r28
    12a0:	07 5a       	subi	r16, 0xA7	; 167
    12a2:	1f 4f       	sbci	r17, 0xFF	; 255
    12a4:	bc 01       	movw	r22, r24
    12a6:	cd 01       	movw	r24, r26
    12a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	f8 01       	movw	r30, r16
    12b2:	91 83       	std	Z+1, r25	; 0x01
    12b4:	80 83       	st	Z, r24
    12b6:	1f c0       	rjmp	.+62     	; 0x12f6 <rightOrWrongProccessing+0x2d4>
    12b8:	fe 01       	movw	r30, r28
    12ba:	e9 5a       	subi	r30, 0xA9	; 169
    12bc:	ff 4f       	sbci	r31, 0xFF	; 255
    12be:	89 e1       	ldi	r24, 0x19	; 25
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	91 83       	std	Z+1, r25	; 0x01
    12c4:	80 83       	st	Z, r24
    12c6:	fe 01       	movw	r30, r28
    12c8:	e9 5a       	subi	r30, 0xA9	; 169
    12ca:	ff 4f       	sbci	r31, 0xFF	; 255
    12cc:	80 81       	ld	r24, Z
    12ce:	91 81       	ldd	r25, Z+1	; 0x01
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	f1 f7       	brne	.-4      	; 0x12d0 <rightOrWrongProccessing+0x2ae>
    12d4:	fe 01       	movw	r30, r28
    12d6:	e9 5a       	subi	r30, 0xA9	; 169
    12d8:	ff 4f       	sbci	r31, 0xFF	; 255
    12da:	91 83       	std	Z+1, r25	; 0x01
    12dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12de:	de 01       	movw	r26, r28
    12e0:	a7 5a       	subi	r26, 0xA7	; 167
    12e2:	bf 4f       	sbci	r27, 0xFF	; 255
    12e4:	fe 01       	movw	r30, r28
    12e6:	e7 5a       	subi	r30, 0xA7	; 167
    12e8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ea:	80 81       	ld	r24, Z
    12ec:	91 81       	ldd	r25, Z+1	; 0x01
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	11 96       	adiw	r26, 0x01	; 1
    12f2:	9c 93       	st	X, r25
    12f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f6:	fe 01       	movw	r30, r28
    12f8:	e7 5a       	subi	r30, 0xA7	; 167
    12fa:	ff 4f       	sbci	r31, 0xFF	; 255
    12fc:	80 81       	ld	r24, Z
    12fe:	91 81       	ldd	r25, Z+1	; 0x01
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	d1 f6       	brne	.-76     	; 0x12b8 <rightOrWrongProccessing+0x296>
    1304:	27 c0       	rjmp	.+78     	; 0x1354 <rightOrWrongProccessing+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1306:	8e 01       	movw	r16, r28
    1308:	07 5a       	subi	r16, 0xA7	; 167
    130a:	1f 4f       	sbci	r17, 0xFF	; 255
    130c:	fe 01       	movw	r30, r28
    130e:	e5 5a       	subi	r30, 0xA5	; 165
    1310:	ff 4f       	sbci	r31, 0xFF	; 255
    1312:	60 81       	ld	r22, Z
    1314:	71 81       	ldd	r23, Z+1	; 0x01
    1316:	82 81       	ldd	r24, Z+2	; 0x02
    1318:	93 81       	ldd	r25, Z+3	; 0x03
    131a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	f8 01       	movw	r30, r16
    1324:	91 83       	std	Z+1, r25	; 0x01
    1326:	80 83       	st	Z, r24
    1328:	de 01       	movw	r26, r28
    132a:	ab 5a       	subi	r26, 0xAB	; 171
    132c:	bf 4f       	sbci	r27, 0xFF	; 255
    132e:	fe 01       	movw	r30, r28
    1330:	e7 5a       	subi	r30, 0xA7	; 167
    1332:	ff 4f       	sbci	r31, 0xFF	; 255
    1334:	80 81       	ld	r24, Z
    1336:	91 81       	ldd	r25, Z+1	; 0x01
    1338:	8d 93       	st	X+, r24
    133a:	9c 93       	st	X, r25
    133c:	fe 01       	movw	r30, r28
    133e:	eb 5a       	subi	r30, 0xAB	; 171
    1340:	ff 4f       	sbci	r31, 0xFF	; 255
    1342:	80 81       	ld	r24, Z
    1344:	91 81       	ldd	r25, Z+1	; 0x01
    1346:	01 97       	sbiw	r24, 0x01	; 1
    1348:	f1 f7       	brne	.-4      	; 0x1346 <rightOrWrongProccessing+0x324>
    134a:	fe 01       	movw	r30, r28
    134c:	eb 5a       	subi	r30, 0xAB	; 171
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	91 83       	std	Z+1, r25	; 0x01
    1352:	80 83       	st	Z, r24
		_delay_ms(500);
		UART_sendString("-:ChangePass#");
    1354:	8c e6       	ldi	r24, 0x6C	; 108
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <UART_sendString>
		uint8 byte;
		byte=UART_recieveByte();		/*receive + or - */
    135c:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <UART_recieveByte>
    1360:	fe 01       	movw	r30, r28
    1362:	ef 58       	subi	r30, 0x8F	; 143
    1364:	ff 4f       	sbci	r31, 0xFF	; 255
    1366:	80 83       	st	Z, r24
		/*
		 * if user wants to open door get saved pass from eeprom and
		 *  take the password from him
		 * the user gits to make only one mistake
		 */
		if(byte=='+')
    1368:	fe 01       	movw	r30, r28
    136a:	ef 58       	subi	r30, 0x8F	; 143
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	80 81       	ld	r24, Z
    1370:	8b 32       	cpi	r24, 0x2B	; 43
    1372:	09 f0       	breq	.+2      	; 0x1376 <rightOrWrongProccessing+0x354>
    1374:	08 c2       	rjmp	.+1040   	; 0x1786 <rightOrWrongProccessing+0x764>
		{
			retreivePassword(&password_from_mem);
    1376:	ce 01       	movw	r24, r28
    1378:	8d 58       	subi	r24, 0x8D	; 141
    137a:	9f 4f       	sbci	r25, 0xFF	; 255
    137c:	0e 94 ef 07 	call	0xfde	; 0xfde <retreivePassword>
			UART_sendByte(MC2_READY);
    1380:	80 e1       	ldi	r24, 0x10	; 16
    1382:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <UART_sendByte>
    1386:	fe 01       	movw	r30, r28
    1388:	ef 5a       	subi	r30, 0xAF	; 175
    138a:	ff 4f       	sbci	r31, 0xFF	; 255
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	90 e4       	ldi	r25, 0x40	; 64
    1390:	ac e1       	ldi	r26, 0x1C	; 28
    1392:	b6 e4       	ldi	r27, 0x46	; 70
    1394:	80 83       	st	Z, r24
    1396:	91 83       	std	Z+1, r25	; 0x01
    1398:	a2 83       	std	Z+2, r26	; 0x02
    139a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    139c:	8e 01       	movw	r16, r28
    139e:	03 5b       	subi	r16, 0xB3	; 179
    13a0:	1f 4f       	sbci	r17, 0xFF	; 255
    13a2:	fe 01       	movw	r30, r28
    13a4:	ef 5a       	subi	r30, 0xAF	; 175
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	60 81       	ld	r22, Z
    13aa:	71 81       	ldd	r23, Z+1	; 0x01
    13ac:	82 81       	ldd	r24, Z+2	; 0x02
    13ae:	93 81       	ldd	r25, Z+3	; 0x03
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	4a e7       	ldi	r20, 0x7A	; 122
    13b6:	53 e4       	ldi	r21, 0x43	; 67
    13b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	f8 01       	movw	r30, r16
    13c2:	80 83       	st	Z, r24
    13c4:	91 83       	std	Z+1, r25	; 0x01
    13c6:	a2 83       	std	Z+2, r26	; 0x02
    13c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13ca:	fe 01       	movw	r30, r28
    13cc:	e3 5b       	subi	r30, 0xB3	; 179
    13ce:	ff 4f       	sbci	r31, 0xFF	; 255
    13d0:	60 81       	ld	r22, Z
    13d2:	71 81       	ldd	r23, Z+1	; 0x01
    13d4:	82 81       	ldd	r24, Z+2	; 0x02
    13d6:	93 81       	ldd	r25, Z+3	; 0x03
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	40 e8       	ldi	r20, 0x80	; 128
    13de:	5f e3       	ldi	r21, 0x3F	; 63
    13e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13e4:	88 23       	and	r24, r24
    13e6:	44 f4       	brge	.+16     	; 0x13f8 <rightOrWrongProccessing+0x3d6>
		__ticks = 1;
    13e8:	fe 01       	movw	r30, r28
    13ea:	e5 5b       	subi	r30, 0xB5	; 181
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	91 83       	std	Z+1, r25	; 0x01
    13f4:	80 83       	st	Z, r24
    13f6:	64 c0       	rjmp	.+200    	; 0x14c0 <rightOrWrongProccessing+0x49e>
	else if (__tmp > 65535)
    13f8:	fe 01       	movw	r30, r28
    13fa:	e3 5b       	subi	r30, 0xB3	; 179
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	60 81       	ld	r22, Z
    1400:	71 81       	ldd	r23, Z+1	; 0x01
    1402:	82 81       	ldd	r24, Z+2	; 0x02
    1404:	93 81       	ldd	r25, Z+3	; 0x03
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	3f ef       	ldi	r19, 0xFF	; 255
    140a:	4f e7       	ldi	r20, 0x7F	; 127
    140c:	57 e4       	ldi	r21, 0x47	; 71
    140e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1412:	18 16       	cp	r1, r24
    1414:	0c f0       	brlt	.+2      	; 0x1418 <rightOrWrongProccessing+0x3f6>
    1416:	43 c0       	rjmp	.+134    	; 0x149e <rightOrWrongProccessing+0x47c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1418:	fe 01       	movw	r30, r28
    141a:	ef 5a       	subi	r30, 0xAF	; 175
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	60 81       	ld	r22, Z
    1420:	71 81       	ldd	r23, Z+1	; 0x01
    1422:	82 81       	ldd	r24, Z+2	; 0x02
    1424:	93 81       	ldd	r25, Z+3	; 0x03
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	40 e2       	ldi	r20, 0x20	; 32
    142c:	51 e4       	ldi	r21, 0x41	; 65
    142e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	8e 01       	movw	r16, r28
    1438:	05 5b       	subi	r16, 0xB5	; 181
    143a:	1f 4f       	sbci	r17, 0xFF	; 255
    143c:	bc 01       	movw	r22, r24
    143e:	cd 01       	movw	r24, r26
    1440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	f8 01       	movw	r30, r16
    144a:	91 83       	std	Z+1, r25	; 0x01
    144c:	80 83       	st	Z, r24
    144e:	1f c0       	rjmp	.+62     	; 0x148e <rightOrWrongProccessing+0x46c>
    1450:	fe 01       	movw	r30, r28
    1452:	e7 5b       	subi	r30, 0xB7	; 183
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	89 e1       	ldi	r24, 0x19	; 25
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	91 83       	std	Z+1, r25	; 0x01
    145c:	80 83       	st	Z, r24
    145e:	fe 01       	movw	r30, r28
    1460:	e7 5b       	subi	r30, 0xB7	; 183
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	80 81       	ld	r24, Z
    1466:	91 81       	ldd	r25, Z+1	; 0x01
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	f1 f7       	brne	.-4      	; 0x1468 <rightOrWrongProccessing+0x446>
    146c:	fe 01       	movw	r30, r28
    146e:	e7 5b       	subi	r30, 0xB7	; 183
    1470:	ff 4f       	sbci	r31, 0xFF	; 255
    1472:	91 83       	std	Z+1, r25	; 0x01
    1474:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1476:	de 01       	movw	r26, r28
    1478:	a5 5b       	subi	r26, 0xB5	; 181
    147a:	bf 4f       	sbci	r27, 0xFF	; 255
    147c:	fe 01       	movw	r30, r28
    147e:	e5 5b       	subi	r30, 0xB5	; 181
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	80 81       	ld	r24, Z
    1484:	91 81       	ldd	r25, Z+1	; 0x01
    1486:	01 97       	sbiw	r24, 0x01	; 1
    1488:	11 96       	adiw	r26, 0x01	; 1
    148a:	9c 93       	st	X, r25
    148c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    148e:	fe 01       	movw	r30, r28
    1490:	e5 5b       	subi	r30, 0xB5	; 181
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	80 81       	ld	r24, Z
    1496:	91 81       	ldd	r25, Z+1	; 0x01
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	d1 f6       	brne	.-76     	; 0x1450 <rightOrWrongProccessing+0x42e>
    149c:	27 c0       	rjmp	.+78     	; 0x14ec <rightOrWrongProccessing+0x4ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    149e:	8e 01       	movw	r16, r28
    14a0:	05 5b       	subi	r16, 0xB5	; 181
    14a2:	1f 4f       	sbci	r17, 0xFF	; 255
    14a4:	fe 01       	movw	r30, r28
    14a6:	e3 5b       	subi	r30, 0xB3	; 179
    14a8:	ff 4f       	sbci	r31, 0xFF	; 255
    14aa:	60 81       	ld	r22, Z
    14ac:	71 81       	ldd	r23, Z+1	; 0x01
    14ae:	82 81       	ldd	r24, Z+2	; 0x02
    14b0:	93 81       	ldd	r25, Z+3	; 0x03
    14b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	f8 01       	movw	r30, r16
    14bc:	91 83       	std	Z+1, r25	; 0x01
    14be:	80 83       	st	Z, r24
    14c0:	de 01       	movw	r26, r28
    14c2:	a9 5b       	subi	r26, 0xB9	; 185
    14c4:	bf 4f       	sbci	r27, 0xFF	; 255
    14c6:	fe 01       	movw	r30, r28
    14c8:	e5 5b       	subi	r30, 0xB5	; 181
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	80 81       	ld	r24, Z
    14ce:	91 81       	ldd	r25, Z+1	; 0x01
    14d0:	8d 93       	st	X+, r24
    14d2:	9c 93       	st	X, r25
    14d4:	fe 01       	movw	r30, r28
    14d6:	e9 5b       	subi	r30, 0xB9	; 185
    14d8:	ff 4f       	sbci	r31, 0xFF	; 255
    14da:	80 81       	ld	r24, Z
    14dc:	91 81       	ldd	r25, Z+1	; 0x01
    14de:	01 97       	sbiw	r24, 0x01	; 1
    14e0:	f1 f7       	brne	.-4      	; 0x14de <rightOrWrongProccessing+0x4bc>
    14e2:	fe 01       	movw	r30, r28
    14e4:	e9 5b       	subi	r30, 0xB9	; 185
    14e6:	ff 4f       	sbci	r31, 0xFF	; 255
    14e8:	91 83       	std	Z+1, r25	; 0x01
    14ea:	80 83       	st	Z, r24
			_delay_ms(10000);
			receivePasswordUsingUart(g_received_password);
    14ec:	86 e9       	ldi	r24, 0x96	; 150
    14ee:	91 e0       	ldi	r25, 0x01	; 1
    14f0:	0e 94 a6 07 	call	0xf4c	; 0xf4c <receivePasswordUsingUart>
			pass_check=checkIfCorrect(g_received_password,password_from_mem);
    14f4:	fe 01       	movw	r30, r28
    14f6:	ed 58       	subi	r30, 0x8D	; 141
    14f8:	ff 4f       	sbci	r31, 0xFF	; 255
    14fa:	80 81       	ld	r24, Z
    14fc:	88 2f       	mov	r24, r24
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	9c 01       	movw	r18, r24
    1502:	86 e9       	ldi	r24, 0x96	; 150
    1504:	91 e0       	ldi	r25, 0x01	; 1
    1506:	b9 01       	movw	r22, r18
    1508:	0e 94 76 07 	call	0xeec	; 0xeec <checkIfCorrect>
    150c:	fe 01       	movw	r30, r28
    150e:	ee 58       	subi	r30, 0x8E	; 142
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	80 83       	st	Z, r24
			if(pass_check==WRONG)
    1514:	fe 01       	movw	r30, r28
    1516:	ee 58       	subi	r30, 0x8E	; 142
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	80 81       	ld	r24, Z
    151c:	88 23       	and	r24, r24
    151e:	09 f0       	breq	.+2      	; 0x1522 <rightOrWrongProccessing+0x500>
    1520:	ae c0       	rjmp	.+348    	; 0x167e <rightOrWrongProccessing+0x65c>
				 * P indicates that password is wrong and
				 * the user can have one trial to enter corrent password
				 * also user will be asked to enter the password
				 * and wont be asked to re-enter it to confirm it
				 */
				UART_sendByte('P');
    1522:	80 e5       	ldi	r24, 0x50	; 80
    1524:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <UART_sendByte>
				UART_sendByte(MC2_READY);
    1528:	80 e1       	ldi	r24, 0x10	; 16
    152a:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <UART_sendByte>
    152e:	fe 01       	movw	r30, r28
    1530:	ed 5b       	subi	r30, 0xBD	; 189
    1532:	ff 4f       	sbci	r31, 0xFF	; 255
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	90 e4       	ldi	r25, 0x40	; 64
    1538:	ac e1       	ldi	r26, 0x1C	; 28
    153a:	b6 e4       	ldi	r27, 0x46	; 70
    153c:	80 83       	st	Z, r24
    153e:	91 83       	std	Z+1, r25	; 0x01
    1540:	a2 83       	std	Z+2, r26	; 0x02
    1542:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1544:	8e 01       	movw	r16, r28
    1546:	01 5c       	subi	r16, 0xC1	; 193
    1548:	1f 4f       	sbci	r17, 0xFF	; 255
    154a:	fe 01       	movw	r30, r28
    154c:	ed 5b       	subi	r30, 0xBD	; 189
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	60 81       	ld	r22, Z
    1552:	71 81       	ldd	r23, Z+1	; 0x01
    1554:	82 81       	ldd	r24, Z+2	; 0x02
    1556:	93 81       	ldd	r25, Z+3	; 0x03
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	4a e7       	ldi	r20, 0x7A	; 122
    155e:	53 e4       	ldi	r21, 0x43	; 67
    1560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	f8 01       	movw	r30, r16
    156a:	80 83       	st	Z, r24
    156c:	91 83       	std	Z+1, r25	; 0x01
    156e:	a2 83       	std	Z+2, r26	; 0x02
    1570:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1572:	fe 01       	movw	r30, r28
    1574:	ff 96       	adiw	r30, 0x3f	; 63
    1576:	60 81       	ld	r22, Z
    1578:	71 81       	ldd	r23, Z+1	; 0x01
    157a:	82 81       	ldd	r24, Z+2	; 0x02
    157c:	93 81       	ldd	r25, Z+3	; 0x03
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	40 e8       	ldi	r20, 0x80	; 128
    1584:	5f e3       	ldi	r21, 0x3F	; 63
    1586:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    158a:	88 23       	and	r24, r24
    158c:	2c f4       	brge	.+10     	; 0x1598 <rightOrWrongProccessing+0x576>
		__ticks = 1;
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	9e af       	std	Y+62, r25	; 0x3e
    1594:	8d af       	std	Y+61, r24	; 0x3d
    1596:	46 c0       	rjmp	.+140    	; 0x1624 <rightOrWrongProccessing+0x602>
	else if (__tmp > 65535)
    1598:	fe 01       	movw	r30, r28
    159a:	ff 96       	adiw	r30, 0x3f	; 63
    159c:	60 81       	ld	r22, Z
    159e:	71 81       	ldd	r23, Z+1	; 0x01
    15a0:	82 81       	ldd	r24, Z+2	; 0x02
    15a2:	93 81       	ldd	r25, Z+3	; 0x03
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	3f ef       	ldi	r19, 0xFF	; 255
    15a8:	4f e7       	ldi	r20, 0x7F	; 127
    15aa:	57 e4       	ldi	r21, 0x47	; 71
    15ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15b0:	18 16       	cp	r1, r24
    15b2:	64 f5       	brge	.+88     	; 0x160c <rightOrWrongProccessing+0x5ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b4:	fe 01       	movw	r30, r28
    15b6:	ed 5b       	subi	r30, 0xBD	; 189
    15b8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ba:	60 81       	ld	r22, Z
    15bc:	71 81       	ldd	r23, Z+1	; 0x01
    15be:	82 81       	ldd	r24, Z+2	; 0x02
    15c0:	93 81       	ldd	r25, Z+3	; 0x03
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	40 e2       	ldi	r20, 0x20	; 32
    15c8:	51 e4       	ldi	r21, 0x41	; 65
    15ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	bc 01       	movw	r22, r24
    15d4:	cd 01       	movw	r24, r26
    15d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	9e af       	std	Y+62, r25	; 0x3e
    15e0:	8d af       	std	Y+61, r24	; 0x3d
    15e2:	0f c0       	rjmp	.+30     	; 0x1602 <rightOrWrongProccessing+0x5e0>
    15e4:	89 e1       	ldi	r24, 0x19	; 25
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	9c af       	std	Y+60, r25	; 0x3c
    15ea:	8b af       	std	Y+59, r24	; 0x3b
    15ec:	8b ad       	ldd	r24, Y+59	; 0x3b
    15ee:	9c ad       	ldd	r25, Y+60	; 0x3c
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <rightOrWrongProccessing+0x5ce>
    15f4:	9c af       	std	Y+60, r25	; 0x3c
    15f6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    15fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	9e af       	std	Y+62, r25	; 0x3e
    1600:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1602:	8d ad       	ldd	r24, Y+61	; 0x3d
    1604:	9e ad       	ldd	r25, Y+62	; 0x3e
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	69 f7       	brne	.-38     	; 0x15e4 <rightOrWrongProccessing+0x5c2>
    160a:	16 c0       	rjmp	.+44     	; 0x1638 <rightOrWrongProccessing+0x616>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    160c:	fe 01       	movw	r30, r28
    160e:	ff 96       	adiw	r30, 0x3f	; 63
    1610:	60 81       	ld	r22, Z
    1612:	71 81       	ldd	r23, Z+1	; 0x01
    1614:	82 81       	ldd	r24, Z+2	; 0x02
    1616:	93 81       	ldd	r25, Z+3	; 0x03
    1618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	9e af       	std	Y+62, r25	; 0x3e
    1622:	8d af       	std	Y+61, r24	; 0x3d
    1624:	8d ad       	ldd	r24, Y+61	; 0x3d
    1626:	9e ad       	ldd	r25, Y+62	; 0x3e
    1628:	9a af       	std	Y+58, r25	; 0x3a
    162a:	89 af       	std	Y+57, r24	; 0x39
    162c:	89 ad       	ldd	r24, Y+57	; 0x39
    162e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	f1 f7       	brne	.-4      	; 0x1630 <rightOrWrongProccessing+0x60e>
    1634:	9a af       	std	Y+58, r25	; 0x3a
    1636:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(10000);
				receivePasswordUsingUart(g_received_password);
    1638:	86 e9       	ldi	r24, 0x96	; 150
    163a:	91 e0       	ldi	r25, 0x01	; 1
    163c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <receivePasswordUsingUart>
				pass_check=checkIfCorrect(g_received_password,password_from_mem);
    1640:	fe 01       	movw	r30, r28
    1642:	ed 58       	subi	r30, 0x8D	; 141
    1644:	ff 4f       	sbci	r31, 0xFF	; 255
    1646:	80 81       	ld	r24, Z
    1648:	88 2f       	mov	r24, r24
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	9c 01       	movw	r18, r24
    164e:	86 e9       	ldi	r24, 0x96	; 150
    1650:	91 e0       	ldi	r25, 0x01	; 1
    1652:	b9 01       	movw	r22, r18
    1654:	0e 94 76 07 	call	0xeec	; 0xeec <checkIfCorrect>
    1658:	fe 01       	movw	r30, r28
    165a:	ee 58       	subi	r30, 0x8E	; 142
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	80 83       	st	Z, r24
				/*
				 * if password is entered wrong on first trial then
				 * right on second trial open the door
				 * by turning the motor on cw and sending and indication'R ' to MC1
				 */
				 if(pass_check==RIGHT){
    1660:	fe 01       	movw	r30, r28
    1662:	ee 58       	subi	r30, 0x8E	; 142
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	80 81       	ld	r24, Z
    1668:	81 30       	cpi	r24, 0x01	; 1
    166a:	09 f0       	breq	.+2      	; 0x166e <rightOrWrongProccessing+0x64c>
    166c:	8c c0       	rjmp	.+280    	; 0x1786 <rightOrWrongProccessing+0x764>
					DcMotor_Rotate(CW,100);
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	64 e6       	ldi	r22, 0x64	; 100
    1672:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <DcMotor_Rotate>

					 UART_sendByte('R');
    1676:	82 e5       	ldi	r24, 0x52	; 82
    1678:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <UART_sendByte>
    167c:	84 c0       	rjmp	.+264    	; 0x1786 <rightOrWrongProccessing+0x764>
			}
			/*
			 * if password is right on first trial open the door
			 * by turning the motor on cw
			 */
			else if(pass_check==RIGHT){
    167e:	fe 01       	movw	r30, r28
    1680:	ee 58       	subi	r30, 0x8E	; 142
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	80 81       	ld	r24, Z
    1686:	81 30       	cpi	r24, 0x01	; 1
    1688:	09 f0       	breq	.+2      	; 0x168c <rightOrWrongProccessing+0x66a>
    168a:	7d c0       	rjmp	.+250    	; 0x1786 <rightOrWrongProccessing+0x764>
				DcMotor_Rotate(CW,100);
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	64 e6       	ldi	r22, 0x64	; 100
    1690:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <DcMotor_Rotate>
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	90 e4       	ldi	r25, 0x40	; 64
    1698:	ac e9       	ldi	r26, 0x9C	; 156
    169a:	b5 e4       	ldi	r27, 0x45	; 69
    169c:	8d ab       	std	Y+53, r24	; 0x35
    169e:	9e ab       	std	Y+54, r25	; 0x36
    16a0:	af ab       	std	Y+55, r26	; 0x37
    16a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a4:	6d a9       	ldd	r22, Y+53	; 0x35
    16a6:	7e a9       	ldd	r23, Y+54	; 0x36
    16a8:	8f a9       	ldd	r24, Y+55	; 0x37
    16aa:	98 ad       	ldd	r25, Y+56	; 0x38
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	4a e7       	ldi	r20, 0x7A	; 122
    16b2:	53 e4       	ldi	r21, 0x43	; 67
    16b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	89 ab       	std	Y+49, r24	; 0x31
    16be:	9a ab       	std	Y+50, r25	; 0x32
    16c0:	ab ab       	std	Y+51, r26	; 0x33
    16c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16c4:	69 a9       	ldd	r22, Y+49	; 0x31
    16c6:	7a a9       	ldd	r23, Y+50	; 0x32
    16c8:	8b a9       	ldd	r24, Y+51	; 0x33
    16ca:	9c a9       	ldd	r25, Y+52	; 0x34
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e8       	ldi	r20, 0x80	; 128
    16d2:	5f e3       	ldi	r21, 0x3F	; 63
    16d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16d8:	88 23       	and	r24, r24
    16da:	2c f4       	brge	.+10     	; 0x16e6 <rightOrWrongProccessing+0x6c4>
		__ticks = 1;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	98 ab       	std	Y+48, r25	; 0x30
    16e2:	8f a7       	std	Y+47, r24	; 0x2f
    16e4:	3f c0       	rjmp	.+126    	; 0x1764 <rightOrWrongProccessing+0x742>
	else if (__tmp > 65535)
    16e6:	69 a9       	ldd	r22, Y+49	; 0x31
    16e8:	7a a9       	ldd	r23, Y+50	; 0x32
    16ea:	8b a9       	ldd	r24, Y+51	; 0x33
    16ec:	9c a9       	ldd	r25, Y+52	; 0x34
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	3f ef       	ldi	r19, 0xFF	; 255
    16f2:	4f e7       	ldi	r20, 0x7F	; 127
    16f4:	57 e4       	ldi	r21, 0x47	; 71
    16f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16fa:	18 16       	cp	r1, r24
    16fc:	4c f5       	brge	.+82     	; 0x1750 <rightOrWrongProccessing+0x72e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fe:	6d a9       	ldd	r22, Y+53	; 0x35
    1700:	7e a9       	ldd	r23, Y+54	; 0x36
    1702:	8f a9       	ldd	r24, Y+55	; 0x37
    1704:	98 ad       	ldd	r25, Y+56	; 0x38
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	40 e2       	ldi	r20, 0x20	; 32
    170c:	51 e4       	ldi	r21, 0x41	; 65
    170e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	bc 01       	movw	r22, r24
    1718:	cd 01       	movw	r24, r26
    171a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	98 ab       	std	Y+48, r25	; 0x30
    1724:	8f a7       	std	Y+47, r24	; 0x2f
    1726:	0f c0       	rjmp	.+30     	; 0x1746 <rightOrWrongProccessing+0x724>
    1728:	89 e1       	ldi	r24, 0x19	; 25
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	9e a7       	std	Y+46, r25	; 0x2e
    172e:	8d a7       	std	Y+45, r24	; 0x2d
    1730:	8d a5       	ldd	r24, Y+45	; 0x2d
    1732:	9e a5       	ldd	r25, Y+46	; 0x2e
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	f1 f7       	brne	.-4      	; 0x1734 <rightOrWrongProccessing+0x712>
    1738:	9e a7       	std	Y+46, r25	; 0x2e
    173a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173c:	8f a5       	ldd	r24, Y+47	; 0x2f
    173e:	98 a9       	ldd	r25, Y+48	; 0x30
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	98 ab       	std	Y+48, r25	; 0x30
    1744:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1746:	8f a5       	ldd	r24, Y+47	; 0x2f
    1748:	98 a9       	ldd	r25, Y+48	; 0x30
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	69 f7       	brne	.-38     	; 0x1728 <rightOrWrongProccessing+0x706>
    174e:	14 c0       	rjmp	.+40     	; 0x1778 <rightOrWrongProccessing+0x756>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1750:	69 a9       	ldd	r22, Y+49	; 0x31
    1752:	7a a9       	ldd	r23, Y+50	; 0x32
    1754:	8b a9       	ldd	r24, Y+51	; 0x33
    1756:	9c a9       	ldd	r25, Y+52	; 0x34
    1758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	98 ab       	std	Y+48, r25	; 0x30
    1762:	8f a7       	std	Y+47, r24	; 0x2f
    1764:	8f a5       	ldd	r24, Y+47	; 0x2f
    1766:	98 a9       	ldd	r25, Y+48	; 0x30
    1768:	9c a7       	std	Y+44, r25	; 0x2c
    176a:	8b a7       	std	Y+43, r24	; 0x2b
    176c:	8b a5       	ldd	r24, Y+43	; 0x2b
    176e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <rightOrWrongProccessing+0x74e>
    1774:	9c a7       	std	Y+44, r25	; 0x2c
    1776:	8b a7       	std	Y+43, r24	; 0x2b
				Timer0_Init(&timer0_configration);
				while(count1!=250){}
				count1=0;
				Timer0_DeInit();
				*/
				DcMotor_Rotate(A_CW,100);
    1778:	82 e0       	ldi	r24, 0x02	; 2
    177a:	64 e6       	ldi	r22, 0x64	; 100
    177c:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <DcMotor_Rotate>
				UART_sendByte('R');
    1780:	82 e5       	ldi	r24, 0x52	; 82
    1782:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <UART_sendByte>
		}
		/*in case user wants to change password
		 * user gets 3 trials before error is displayed then step 2 is displayed again
		 *
		 * */
		if(byte=='-')
    1786:	fe 01       	movw	r30, r28
    1788:	ef 58       	subi	r30, 0x8F	; 143
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	80 81       	ld	r24, Z
    178e:	8d 32       	cpi	r24, 0x2D	; 45
    1790:	09 f0       	breq	.+2      	; 0x1794 <rightOrWrongProccessing+0x772>
    1792:	9e c1       	rjmp	.+828    	; 0x1ad0 <rightOrWrongProccessing+0xaae>
		{
			retreivePassword(&password_from_mem);
    1794:	ce 01       	movw	r24, r28
    1796:	8d 58       	subi	r24, 0x8D	; 141
    1798:	9f 4f       	sbci	r25, 0xFF	; 255
    179a:	0e 94 ef 07 	call	0xfde	; 0xfde <retreivePassword>
    179e:	a2 c0       	rjmp	.+324    	; 0x18e4 <rightOrWrongProccessing+0x8c2>
			while(trials<=3){
				UART_sendByte(MC2_READY);
    17a0:	80 e1       	ldi	r24, 0x10	; 16
    17a2:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <UART_sendByte>
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e4       	ldi	r25, 0x40	; 64
    17aa:	ac e1       	ldi	r26, 0x1C	; 28
    17ac:	b6 e4       	ldi	r27, 0x46	; 70
    17ae:	8f a3       	std	Y+39, r24	; 0x27
    17b0:	98 a7       	std	Y+40, r25	; 0x28
    17b2:	a9 a7       	std	Y+41, r26	; 0x29
    17b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b6:	6f a1       	ldd	r22, Y+39	; 0x27
    17b8:	78 a5       	ldd	r23, Y+40	; 0x28
    17ba:	89 a5       	ldd	r24, Y+41	; 0x29
    17bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	4a e7       	ldi	r20, 0x7A	; 122
    17c4:	53 e4       	ldi	r21, 0x43	; 67
    17c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	8b a3       	std	Y+35, r24	; 0x23
    17d0:	9c a3       	std	Y+36, r25	; 0x24
    17d2:	ad a3       	std	Y+37, r26	; 0x25
    17d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17d6:	6b a1       	ldd	r22, Y+35	; 0x23
    17d8:	7c a1       	ldd	r23, Y+36	; 0x24
    17da:	8d a1       	ldd	r24, Y+37	; 0x25
    17dc:	9e a1       	ldd	r25, Y+38	; 0x26
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e8       	ldi	r20, 0x80	; 128
    17e4:	5f e3       	ldi	r21, 0x3F	; 63
    17e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17ea:	88 23       	and	r24, r24
    17ec:	2c f4       	brge	.+10     	; 0x17f8 <rightOrWrongProccessing+0x7d6>
		__ticks = 1;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	9a a3       	std	Y+34, r25	; 0x22
    17f4:	89 a3       	std	Y+33, r24	; 0x21
    17f6:	3f c0       	rjmp	.+126    	; 0x1876 <rightOrWrongProccessing+0x854>
	else if (__tmp > 65535)
    17f8:	6b a1       	ldd	r22, Y+35	; 0x23
    17fa:	7c a1       	ldd	r23, Y+36	; 0x24
    17fc:	8d a1       	ldd	r24, Y+37	; 0x25
    17fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	3f ef       	ldi	r19, 0xFF	; 255
    1804:	4f e7       	ldi	r20, 0x7F	; 127
    1806:	57 e4       	ldi	r21, 0x47	; 71
    1808:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    180c:	18 16       	cp	r1, r24
    180e:	4c f5       	brge	.+82     	; 0x1862 <rightOrWrongProccessing+0x840>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1810:	6f a1       	ldd	r22, Y+39	; 0x27
    1812:	78 a5       	ldd	r23, Y+40	; 0x28
    1814:	89 a5       	ldd	r24, Y+41	; 0x29
    1816:	9a a5       	ldd	r25, Y+42	; 0x2a
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e2       	ldi	r20, 0x20	; 32
    181e:	51 e4       	ldi	r21, 0x41	; 65
    1820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	bc 01       	movw	r22, r24
    182a:	cd 01       	movw	r24, r26
    182c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	9a a3       	std	Y+34, r25	; 0x22
    1836:	89 a3       	std	Y+33, r24	; 0x21
    1838:	0f c0       	rjmp	.+30     	; 0x1858 <rightOrWrongProccessing+0x836>
    183a:	89 e1       	ldi	r24, 0x19	; 25
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	98 a3       	std	Y+32, r25	; 0x20
    1840:	8f 8f       	std	Y+31, r24	; 0x1f
    1842:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1844:	98 a1       	ldd	r25, Y+32	; 0x20
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	f1 f7       	brne	.-4      	; 0x1846 <rightOrWrongProccessing+0x824>
    184a:	98 a3       	std	Y+32, r25	; 0x20
    184c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184e:	89 a1       	ldd	r24, Y+33	; 0x21
    1850:	9a a1       	ldd	r25, Y+34	; 0x22
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	9a a3       	std	Y+34, r25	; 0x22
    1856:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1858:	89 a1       	ldd	r24, Y+33	; 0x21
    185a:	9a a1       	ldd	r25, Y+34	; 0x22
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	69 f7       	brne	.-38     	; 0x183a <rightOrWrongProccessing+0x818>
    1860:	14 c0       	rjmp	.+40     	; 0x188a <rightOrWrongProccessing+0x868>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1862:	6b a1       	ldd	r22, Y+35	; 0x23
    1864:	7c a1       	ldd	r23, Y+36	; 0x24
    1866:	8d a1       	ldd	r24, Y+37	; 0x25
    1868:	9e a1       	ldd	r25, Y+38	; 0x26
    186a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	9a a3       	std	Y+34, r25	; 0x22
    1874:	89 a3       	std	Y+33, r24	; 0x21
    1876:	89 a1       	ldd	r24, Y+33	; 0x21
    1878:	9a a1       	ldd	r25, Y+34	; 0x22
    187a:	9e 8f       	std	Y+30, r25	; 0x1e
    187c:	8d 8f       	std	Y+29, r24	; 0x1d
    187e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1880:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	f1 f7       	brne	.-4      	; 0x1882 <rightOrWrongProccessing+0x860>
    1886:	9e 8f       	std	Y+30, r25	; 0x1e
    1888:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(10000);
				receivePasswordUsingUart(g_received_password);
    188a:	86 e9       	ldi	r24, 0x96	; 150
    188c:	91 e0       	ldi	r25, 0x01	; 1
    188e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <receivePasswordUsingUart>
				pass_check=checkIfCorrect(g_received_password,password_from_mem);
    1892:	fe 01       	movw	r30, r28
    1894:	ed 58       	subi	r30, 0x8D	; 141
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	80 81       	ld	r24, Z
    189a:	88 2f       	mov	r24, r24
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	9c 01       	movw	r18, r24
    18a0:	86 e9       	ldi	r24, 0x96	; 150
    18a2:	91 e0       	ldi	r25, 0x01	; 1
    18a4:	b9 01       	movw	r22, r18
    18a6:	0e 94 76 07 	call	0xeec	; 0xeec <checkIfCorrect>
    18aa:	fe 01       	movw	r30, r28
    18ac:	ee 58       	subi	r30, 0x8E	; 142
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	80 83       	st	Z, r24
				if(pass_check==WRONG)
    18b2:	fe 01       	movw	r30, r28
    18b4:	ee 58       	subi	r30, 0x8E	; 142
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	80 81       	ld	r24, Z
    18ba:	88 23       	and	r24, r24
    18bc:	49 f4       	brne	.+18     	; 0x18d0 <rightOrWrongProccessing+0x8ae>
				{
					/*
					 * O indicated that password is wrong and user gets 3 trials
					 * and re-enter password wont be diplayed
					 */
					UART_sendByte('O');		/*tell MCI1 to take the password again*/
    18be:	8f e4       	ldi	r24, 0x4F	; 79
    18c0:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <UART_sendByte>
					trials++;
    18c4:	80 91 8a 01 	lds	r24, 0x018A
    18c8:	8f 5f       	subi	r24, 0xFF	; 255
    18ca:	80 93 8a 01 	sts	0x018A, r24
    18ce:	0a c0       	rjmp	.+20     	; 0x18e4 <rightOrWrongProccessing+0x8c2>

				}
				else if(pass_check==RIGHT){
    18d0:	fe 01       	movw	r30, r28
    18d2:	ee 58       	subi	r30, 0x8E	; 142
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	80 81       	ld	r24, Z
    18d8:	81 30       	cpi	r24, 0x01	; 1
    18da:	21 f4       	brne	.+8      	; 0x18e4 <rightOrWrongProccessing+0x8c2>
					UART_sendByte('R');
    18dc:	82 e5       	ldi	r24, 0x52	; 82
    18de:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <UART_sendByte>
    18e2:	05 c0       	rjmp	.+10     	; 0x18ee <rightOrWrongProccessing+0x8cc>
		 *
		 * */
		if(byte=='-')
		{
			retreivePassword(&password_from_mem);
			while(trials<=3){
    18e4:	80 91 8a 01 	lds	r24, 0x018A
    18e8:	84 30       	cpi	r24, 0x04	; 4
    18ea:	08 f4       	brcc	.+2      	; 0x18ee <rightOrWrongProccessing+0x8cc>
    18ec:	59 cf       	rjmp	.-334    	; 0x17a0 <rightOrWrongProccessing+0x77e>
				}
			}
			/*
			 * display error if trials =4 and turn buzzer on
			 */
			if(trials==4){
    18ee:	80 91 8a 01 	lds	r24, 0x018A
    18f2:	84 30       	cpi	r24, 0x04	; 4
    18f4:	09 f0       	breq	.+2      	; 0x18f8 <rightOrWrongProccessing+0x8d6>
    18f6:	ec c0       	rjmp	.+472    	; 0x1ad0 <rightOrWrongProccessing+0xaae>
				UART_sendString("Error #");
    18f8:	8a e7       	ldi	r24, 0x7A	; 122
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <UART_sendString>
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	aa ef       	ldi	r26, 0xFA	; 250
    1906:	b3 e4       	ldi	r27, 0x43	; 67
    1908:	89 8f       	std	Y+25, r24	; 0x19
    190a:	9a 8f       	std	Y+26, r25	; 0x1a
    190c:	ab 8f       	std	Y+27, r26	; 0x1b
    190e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1910:	69 8d       	ldd	r22, Y+25	; 0x19
    1912:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1914:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1916:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	4a e7       	ldi	r20, 0x7A	; 122
    191e:	53 e4       	ldi	r21, 0x43	; 67
    1920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	8d 8b       	std	Y+21, r24	; 0x15
    192a:	9e 8b       	std	Y+22, r25	; 0x16
    192c:	af 8b       	std	Y+23, r26	; 0x17
    192e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1930:	6d 89       	ldd	r22, Y+21	; 0x15
    1932:	7e 89       	ldd	r23, Y+22	; 0x16
    1934:	8f 89       	ldd	r24, Y+23	; 0x17
    1936:	98 8d       	ldd	r25, Y+24	; 0x18
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e8       	ldi	r20, 0x80	; 128
    193e:	5f e3       	ldi	r21, 0x3F	; 63
    1940:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1944:	88 23       	and	r24, r24
    1946:	2c f4       	brge	.+10     	; 0x1952 <rightOrWrongProccessing+0x930>
		__ticks = 1;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	9c 8b       	std	Y+20, r25	; 0x14
    194e:	8b 8b       	std	Y+19, r24	; 0x13
    1950:	3f c0       	rjmp	.+126    	; 0x19d0 <rightOrWrongProccessing+0x9ae>
	else if (__tmp > 65535)
    1952:	6d 89       	ldd	r22, Y+21	; 0x15
    1954:	7e 89       	ldd	r23, Y+22	; 0x16
    1956:	8f 89       	ldd	r24, Y+23	; 0x17
    1958:	98 8d       	ldd	r25, Y+24	; 0x18
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	3f ef       	ldi	r19, 0xFF	; 255
    195e:	4f e7       	ldi	r20, 0x7F	; 127
    1960:	57 e4       	ldi	r21, 0x47	; 71
    1962:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1966:	18 16       	cp	r1, r24
    1968:	4c f5       	brge	.+82     	; 0x19bc <rightOrWrongProccessing+0x99a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196a:	69 8d       	ldd	r22, Y+25	; 0x19
    196c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    196e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1970:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e2       	ldi	r20, 0x20	; 32
    1978:	51 e4       	ldi	r21, 0x41	; 65
    197a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	bc 01       	movw	r22, r24
    1984:	cd 01       	movw	r24, r26
    1986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	9c 8b       	std	Y+20, r25	; 0x14
    1990:	8b 8b       	std	Y+19, r24	; 0x13
    1992:	0f c0       	rjmp	.+30     	; 0x19b2 <rightOrWrongProccessing+0x990>
    1994:	89 e1       	ldi	r24, 0x19	; 25
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	9a 8b       	std	Y+18, r25	; 0x12
    199a:	89 8b       	std	Y+17, r24	; 0x11
    199c:	89 89       	ldd	r24, Y+17	; 0x11
    199e:	9a 89       	ldd	r25, Y+18	; 0x12
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	f1 f7       	brne	.-4      	; 0x19a0 <rightOrWrongProccessing+0x97e>
    19a4:	9a 8b       	std	Y+18, r25	; 0x12
    19a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a8:	8b 89       	ldd	r24, Y+19	; 0x13
    19aa:	9c 89       	ldd	r25, Y+20	; 0x14
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	9c 8b       	std	Y+20, r25	; 0x14
    19b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b2:	8b 89       	ldd	r24, Y+19	; 0x13
    19b4:	9c 89       	ldd	r25, Y+20	; 0x14
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	69 f7       	brne	.-38     	; 0x1994 <rightOrWrongProccessing+0x972>
    19ba:	14 c0       	rjmp	.+40     	; 0x19e4 <rightOrWrongProccessing+0x9c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19bc:	6d 89       	ldd	r22, Y+21	; 0x15
    19be:	7e 89       	ldd	r23, Y+22	; 0x16
    19c0:	8f 89       	ldd	r24, Y+23	; 0x17
    19c2:	98 8d       	ldd	r25, Y+24	; 0x18
    19c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	9c 8b       	std	Y+20, r25	; 0x14
    19ce:	8b 8b       	std	Y+19, r24	; 0x13
    19d0:	8b 89       	ldd	r24, Y+19	; 0x13
    19d2:	9c 89       	ldd	r25, Y+20	; 0x14
    19d4:	98 8b       	std	Y+16, r25	; 0x10
    19d6:	8f 87       	std	Y+15, r24	; 0x0f
    19d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    19da:	98 89       	ldd	r25, Y+16	; 0x10
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	f1 f7       	brne	.-4      	; 0x19dc <rightOrWrongProccessing+0x9ba>
    19e0:	98 8b       	std	Y+16, r25	; 0x10
    19e2:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				BUZZER_on();
    19e4:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <BUZZER_on>
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	90 e4       	ldi	r25, 0x40	; 64
    19ec:	ac e9       	ldi	r26, 0x9C	; 156
    19ee:	b5 e4       	ldi	r27, 0x45	; 69
    19f0:	8b 87       	std	Y+11, r24	; 0x0b
    19f2:	9c 87       	std	Y+12, r25	; 0x0c
    19f4:	ad 87       	std	Y+13, r26	; 0x0d
    19f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    19fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    19fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	4a e7       	ldi	r20, 0x7A	; 122
    1a06:	53 e4       	ldi	r21, 0x43	; 67
    1a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	8f 83       	std	Y+7, r24	; 0x07
    1a12:	98 87       	std	Y+8, r25	; 0x08
    1a14:	a9 87       	std	Y+9, r26	; 0x09
    1a16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a18:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1a:	78 85       	ldd	r23, Y+8	; 0x08
    1a1c:	89 85       	ldd	r24, Y+9	; 0x09
    1a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e8       	ldi	r20, 0x80	; 128
    1a26:	5f e3       	ldi	r21, 0x3F	; 63
    1a28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a2c:	88 23       	and	r24, r24
    1a2e:	2c f4       	brge	.+10     	; 0x1a3a <rightOrWrongProccessing+0xa18>
		__ticks = 1;
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	9e 83       	std	Y+6, r25	; 0x06
    1a36:	8d 83       	std	Y+5, r24	; 0x05
    1a38:	3f c0       	rjmp	.+126    	; 0x1ab8 <rightOrWrongProccessing+0xa96>
	else if (__tmp > 65535)
    1a3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3c:	78 85       	ldd	r23, Y+8	; 0x08
    1a3e:	89 85       	ldd	r24, Y+9	; 0x09
    1a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	3f ef       	ldi	r19, 0xFF	; 255
    1a46:	4f e7       	ldi	r20, 0x7F	; 127
    1a48:	57 e4       	ldi	r21, 0x47	; 71
    1a4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a4e:	18 16       	cp	r1, r24
    1a50:	4c f5       	brge	.+82     	; 0x1aa4 <rightOrWrongProccessing+0xa82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e2       	ldi	r20, 0x20	; 32
    1a60:	51 e4       	ldi	r21, 0x41	; 65
    1a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	bc 01       	movw	r22, r24
    1a6c:	cd 01       	movw	r24, r26
    1a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	9e 83       	std	Y+6, r25	; 0x06
    1a78:	8d 83       	std	Y+5, r24	; 0x05
    1a7a:	0f c0       	rjmp	.+30     	; 0x1a9a <rightOrWrongProccessing+0xa78>
    1a7c:	89 e1       	ldi	r24, 0x19	; 25
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	9c 83       	std	Y+4, r25	; 0x04
    1a82:	8b 83       	std	Y+3, r24	; 0x03
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	9c 81       	ldd	r25, Y+4	; 0x04
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	f1 f7       	brne	.-4      	; 0x1a88 <rightOrWrongProccessing+0xa66>
    1a8c:	9c 83       	std	Y+4, r25	; 0x04
    1a8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a90:	8d 81       	ldd	r24, Y+5	; 0x05
    1a92:	9e 81       	ldd	r25, Y+6	; 0x06
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	9e 83       	std	Y+6, r25	; 0x06
    1a98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	69 f7       	brne	.-38     	; 0x1a7c <rightOrWrongProccessing+0xa5a>
    1aa2:	14 c0       	rjmp	.+40     	; 0x1acc <rightOrWrongProccessing+0xaaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa4:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa6:	78 85       	ldd	r23, Y+8	; 0x08
    1aa8:	89 85       	ldd	r24, Y+9	; 0x09
    1aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	9e 83       	std	Y+6, r25	; 0x06
    1ab6:	8d 83       	std	Y+5, r24	; 0x05
    1ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aba:	9e 81       	ldd	r25, Y+6	; 0x06
    1abc:	9a 83       	std	Y+2, r25	; 0x02
    1abe:	89 83       	std	Y+1, r24	; 0x01
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	f1 f7       	brne	.-4      	; 0x1ac4 <rightOrWrongProccessing+0xaa2>
    1ac8:	9a 83       	std	Y+2, r25	; 0x02
    1aca:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(5000);
				BUZZER_off();
    1acc:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <BUZZER_off>

			}

		}
	}
}
    1ad0:	cd 58       	subi	r28, 0x8D	; 141
    1ad2:	df 4f       	sbci	r29, 0xFF	; 255
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	f8 94       	cli
    1ad8:	de bf       	out	0x3e, r29	; 62
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	cd bf       	out	0x3d, r28	; 61
    1ade:	cf 91       	pop	r28
    1ae0:	df 91       	pop	r29
    1ae2:	1f 91       	pop	r17
    1ae4:	0f 91       	pop	r16
    1ae6:	08 95       	ret

00001ae8 <Timer0_count1>:
void Timer0_count1(void)
{
    1ae8:	df 93       	push	r29
    1aea:	cf 93       	push	r28
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
	count1++;
    1af0:	80 91 8c 01 	lds	r24, 0x018C
    1af4:	90 91 8d 01 	lds	r25, 0x018D
    1af8:	a0 91 8e 01 	lds	r26, 0x018E
    1afc:	b0 91 8f 01 	lds	r27, 0x018F
    1b00:	01 96       	adiw	r24, 0x01	; 1
    1b02:	a1 1d       	adc	r26, r1
    1b04:	b1 1d       	adc	r27, r1
    1b06:	80 93 8c 01 	sts	0x018C, r24
    1b0a:	90 93 8d 01 	sts	0x018D, r25
    1b0e:	a0 93 8e 01 	sts	0x018E, r26
    1b12:	b0 93 8f 01 	sts	0x018F, r27
}
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <BUZZER_init>:

#include "buzzer.h"
#include "gpio.h"
#include "timer0.h"

void BUZZER_init(void){
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	65 e0       	ldi	r22, 0x05	; 5
    1b28:	41 e0       	ldi	r20, 0x01	; 1
    1b2a:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <GPIO_setupPinDirection>
}
    1b2e:	cf 91       	pop	r28
    1b30:	df 91       	pop	r29
    1b32:	08 95       	ret

00001b34 <BUZZER_on>:

void BUZZER_on(void)		/*buzzer on*/
{
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,1);
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	65 e0       	ldi	r22, 0x05	; 5
    1b40:	41 e0       	ldi	r20, 0x01	; 1
    1b42:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <GPIO_writePin>
}
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <BUZZER_off>:

void BUZZER_off(void)		/*buzzer off*/
{
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,0);
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	65 e0       	ldi	r22, 0x05	; 5
    1b58:	40 e0       	ldi	r20, 0x00	; 0
    1b5a:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <GPIO_writePin>
}
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	08 95       	ret

00001b64 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	00 d0       	rcall	.+0      	; 0x1b6a <EEPROM_writeByte+0x6>
    1b6a:	00 d0       	rcall	.+0      	; 0x1b6c <EEPROM_writeByte+0x8>
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
    1b70:	9a 83       	std	Y+2, r25	; 0x02
    1b72:	89 83       	std	Y+1, r24	; 0x01
    1b74:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1b76:	0e 94 b9 1c 	call	0x3972	; 0x3972 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1b7a:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <TWI_getStatus>
    1b7e:	88 30       	cpi	r24, 0x08	; 8
    1b80:	11 f0       	breq	.+4      	; 0x1b86 <EEPROM_writeByte+0x22>
        return ERROR;
    1b82:	1c 82       	std	Y+4, r1	; 0x04
    1b84:	28 c0       	rjmp	.+80     	; 0x1bd6 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
    1b88:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8a:	80 70       	andi	r24, 0x00	; 0
    1b8c:	97 70       	andi	r25, 0x07	; 7
    1b8e:	88 0f       	add	r24, r24
    1b90:	89 2f       	mov	r24, r25
    1b92:	88 1f       	adc	r24, r24
    1b94:	99 0b       	sbc	r25, r25
    1b96:	91 95       	neg	r25
    1b98:	80 6a       	ori	r24, 0xA0	; 160
    1b9a:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1b9e:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <TWI_getStatus>
    1ba2:	88 31       	cpi	r24, 0x18	; 24
    1ba4:	11 f0       	breq	.+4      	; 0x1baa <EEPROM_writeByte+0x46>
        return ERROR; 
    1ba6:	1c 82       	std	Y+4, r1	; 0x04
    1ba8:	16 c0       	rjmp	.+44     	; 0x1bd6 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1bb0:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <TWI_getStatus>
    1bb4:	88 32       	cpi	r24, 0x28	; 40
    1bb6:	11 f0       	breq	.+4      	; 0x1bbc <EEPROM_writeByte+0x58>
        return ERROR;
    1bb8:	1c 82       	std	Y+4, r1	; 0x04
    1bba:	0d c0       	rjmp	.+26     	; 0x1bd6 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1bc2:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <TWI_getStatus>
    1bc6:	88 32       	cpi	r24, 0x28	; 40
    1bc8:	11 f0       	breq	.+4      	; 0x1bce <EEPROM_writeByte+0x6a>
        return ERROR;
    1bca:	1c 82       	std	Y+4, r1	; 0x04
    1bcc:	04 c0       	rjmp	.+8      	; 0x1bd6 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1bce:	0e 94 c9 1c 	call	0x3992	; 0x3992 <TWI_stop>
	
    return SUCCESS;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	8c 83       	std	Y+4, r24	; 0x04
    1bd6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	08 95       	ret

00001be6 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <EEPROM_readByte+0x6>
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <EEPROM_readByte+0x8>
    1bee:	0f 92       	push	r0
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	9a 83       	std	Y+2, r25	; 0x02
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    1bf8:	7c 83       	std	Y+4, r23	; 0x04
    1bfa:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1bfc:	0e 94 b9 1c 	call	0x3972	; 0x3972 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1c00:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <TWI_getStatus>
    1c04:	88 30       	cpi	r24, 0x08	; 8
    1c06:	11 f0       	breq	.+4      	; 0x1c0c <EEPROM_readByte+0x26>
        return ERROR;
    1c08:	1d 82       	std	Y+5, r1	; 0x05
    1c0a:	44 c0       	rjmp	.+136    	; 0x1c94 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c10:	80 70       	andi	r24, 0x00	; 0
    1c12:	97 70       	andi	r25, 0x07	; 7
    1c14:	88 0f       	add	r24, r24
    1c16:	89 2f       	mov	r24, r25
    1c18:	88 1f       	adc	r24, r24
    1c1a:	99 0b       	sbc	r25, r25
    1c1c:	91 95       	neg	r25
    1c1e:	80 6a       	ori	r24, 0xA0	; 160
    1c20:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1c24:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <TWI_getStatus>
    1c28:	88 31       	cpi	r24, 0x18	; 24
    1c2a:	11 f0       	breq	.+4      	; 0x1c30 <EEPROM_readByte+0x4a>
        return ERROR;
    1c2c:	1d 82       	std	Y+5, r1	; 0x05
    1c2e:	32 c0       	rjmp	.+100    	; 0x1c94 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1c36:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <TWI_getStatus>
    1c3a:	88 32       	cpi	r24, 0x28	; 40
    1c3c:	11 f0       	breq	.+4      	; 0x1c42 <EEPROM_readByte+0x5c>
        return ERROR;
    1c3e:	1d 82       	std	Y+5, r1	; 0x05
    1c40:	29 c0       	rjmp	.+82     	; 0x1c94 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1c42:	0e 94 b9 1c 	call	0x3972	; 0x3972 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1c46:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <TWI_getStatus>
    1c4a:	80 31       	cpi	r24, 0x10	; 16
    1c4c:	11 f0       	breq	.+4      	; 0x1c52 <EEPROM_readByte+0x6c>
        return ERROR;
    1c4e:	1d 82       	std	Y+5, r1	; 0x05
    1c50:	21 c0       	rjmp	.+66     	; 0x1c94 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	9a 81       	ldd	r25, Y+2	; 0x02
    1c56:	80 70       	andi	r24, 0x00	; 0
    1c58:	97 70       	andi	r25, 0x07	; 7
    1c5a:	88 0f       	add	r24, r24
    1c5c:	89 2f       	mov	r24, r25
    1c5e:	88 1f       	adc	r24, r24
    1c60:	99 0b       	sbc	r25, r25
    1c62:	91 95       	neg	r25
    1c64:	81 6a       	ori	r24, 0xA1	; 161
    1c66:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1c6a:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <TWI_getStatus>
    1c6e:	80 34       	cpi	r24, 0x40	; 64
    1c70:	11 f0       	breq	.+4      	; 0x1c76 <EEPROM_readByte+0x90>
        return ERROR;
    1c72:	1d 82       	std	Y+5, r1	; 0x05
    1c74:	0f c0       	rjmp	.+30     	; 0x1c94 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1c76:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <TWI_readByteWithNACK>
    1c7a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c7c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c7e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1c80:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <TWI_getStatus>
    1c84:	88 35       	cpi	r24, 0x58	; 88
    1c86:	11 f0       	breq	.+4      	; 0x1c8c <EEPROM_readByte+0xa6>
        return ERROR;
    1c88:	1d 82       	std	Y+5, r1	; 0x05
    1c8a:	04 c0       	rjmp	.+8      	; 0x1c94 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1c8c:	0e 94 c9 1c 	call	0x3992	; 0x3992 <TWI_stop>

    return SUCCESS;
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	8d 83       	std	Y+5, r24	; 0x05
    1c94:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	cf 91       	pop	r28
    1ca2:	df 91       	pop	r29
    1ca4:	08 95       	ret

00001ca6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1ca6:	df 93       	push	r29
    1ca8:	cf 93       	push	r28
    1caa:	00 d0       	rcall	.+0      	; 0x1cac <GPIO_setupPinDirection+0x6>
    1cac:	00 d0       	rcall	.+0      	; 0x1cae <GPIO_setupPinDirection+0x8>
    1cae:	0f 92       	push	r0
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    1cb6:	6a 83       	std	Y+2, r22	; 0x02
    1cb8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	88 30       	cpi	r24, 0x08	; 8
    1cbe:	08 f0       	brcs	.+2      	; 0x1cc2 <GPIO_setupPinDirection+0x1c>
    1cc0:	d5 c0       	rjmp	.+426    	; 0x1e6c <GPIO_setupPinDirection+0x1c6>
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	84 30       	cpi	r24, 0x04	; 4
    1cc6:	08 f0       	brcs	.+2      	; 0x1cca <GPIO_setupPinDirection+0x24>
    1cc8:	d1 c0       	rjmp	.+418    	; 0x1e6c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	3d 83       	std	Y+5, r19	; 0x05
    1cd2:	2c 83       	std	Y+4, r18	; 0x04
    1cd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd8:	81 30       	cpi	r24, 0x01	; 1
    1cda:	91 05       	cpc	r25, r1
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <GPIO_setupPinDirection+0x3a>
    1cde:	43 c0       	rjmp	.+134    	; 0x1d66 <GPIO_setupPinDirection+0xc0>
    1ce0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ce2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ce4:	22 30       	cpi	r18, 0x02	; 2
    1ce6:	31 05       	cpc	r19, r1
    1ce8:	2c f4       	brge	.+10     	; 0x1cf4 <GPIO_setupPinDirection+0x4e>
    1cea:	8c 81       	ldd	r24, Y+4	; 0x04
    1cec:	9d 81       	ldd	r25, Y+5	; 0x05
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	71 f0       	breq	.+28     	; 0x1d0e <GPIO_setupPinDirection+0x68>
    1cf2:	bc c0       	rjmp	.+376    	; 0x1e6c <GPIO_setupPinDirection+0x1c6>
    1cf4:	2c 81       	ldd	r18, Y+4	; 0x04
    1cf6:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf8:	22 30       	cpi	r18, 0x02	; 2
    1cfa:	31 05       	cpc	r19, r1
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <GPIO_setupPinDirection+0x5a>
    1cfe:	5f c0       	rjmp	.+190    	; 0x1dbe <GPIO_setupPinDirection+0x118>
    1d00:	8c 81       	ldd	r24, Y+4	; 0x04
    1d02:	9d 81       	ldd	r25, Y+5	; 0x05
    1d04:	83 30       	cpi	r24, 0x03	; 3
    1d06:	91 05       	cpc	r25, r1
    1d08:	09 f4       	brne	.+2      	; 0x1d0c <GPIO_setupPinDirection+0x66>
    1d0a:	85 c0       	rjmp	.+266    	; 0x1e16 <GPIO_setupPinDirection+0x170>
    1d0c:	af c0       	rjmp	.+350    	; 0x1e6c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	81 30       	cpi	r24, 0x01	; 1
    1d12:	a1 f4       	brne	.+40     	; 0x1d3c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1d14:	aa e3       	ldi	r26, 0x3A	; 58
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	ea e3       	ldi	r30, 0x3A	; 58
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	48 2f       	mov	r20, r24
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	28 2f       	mov	r18, r24
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	02 2e       	mov	r0, r18
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <GPIO_setupPinDirection+0x8c>
    1d2e:	88 0f       	add	r24, r24
    1d30:	99 1f       	adc	r25, r25
    1d32:	0a 94       	dec	r0
    1d34:	e2 f7       	brpl	.-8      	; 0x1d2e <GPIO_setupPinDirection+0x88>
    1d36:	84 2b       	or	r24, r20
    1d38:	8c 93       	st	X, r24
    1d3a:	98 c0       	rjmp	.+304    	; 0x1e6c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1d3c:	aa e3       	ldi	r26, 0x3A	; 58
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	ea e3       	ldi	r30, 0x3A	; 58
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	48 2f       	mov	r20, r24
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	02 2e       	mov	r0, r18
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <GPIO_setupPinDirection+0xb4>
    1d56:	88 0f       	add	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	0a 94       	dec	r0
    1d5c:	e2 f7       	brpl	.-8      	; 0x1d56 <GPIO_setupPinDirection+0xb0>
    1d5e:	80 95       	com	r24
    1d60:	84 23       	and	r24, r20
    1d62:	8c 93       	st	X, r24
    1d64:	83 c0       	rjmp	.+262    	; 0x1e6c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	81 30       	cpi	r24, 0x01	; 1
    1d6a:	a1 f4       	brne	.+40     	; 0x1d94 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1d6c:	a7 e3       	ldi	r26, 0x37	; 55
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e7 e3       	ldi	r30, 0x37	; 55
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	48 2f       	mov	r20, r24
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	02 2e       	mov	r0, r18
    1d84:	02 c0       	rjmp	.+4      	; 0x1d8a <GPIO_setupPinDirection+0xe4>
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	0a 94       	dec	r0
    1d8c:	e2 f7       	brpl	.-8      	; 0x1d86 <GPIO_setupPinDirection+0xe0>
    1d8e:	84 2b       	or	r24, r20
    1d90:	8c 93       	st	X, r24
    1d92:	6c c0       	rjmp	.+216    	; 0x1e6c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1d94:	a7 e3       	ldi	r26, 0x37	; 55
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e7 e3       	ldi	r30, 0x37	; 55
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	48 2f       	mov	r20, r24
    1da0:	8a 81       	ldd	r24, Y+2	; 0x02
    1da2:	28 2f       	mov	r18, r24
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	02 2e       	mov	r0, r18
    1dac:	02 c0       	rjmp	.+4      	; 0x1db2 <GPIO_setupPinDirection+0x10c>
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	0a 94       	dec	r0
    1db4:	e2 f7       	brpl	.-8      	; 0x1dae <GPIO_setupPinDirection+0x108>
    1db6:	80 95       	com	r24
    1db8:	84 23       	and	r24, r20
    1dba:	8c 93       	st	X, r24
    1dbc:	57 c0       	rjmp	.+174    	; 0x1e6c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	81 30       	cpi	r24, 0x01	; 1
    1dc2:	a1 f4       	brne	.+40     	; 0x1dec <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1dc4:	a4 e3       	ldi	r26, 0x34	; 52
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	e4 e3       	ldi	r30, 0x34	; 52
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	48 2f       	mov	r20, r24
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	02 2e       	mov	r0, r18
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <GPIO_setupPinDirection+0x13c>
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	0a 94       	dec	r0
    1de4:	e2 f7       	brpl	.-8      	; 0x1dde <GPIO_setupPinDirection+0x138>
    1de6:	84 2b       	or	r24, r20
    1de8:	8c 93       	st	X, r24
    1dea:	40 c0       	rjmp	.+128    	; 0x1e6c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1dec:	a4 e3       	ldi	r26, 0x34	; 52
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e4 e3       	ldi	r30, 0x34	; 52
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	48 2f       	mov	r20, r24
    1df8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	02 2e       	mov	r0, r18
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <GPIO_setupPinDirection+0x164>
    1e06:	88 0f       	add	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	0a 94       	dec	r0
    1e0c:	e2 f7       	brpl	.-8      	; 0x1e06 <GPIO_setupPinDirection+0x160>
    1e0e:	80 95       	com	r24
    1e10:	84 23       	and	r24, r20
    1e12:	8c 93       	st	X, r24
    1e14:	2b c0       	rjmp	.+86     	; 0x1e6c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	81 30       	cpi	r24, 0x01	; 1
    1e1a:	a1 f4       	brne	.+40     	; 0x1e44 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1e1c:	a1 e3       	ldi	r26, 0x31	; 49
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e1 e3       	ldi	r30, 0x31	; 49
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	48 2f       	mov	r20, r24
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	02 2e       	mov	r0, r18
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <GPIO_setupPinDirection+0x194>
    1e36:	88 0f       	add	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	0a 94       	dec	r0
    1e3c:	e2 f7       	brpl	.-8      	; 0x1e36 <GPIO_setupPinDirection+0x190>
    1e3e:	84 2b       	or	r24, r20
    1e40:	8c 93       	st	X, r24
    1e42:	14 c0       	rjmp	.+40     	; 0x1e6c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1e44:	a1 e3       	ldi	r26, 0x31	; 49
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e1 e3       	ldi	r30, 0x31	; 49
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	48 2f       	mov	r20, r24
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	28 2f       	mov	r18, r24
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	02 2e       	mov	r0, r18
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <GPIO_setupPinDirection+0x1bc>
    1e5e:	88 0f       	add	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	0a 94       	dec	r0
    1e64:	e2 f7       	brpl	.-8      	; 0x1e5e <GPIO_setupPinDirection+0x1b8>
    1e66:	80 95       	com	r24
    1e68:	84 23       	and	r24, r20
    1e6a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	00 d0       	rcall	.+0      	; 0x1e82 <GPIO_writePin+0x6>
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <GPIO_writePin+0x8>
    1e84:	0f 92       	push	r0
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    1e8c:	6a 83       	std	Y+2, r22	; 0x02
    1e8e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	88 30       	cpi	r24, 0x08	; 8
    1e94:	08 f0       	brcs	.+2      	; 0x1e98 <GPIO_writePin+0x1c>
    1e96:	d5 c0       	rjmp	.+426    	; 0x2042 <GPIO_writePin+0x1c6>
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	84 30       	cpi	r24, 0x04	; 4
    1e9c:	08 f0       	brcs	.+2      	; 0x1ea0 <GPIO_writePin+0x24>
    1e9e:	d1 c0       	rjmp	.+418    	; 0x2042 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	3d 83       	std	Y+5, r19	; 0x05
    1ea8:	2c 83       	std	Y+4, r18	; 0x04
    1eaa:	8c 81       	ldd	r24, Y+4	; 0x04
    1eac:	9d 81       	ldd	r25, Y+5	; 0x05
    1eae:	81 30       	cpi	r24, 0x01	; 1
    1eb0:	91 05       	cpc	r25, r1
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <GPIO_writePin+0x3a>
    1eb4:	43 c0       	rjmp	.+134    	; 0x1f3c <GPIO_writePin+0xc0>
    1eb6:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb8:	3d 81       	ldd	r19, Y+5	; 0x05
    1eba:	22 30       	cpi	r18, 0x02	; 2
    1ebc:	31 05       	cpc	r19, r1
    1ebe:	2c f4       	brge	.+10     	; 0x1eca <GPIO_writePin+0x4e>
    1ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec4:	00 97       	sbiw	r24, 0x00	; 0
    1ec6:	71 f0       	breq	.+28     	; 0x1ee4 <GPIO_writePin+0x68>
    1ec8:	bc c0       	rjmp	.+376    	; 0x2042 <GPIO_writePin+0x1c6>
    1eca:	2c 81       	ldd	r18, Y+4	; 0x04
    1ecc:	3d 81       	ldd	r19, Y+5	; 0x05
    1ece:	22 30       	cpi	r18, 0x02	; 2
    1ed0:	31 05       	cpc	r19, r1
    1ed2:	09 f4       	brne	.+2      	; 0x1ed6 <GPIO_writePin+0x5a>
    1ed4:	5f c0       	rjmp	.+190    	; 0x1f94 <GPIO_writePin+0x118>
    1ed6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eda:	83 30       	cpi	r24, 0x03	; 3
    1edc:	91 05       	cpc	r25, r1
    1ede:	09 f4       	brne	.+2      	; 0x1ee2 <GPIO_writePin+0x66>
    1ee0:	85 c0       	rjmp	.+266    	; 0x1fec <GPIO_writePin+0x170>
    1ee2:	af c0       	rjmp	.+350    	; 0x2042 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	81 30       	cpi	r24, 0x01	; 1
    1ee8:	a1 f4       	brne	.+40     	; 0x1f12 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1eea:	ab e3       	ldi	r26, 0x3B	; 59
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	eb e3       	ldi	r30, 0x3B	; 59
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	48 2f       	mov	r20, r24
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	28 2f       	mov	r18, r24
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	02 2e       	mov	r0, r18
    1f02:	02 c0       	rjmp	.+4      	; 0x1f08 <GPIO_writePin+0x8c>
    1f04:	88 0f       	add	r24, r24
    1f06:	99 1f       	adc	r25, r25
    1f08:	0a 94       	dec	r0
    1f0a:	e2 f7       	brpl	.-8      	; 0x1f04 <GPIO_writePin+0x88>
    1f0c:	84 2b       	or	r24, r20
    1f0e:	8c 93       	st	X, r24
    1f10:	98 c0       	rjmp	.+304    	; 0x2042 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1f12:	ab e3       	ldi	r26, 0x3B	; 59
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	eb e3       	ldi	r30, 0x3B	; 59
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	48 2f       	mov	r20, r24
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	02 2e       	mov	r0, r18
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <GPIO_writePin+0xb4>
    1f2c:	88 0f       	add	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	0a 94       	dec	r0
    1f32:	e2 f7       	brpl	.-8      	; 0x1f2c <GPIO_writePin+0xb0>
    1f34:	80 95       	com	r24
    1f36:	84 23       	and	r24, r20
    1f38:	8c 93       	st	X, r24
    1f3a:	83 c0       	rjmp	.+262    	; 0x2042 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	81 30       	cpi	r24, 0x01	; 1
    1f40:	a1 f4       	brne	.+40     	; 0x1f6a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1f42:	a8 e3       	ldi	r26, 0x38	; 56
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	e8 e3       	ldi	r30, 0x38	; 56
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	48 2f       	mov	r20, r24
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	28 2f       	mov	r18, r24
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	02 2e       	mov	r0, r18
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <GPIO_writePin+0xe4>
    1f5c:	88 0f       	add	r24, r24
    1f5e:	99 1f       	adc	r25, r25
    1f60:	0a 94       	dec	r0
    1f62:	e2 f7       	brpl	.-8      	; 0x1f5c <GPIO_writePin+0xe0>
    1f64:	84 2b       	or	r24, r20
    1f66:	8c 93       	st	X, r24
    1f68:	6c c0       	rjmp	.+216    	; 0x2042 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1f6a:	a8 e3       	ldi	r26, 0x38	; 56
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e8 e3       	ldi	r30, 0x38	; 56
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	48 2f       	mov	r20, r24
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	28 2f       	mov	r18, r24
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	02 2e       	mov	r0, r18
    1f82:	02 c0       	rjmp	.+4      	; 0x1f88 <GPIO_writePin+0x10c>
    1f84:	88 0f       	add	r24, r24
    1f86:	99 1f       	adc	r25, r25
    1f88:	0a 94       	dec	r0
    1f8a:	e2 f7       	brpl	.-8      	; 0x1f84 <GPIO_writePin+0x108>
    1f8c:	80 95       	com	r24
    1f8e:	84 23       	and	r24, r20
    1f90:	8c 93       	st	X, r24
    1f92:	57 c0       	rjmp	.+174    	; 0x2042 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1f94:	8b 81       	ldd	r24, Y+3	; 0x03
    1f96:	81 30       	cpi	r24, 0x01	; 1
    1f98:	a1 f4       	brne	.+40     	; 0x1fc2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1f9a:	a5 e3       	ldi	r26, 0x35	; 53
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	e5 e3       	ldi	r30, 0x35	; 53
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	48 2f       	mov	r20, r24
    1fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa8:	28 2f       	mov	r18, r24
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	02 2e       	mov	r0, r18
    1fb2:	02 c0       	rjmp	.+4      	; 0x1fb8 <GPIO_writePin+0x13c>
    1fb4:	88 0f       	add	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	0a 94       	dec	r0
    1fba:	e2 f7       	brpl	.-8      	; 0x1fb4 <GPIO_writePin+0x138>
    1fbc:	84 2b       	or	r24, r20
    1fbe:	8c 93       	st	X, r24
    1fc0:	40 c0       	rjmp	.+128    	; 0x2042 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1fc2:	a5 e3       	ldi	r26, 0x35	; 53
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	e5 e3       	ldi	r30, 0x35	; 53
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	48 2f       	mov	r20, r24
    1fce:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd0:	28 2f       	mov	r18, r24
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	02 2e       	mov	r0, r18
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <GPIO_writePin+0x164>
    1fdc:	88 0f       	add	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	0a 94       	dec	r0
    1fe2:	e2 f7       	brpl	.-8      	; 0x1fdc <GPIO_writePin+0x160>
    1fe4:	80 95       	com	r24
    1fe6:	84 23       	and	r24, r20
    1fe8:	8c 93       	st	X, r24
    1fea:	2b c0       	rjmp	.+86     	; 0x2042 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	81 30       	cpi	r24, 0x01	; 1
    1ff0:	a1 f4       	brne	.+40     	; 0x201a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1ff2:	a2 e3       	ldi	r26, 0x32	; 50
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	e2 e3       	ldi	r30, 0x32	; 50
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	48 2f       	mov	r20, r24
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	28 2f       	mov	r18, r24
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	02 2e       	mov	r0, r18
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <GPIO_writePin+0x194>
    200c:	88 0f       	add	r24, r24
    200e:	99 1f       	adc	r25, r25
    2010:	0a 94       	dec	r0
    2012:	e2 f7       	brpl	.-8      	; 0x200c <GPIO_writePin+0x190>
    2014:	84 2b       	or	r24, r20
    2016:	8c 93       	st	X, r24
    2018:	14 c0       	rjmp	.+40     	; 0x2042 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    201a:	a2 e3       	ldi	r26, 0x32	; 50
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e2 e3       	ldi	r30, 0x32	; 50
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	48 2f       	mov	r20, r24
    2026:	8a 81       	ldd	r24, Y+2	; 0x02
    2028:	28 2f       	mov	r18, r24
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	02 2e       	mov	r0, r18
    2032:	02 c0       	rjmp	.+4      	; 0x2038 <GPIO_writePin+0x1bc>
    2034:	88 0f       	add	r24, r24
    2036:	99 1f       	adc	r25, r25
    2038:	0a 94       	dec	r0
    203a:	e2 f7       	brpl	.-8      	; 0x2034 <GPIO_writePin+0x1b8>
    203c:	80 95       	com	r24
    203e:	84 23       	and	r24, r20
    2040:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	08 95       	ret

00002052 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2052:	df 93       	push	r29
    2054:	cf 93       	push	r28
    2056:	00 d0       	rcall	.+0      	; 0x2058 <GPIO_readPin+0x6>
    2058:	00 d0       	rcall	.+0      	; 0x205a <GPIO_readPin+0x8>
    205a:	0f 92       	push	r0
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	8a 83       	std	Y+2, r24	; 0x02
    2062:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2064:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	88 30       	cpi	r24, 0x08	; 8
    206a:	08 f0       	brcs	.+2      	; 0x206e <GPIO_readPin+0x1c>
    206c:	84 c0       	rjmp	.+264    	; 0x2176 <GPIO_readPin+0x124>
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	84 30       	cpi	r24, 0x04	; 4
    2072:	08 f0       	brcs	.+2      	; 0x2076 <GPIO_readPin+0x24>
    2074:	80 c0       	rjmp	.+256    	; 0x2176 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
    2078:	28 2f       	mov	r18, r24
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	3d 83       	std	Y+5, r19	; 0x05
    207e:	2c 83       	std	Y+4, r18	; 0x04
    2080:	4c 81       	ldd	r20, Y+4	; 0x04
    2082:	5d 81       	ldd	r21, Y+5	; 0x05
    2084:	41 30       	cpi	r20, 0x01	; 1
    2086:	51 05       	cpc	r21, r1
    2088:	79 f1       	breq	.+94     	; 0x20e8 <GPIO_readPin+0x96>
    208a:	8c 81       	ldd	r24, Y+4	; 0x04
    208c:	9d 81       	ldd	r25, Y+5	; 0x05
    208e:	82 30       	cpi	r24, 0x02	; 2
    2090:	91 05       	cpc	r25, r1
    2092:	34 f4       	brge	.+12     	; 0x20a0 <GPIO_readPin+0x4e>
    2094:	2c 81       	ldd	r18, Y+4	; 0x04
    2096:	3d 81       	ldd	r19, Y+5	; 0x05
    2098:	21 15       	cp	r18, r1
    209a:	31 05       	cpc	r19, r1
    209c:	69 f0       	breq	.+26     	; 0x20b8 <GPIO_readPin+0x66>
    209e:	6b c0       	rjmp	.+214    	; 0x2176 <GPIO_readPin+0x124>
    20a0:	4c 81       	ldd	r20, Y+4	; 0x04
    20a2:	5d 81       	ldd	r21, Y+5	; 0x05
    20a4:	42 30       	cpi	r20, 0x02	; 2
    20a6:	51 05       	cpc	r21, r1
    20a8:	b9 f1       	breq	.+110    	; 0x2118 <GPIO_readPin+0xc6>
    20aa:	8c 81       	ldd	r24, Y+4	; 0x04
    20ac:	9d 81       	ldd	r25, Y+5	; 0x05
    20ae:	83 30       	cpi	r24, 0x03	; 3
    20b0:	91 05       	cpc	r25, r1
    20b2:	09 f4       	brne	.+2      	; 0x20b6 <GPIO_readPin+0x64>
    20b4:	49 c0       	rjmp	.+146    	; 0x2148 <GPIO_readPin+0xf6>
    20b6:	5f c0       	rjmp	.+190    	; 0x2176 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    20b8:	e9 e3       	ldi	r30, 0x39	; 57
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	28 2f       	mov	r18, r24
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	8b 81       	ldd	r24, Y+3	; 0x03
    20c4:	88 2f       	mov	r24, r24
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	a9 01       	movw	r20, r18
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <GPIO_readPin+0x7e>
    20cc:	55 95       	asr	r21
    20ce:	47 95       	ror	r20
    20d0:	8a 95       	dec	r24
    20d2:	e2 f7       	brpl	.-8      	; 0x20cc <GPIO_readPin+0x7a>
    20d4:	ca 01       	movw	r24, r20
    20d6:	81 70       	andi	r24, 0x01	; 1
    20d8:	90 70       	andi	r25, 0x00	; 0
    20da:	88 23       	and	r24, r24
    20dc:	19 f0       	breq	.+6      	; 0x20e4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	89 83       	std	Y+1, r24	; 0x01
    20e2:	49 c0       	rjmp	.+146    	; 0x2176 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20e4:	19 82       	std	Y+1, r1	; 0x01
    20e6:	47 c0       	rjmp	.+142    	; 0x2176 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    20e8:	e6 e3       	ldi	r30, 0x36	; 54
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	28 2f       	mov	r18, r24
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	88 2f       	mov	r24, r24
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	a9 01       	movw	r20, r18
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <GPIO_readPin+0xae>
    20fc:	55 95       	asr	r21
    20fe:	47 95       	ror	r20
    2100:	8a 95       	dec	r24
    2102:	e2 f7       	brpl	.-8      	; 0x20fc <GPIO_readPin+0xaa>
    2104:	ca 01       	movw	r24, r20
    2106:	81 70       	andi	r24, 0x01	; 1
    2108:	90 70       	andi	r25, 0x00	; 0
    210a:	88 23       	and	r24, r24
    210c:	19 f0       	breq	.+6      	; 0x2114 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	89 83       	std	Y+1, r24	; 0x01
    2112:	31 c0       	rjmp	.+98     	; 0x2176 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2114:	19 82       	std	Y+1, r1	; 0x01
    2116:	2f c0       	rjmp	.+94     	; 0x2176 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2118:	e3 e3       	ldi	r30, 0x33	; 51
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	28 2f       	mov	r18, r24
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	8b 81       	ldd	r24, Y+3	; 0x03
    2124:	88 2f       	mov	r24, r24
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	a9 01       	movw	r20, r18
    212a:	02 c0       	rjmp	.+4      	; 0x2130 <GPIO_readPin+0xde>
    212c:	55 95       	asr	r21
    212e:	47 95       	ror	r20
    2130:	8a 95       	dec	r24
    2132:	e2 f7       	brpl	.-8      	; 0x212c <GPIO_readPin+0xda>
    2134:	ca 01       	movw	r24, r20
    2136:	81 70       	andi	r24, 0x01	; 1
    2138:	90 70       	andi	r25, 0x00	; 0
    213a:	88 23       	and	r24, r24
    213c:	19 f0       	breq	.+6      	; 0x2144 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	89 83       	std	Y+1, r24	; 0x01
    2142:	19 c0       	rjmp	.+50     	; 0x2176 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2144:	19 82       	std	Y+1, r1	; 0x01
    2146:	17 c0       	rjmp	.+46     	; 0x2176 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2148:	e0 e3       	ldi	r30, 0x30	; 48
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	28 2f       	mov	r18, r24
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	88 2f       	mov	r24, r24
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	a9 01       	movw	r20, r18
    215a:	02 c0       	rjmp	.+4      	; 0x2160 <GPIO_readPin+0x10e>
    215c:	55 95       	asr	r21
    215e:	47 95       	ror	r20
    2160:	8a 95       	dec	r24
    2162:	e2 f7       	brpl	.-8      	; 0x215c <GPIO_readPin+0x10a>
    2164:	ca 01       	movw	r24, r20
    2166:	81 70       	andi	r24, 0x01	; 1
    2168:	90 70       	andi	r25, 0x00	; 0
    216a:	88 23       	and	r24, r24
    216c:	19 f0       	breq	.+6      	; 0x2174 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	89 83       	std	Y+1, r24	; 0x01
    2172:	01 c0       	rjmp	.+2      	; 0x2176 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2174:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2176:	89 81       	ldd	r24, Y+1	; 0x01
}
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	00 d0       	rcall	.+0      	; 0x218e <GPIO_setupPortDirection+0x6>
    218e:	00 d0       	rcall	.+0      	; 0x2190 <GPIO_setupPortDirection+0x8>
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	89 83       	std	Y+1, r24	; 0x01
    2196:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	84 30       	cpi	r24, 0x04	; 4
    219c:	90 f5       	brcc	.+100    	; 0x2202 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	28 2f       	mov	r18, r24
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	3c 83       	std	Y+4, r19	; 0x04
    21a6:	2b 83       	std	Y+3, r18	; 0x03
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	9c 81       	ldd	r25, Y+4	; 0x04
    21ac:	81 30       	cpi	r24, 0x01	; 1
    21ae:	91 05       	cpc	r25, r1
    21b0:	d1 f0       	breq	.+52     	; 0x21e6 <GPIO_setupPortDirection+0x5e>
    21b2:	2b 81       	ldd	r18, Y+3	; 0x03
    21b4:	3c 81       	ldd	r19, Y+4	; 0x04
    21b6:	22 30       	cpi	r18, 0x02	; 2
    21b8:	31 05       	cpc	r19, r1
    21ba:	2c f4       	brge	.+10     	; 0x21c6 <GPIO_setupPortDirection+0x3e>
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	9c 81       	ldd	r25, Y+4	; 0x04
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	61 f0       	breq	.+24     	; 0x21dc <GPIO_setupPortDirection+0x54>
    21c4:	1e c0       	rjmp	.+60     	; 0x2202 <GPIO_setupPortDirection+0x7a>
    21c6:	2b 81       	ldd	r18, Y+3	; 0x03
    21c8:	3c 81       	ldd	r19, Y+4	; 0x04
    21ca:	22 30       	cpi	r18, 0x02	; 2
    21cc:	31 05       	cpc	r19, r1
    21ce:	81 f0       	breq	.+32     	; 0x21f0 <GPIO_setupPortDirection+0x68>
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	9c 81       	ldd	r25, Y+4	; 0x04
    21d4:	83 30       	cpi	r24, 0x03	; 3
    21d6:	91 05       	cpc	r25, r1
    21d8:	81 f0       	breq	.+32     	; 0x21fa <GPIO_setupPortDirection+0x72>
    21da:	13 c0       	rjmp	.+38     	; 0x2202 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    21dc:	ea e3       	ldi	r30, 0x3A	; 58
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	80 83       	st	Z, r24
    21e4:	0e c0       	rjmp	.+28     	; 0x2202 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    21e6:	e7 e3       	ldi	r30, 0x37	; 55
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	80 83       	st	Z, r24
    21ee:	09 c0       	rjmp	.+18     	; 0x2202 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    21f0:	e4 e3       	ldi	r30, 0x34	; 52
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	80 83       	st	Z, r24
    21f8:	04 c0       	rjmp	.+8      	; 0x2202 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    21fa:	e1 e3       	ldi	r30, 0x31	; 49
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2200:	80 83       	st	Z, r24
			break;
		}
	}
}
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	08 95       	ret

00002210 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	00 d0       	rcall	.+0      	; 0x2216 <GPIO_writePort+0x6>
    2216:	00 d0       	rcall	.+0      	; 0x2218 <GPIO_writePort+0x8>
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
    221c:	89 83       	std	Y+1, r24	; 0x01
    221e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	84 30       	cpi	r24, 0x04	; 4
    2224:	90 f5       	brcc	.+100    	; 0x228a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2226:	89 81       	ldd	r24, Y+1	; 0x01
    2228:	28 2f       	mov	r18, r24
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	3c 83       	std	Y+4, r19	; 0x04
    222e:	2b 83       	std	Y+3, r18	; 0x03
    2230:	8b 81       	ldd	r24, Y+3	; 0x03
    2232:	9c 81       	ldd	r25, Y+4	; 0x04
    2234:	81 30       	cpi	r24, 0x01	; 1
    2236:	91 05       	cpc	r25, r1
    2238:	d1 f0       	breq	.+52     	; 0x226e <GPIO_writePort+0x5e>
    223a:	2b 81       	ldd	r18, Y+3	; 0x03
    223c:	3c 81       	ldd	r19, Y+4	; 0x04
    223e:	22 30       	cpi	r18, 0x02	; 2
    2240:	31 05       	cpc	r19, r1
    2242:	2c f4       	brge	.+10     	; 0x224e <GPIO_writePort+0x3e>
    2244:	8b 81       	ldd	r24, Y+3	; 0x03
    2246:	9c 81       	ldd	r25, Y+4	; 0x04
    2248:	00 97       	sbiw	r24, 0x00	; 0
    224a:	61 f0       	breq	.+24     	; 0x2264 <GPIO_writePort+0x54>
    224c:	1e c0       	rjmp	.+60     	; 0x228a <GPIO_writePort+0x7a>
    224e:	2b 81       	ldd	r18, Y+3	; 0x03
    2250:	3c 81       	ldd	r19, Y+4	; 0x04
    2252:	22 30       	cpi	r18, 0x02	; 2
    2254:	31 05       	cpc	r19, r1
    2256:	81 f0       	breq	.+32     	; 0x2278 <GPIO_writePort+0x68>
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	9c 81       	ldd	r25, Y+4	; 0x04
    225c:	83 30       	cpi	r24, 0x03	; 3
    225e:	91 05       	cpc	r25, r1
    2260:	81 f0       	breq	.+32     	; 0x2282 <GPIO_writePort+0x72>
    2262:	13 c0       	rjmp	.+38     	; 0x228a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2264:	eb e3       	ldi	r30, 0x3B	; 59
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	80 83       	st	Z, r24
    226c:	0e c0       	rjmp	.+28     	; 0x228a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    226e:	e8 e3       	ldi	r30, 0x38	; 56
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	80 83       	st	Z, r24
    2276:	09 c0       	rjmp	.+18     	; 0x228a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2278:	e5 e3       	ldi	r30, 0x35	; 53
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	80 83       	st	Z, r24
    2280:	04 c0       	rjmp	.+8      	; 0x228a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2282:	e2 e3       	ldi	r30, 0x32	; 50
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	8a 81       	ldd	r24, Y+2	; 0x02
    2288:	80 83       	st	Z, r24
			break;
		}
	}
}
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	cf 91       	pop	r28
    2294:	df 91       	pop	r29
    2296:	08 95       	ret

00002298 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2298:	df 93       	push	r29
    229a:	cf 93       	push	r28
    229c:	00 d0       	rcall	.+0      	; 0x229e <GPIO_readPort+0x6>
    229e:	00 d0       	rcall	.+0      	; 0x22a0 <GPIO_readPort+0x8>
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    22a6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    22a8:	8a 81       	ldd	r24, Y+2	; 0x02
    22aa:	84 30       	cpi	r24, 0x04	; 4
    22ac:	90 f5       	brcc	.+100    	; 0x2312 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    22ae:	8a 81       	ldd	r24, Y+2	; 0x02
    22b0:	28 2f       	mov	r18, r24
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	3c 83       	std	Y+4, r19	; 0x04
    22b6:	2b 83       	std	Y+3, r18	; 0x03
    22b8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ba:	9c 81       	ldd	r25, Y+4	; 0x04
    22bc:	81 30       	cpi	r24, 0x01	; 1
    22be:	91 05       	cpc	r25, r1
    22c0:	d1 f0       	breq	.+52     	; 0x22f6 <GPIO_readPort+0x5e>
    22c2:	2b 81       	ldd	r18, Y+3	; 0x03
    22c4:	3c 81       	ldd	r19, Y+4	; 0x04
    22c6:	22 30       	cpi	r18, 0x02	; 2
    22c8:	31 05       	cpc	r19, r1
    22ca:	2c f4       	brge	.+10     	; 0x22d6 <GPIO_readPort+0x3e>
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	9c 81       	ldd	r25, Y+4	; 0x04
    22d0:	00 97       	sbiw	r24, 0x00	; 0
    22d2:	61 f0       	breq	.+24     	; 0x22ec <GPIO_readPort+0x54>
    22d4:	1e c0       	rjmp	.+60     	; 0x2312 <GPIO_readPort+0x7a>
    22d6:	2b 81       	ldd	r18, Y+3	; 0x03
    22d8:	3c 81       	ldd	r19, Y+4	; 0x04
    22da:	22 30       	cpi	r18, 0x02	; 2
    22dc:	31 05       	cpc	r19, r1
    22de:	81 f0       	breq	.+32     	; 0x2300 <GPIO_readPort+0x68>
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	9c 81       	ldd	r25, Y+4	; 0x04
    22e4:	83 30       	cpi	r24, 0x03	; 3
    22e6:	91 05       	cpc	r25, r1
    22e8:	81 f0       	breq	.+32     	; 0x230a <GPIO_readPort+0x72>
    22ea:	13 c0       	rjmp	.+38     	; 0x2312 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    22ec:	e9 e3       	ldi	r30, 0x39	; 57
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	0e c0       	rjmp	.+28     	; 0x2312 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    22f6:	e6 e3       	ldi	r30, 0x36	; 54
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	09 c0       	rjmp	.+18     	; 0x2312 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2300:	e3 e3       	ldi	r30, 0x33	; 51
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	89 83       	std	Y+1, r24	; 0x01
    2308:	04 c0       	rjmp	.+8      	; 0x2312 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    230a:	e0 e3       	ldi	r30, 0x30	; 48
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2312:	89 81       	ldd	r24, Y+1	; 0x01
}
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	cf 91       	pop	r28
    231e:	df 91       	pop	r29
    2320:	08 95       	ret

00002322 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2322:	df 93       	push	r29
    2324:	cf 93       	push	r28
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	61 e0       	ldi	r22, 0x01	; 1
    232e:	41 e0       	ldi	r20, 0x01	; 1
    2330:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	62 e0       	ldi	r22, 0x02	; 2
    2338:	41 e0       	ldi	r20, 0x01	; 1
    233a:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	63 e0       	ldi	r22, 0x03	; 3
    2342:	41 e0       	ldi	r20, 0x01	; 1
    2344:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <GPIO_setupPinDirection>

#if (LCD_DATA_BITS_MODE == 4)

	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID,PIN_OUTPUT);
    2348:	82 e0       	ldi	r24, 0x02	; 2
    234a:	60 e0       	ldi	r22, 0x00	; 0
    234c:	41 e0       	ldi	r20, 0x01	; 1
    234e:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+1,PIN_OUTPUT);
    2352:	82 e0       	ldi	r24, 0x02	; 2
    2354:	61 e0       	ldi	r22, 0x01	; 1
    2356:	41 e0       	ldi	r20, 0x01	; 1
    2358:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+2,PIN_OUTPUT);
    235c:	82 e0       	ldi	r24, 0x02	; 2
    235e:	62 e0       	ldi	r22, 0x02	; 2
    2360:	41 e0       	ldi	r20, 0x01	; 1
    2362:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+3,PIN_OUTPUT);
    2366:	82 e0       	ldi	r24, 0x02	; 2
    2368:	63 e0       	ldi	r22, 0x03	; 3
    236a:	41 e0       	ldi	r20, 0x01	; 1
    236c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <GPIO_setupPinDirection>

	LCD_sendCommand(LCD_GO_TO_HOME);
    2370:	82 e0       	ldi	r24, 0x02	; 2
    2372:	0e 94 c7 11 	call	0x238e	; 0x238e <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    2376:	88 e2       	ldi	r24, 0x28	; 40
    2378:	0e 94 c7 11 	call	0x238e	; 0x238e <LCD_sendCommand>
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    237c:	8c e0       	ldi	r24, 0x0C	; 12
    237e:	0e 94 c7 11 	call	0x238e	; 0x238e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	0e 94 c7 11 	call	0x238e	; 0x238e <LCD_sendCommand>
}
    2388:	cf 91       	pop	r28
    238a:	df 91       	pop	r29
    238c:	08 95       	ret

0000238e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    238e:	0f 93       	push	r16
    2390:	1f 93       	push	r17
    2392:	df 93       	push	r29
    2394:	cf 93       	push	r28
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
    239a:	c4 56       	subi	r28, 0x64	; 100
    239c:	d0 40       	sbci	r29, 0x00	; 0
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	cd bf       	out	0x3d, r28	; 61
    23a8:	fe 01       	movw	r30, r28
    23aa:	ec 59       	subi	r30, 0x9C	; 156
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	80 83       	st	Z, r24
	uint8 lcd_port_value = 0;
    23b0:	fe 01       	movw	r30, r28
    23b2:	ed 59       	subi	r30, 0x9D	; 157
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	10 82       	st	Z, r1
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	61 e0       	ldi	r22, 0x01	; 1
    23bc:	40 e0       	ldi	r20, 0x00	; 0
    23be:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	62 e0       	ldi	r22, 0x02	; 2
    23c6:	40 e0       	ldi	r20, 0x00	; 0
    23c8:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <GPIO_writePin>
    23cc:	fe 01       	movw	r30, r28
    23ce:	e1 5a       	subi	r30, 0xA1	; 161
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	a0 e8       	ldi	r26, 0x80	; 128
    23d8:	bf e3       	ldi	r27, 0x3F	; 63
    23da:	80 83       	st	Z, r24
    23dc:	91 83       	std	Z+1, r25	; 0x01
    23de:	a2 83       	std	Z+2, r26	; 0x02
    23e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e2:	8e 01       	movw	r16, r28
    23e4:	05 5a       	subi	r16, 0xA5	; 165
    23e6:	1f 4f       	sbci	r17, 0xFF	; 255
    23e8:	fe 01       	movw	r30, r28
    23ea:	e1 5a       	subi	r30, 0xA1	; 161
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	60 81       	ld	r22, Z
    23f0:	71 81       	ldd	r23, Z+1	; 0x01
    23f2:	82 81       	ldd	r24, Z+2	; 0x02
    23f4:	93 81       	ldd	r25, Z+3	; 0x03
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	4a e7       	ldi	r20, 0x7A	; 122
    23fc:	53 e4       	ldi	r21, 0x43	; 67
    23fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	f8 01       	movw	r30, r16
    2408:	80 83       	st	Z, r24
    240a:	91 83       	std	Z+1, r25	; 0x01
    240c:	a2 83       	std	Z+2, r26	; 0x02
    240e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2410:	fe 01       	movw	r30, r28
    2412:	e5 5a       	subi	r30, 0xA5	; 165
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	60 81       	ld	r22, Z
    2418:	71 81       	ldd	r23, Z+1	; 0x01
    241a:	82 81       	ldd	r24, Z+2	; 0x02
    241c:	93 81       	ldd	r25, Z+3	; 0x03
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e8       	ldi	r20, 0x80	; 128
    2424:	5f e3       	ldi	r21, 0x3F	; 63
    2426:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    242a:	88 23       	and	r24, r24
    242c:	44 f4       	brge	.+16     	; 0x243e <LCD_sendCommand+0xb0>
		__ticks = 1;
    242e:	fe 01       	movw	r30, r28
    2430:	e7 5a       	subi	r30, 0xA7	; 167
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	91 83       	std	Z+1, r25	; 0x01
    243a:	80 83       	st	Z, r24
    243c:	64 c0       	rjmp	.+200    	; 0x2506 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    243e:	fe 01       	movw	r30, r28
    2440:	e5 5a       	subi	r30, 0xA5	; 165
    2442:	ff 4f       	sbci	r31, 0xFF	; 255
    2444:	60 81       	ld	r22, Z
    2446:	71 81       	ldd	r23, Z+1	; 0x01
    2448:	82 81       	ldd	r24, Z+2	; 0x02
    244a:	93 81       	ldd	r25, Z+3	; 0x03
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	3f ef       	ldi	r19, 0xFF	; 255
    2450:	4f e7       	ldi	r20, 0x7F	; 127
    2452:	57 e4       	ldi	r21, 0x47	; 71
    2454:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2458:	18 16       	cp	r1, r24
    245a:	0c f0       	brlt	.+2      	; 0x245e <LCD_sendCommand+0xd0>
    245c:	43 c0       	rjmp	.+134    	; 0x24e4 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245e:	fe 01       	movw	r30, r28
    2460:	e1 5a       	subi	r30, 0xA1	; 161
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	60 81       	ld	r22, Z
    2466:	71 81       	ldd	r23, Z+1	; 0x01
    2468:	82 81       	ldd	r24, Z+2	; 0x02
    246a:	93 81       	ldd	r25, Z+3	; 0x03
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	40 e2       	ldi	r20, 0x20	; 32
    2472:	51 e4       	ldi	r21, 0x41	; 65
    2474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	8e 01       	movw	r16, r28
    247e:	07 5a       	subi	r16, 0xA7	; 167
    2480:	1f 4f       	sbci	r17, 0xFF	; 255
    2482:	bc 01       	movw	r22, r24
    2484:	cd 01       	movw	r24, r26
    2486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	f8 01       	movw	r30, r16
    2490:	91 83       	std	Z+1, r25	; 0x01
    2492:	80 83       	st	Z, r24
    2494:	1f c0       	rjmp	.+62     	; 0x24d4 <LCD_sendCommand+0x146>
    2496:	fe 01       	movw	r30, r28
    2498:	e9 5a       	subi	r30, 0xA9	; 169
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	89 e1       	ldi	r24, 0x19	; 25
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	91 83       	std	Z+1, r25	; 0x01
    24a2:	80 83       	st	Z, r24
    24a4:	fe 01       	movw	r30, r28
    24a6:	e9 5a       	subi	r30, 0xA9	; 169
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	80 81       	ld	r24, Z
    24ac:	91 81       	ldd	r25, Z+1	; 0x01
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	f1 f7       	brne	.-4      	; 0x24ae <LCD_sendCommand+0x120>
    24b2:	fe 01       	movw	r30, r28
    24b4:	e9 5a       	subi	r30, 0xA9	; 169
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	91 83       	std	Z+1, r25	; 0x01
    24ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24bc:	de 01       	movw	r26, r28
    24be:	a7 5a       	subi	r26, 0xA7	; 167
    24c0:	bf 4f       	sbci	r27, 0xFF	; 255
    24c2:	fe 01       	movw	r30, r28
    24c4:	e7 5a       	subi	r30, 0xA7	; 167
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	80 81       	ld	r24, Z
    24ca:	91 81       	ldd	r25, Z+1	; 0x01
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	11 96       	adiw	r26, 0x01	; 1
    24d0:	9c 93       	st	X, r25
    24d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d4:	fe 01       	movw	r30, r28
    24d6:	e7 5a       	subi	r30, 0xA7	; 167
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	80 81       	ld	r24, Z
    24dc:	91 81       	ldd	r25, Z+1	; 0x01
    24de:	00 97       	sbiw	r24, 0x00	; 0
    24e0:	d1 f6       	brne	.-76     	; 0x2496 <LCD_sendCommand+0x108>
    24e2:	27 c0       	rjmp	.+78     	; 0x2532 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e4:	8e 01       	movw	r16, r28
    24e6:	07 5a       	subi	r16, 0xA7	; 167
    24e8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ea:	fe 01       	movw	r30, r28
    24ec:	e5 5a       	subi	r30, 0xA5	; 165
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	60 81       	ld	r22, Z
    24f2:	71 81       	ldd	r23, Z+1	; 0x01
    24f4:	82 81       	ldd	r24, Z+2	; 0x02
    24f6:	93 81       	ldd	r25, Z+3	; 0x03
    24f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	f8 01       	movw	r30, r16
    2502:	91 83       	std	Z+1, r25	; 0x01
    2504:	80 83       	st	Z, r24
    2506:	de 01       	movw	r26, r28
    2508:	ab 5a       	subi	r26, 0xAB	; 171
    250a:	bf 4f       	sbci	r27, 0xFF	; 255
    250c:	fe 01       	movw	r30, r28
    250e:	e7 5a       	subi	r30, 0xA7	; 167
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	80 81       	ld	r24, Z
    2514:	91 81       	ldd	r25, Z+1	; 0x01
    2516:	8d 93       	st	X+, r24
    2518:	9c 93       	st	X, r25
    251a:	fe 01       	movw	r30, r28
    251c:	eb 5a       	subi	r30, 0xAB	; 171
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	80 81       	ld	r24, Z
    2522:	91 81       	ldd	r25, Z+1	; 0x01
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	f1 f7       	brne	.-4      	; 0x2524 <LCD_sendCommand+0x196>
    2528:	fe 01       	movw	r30, r28
    252a:	eb 5a       	subi	r30, 0xAB	; 171
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	91 83       	std	Z+1, r25	; 0x01
    2530:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	63 e0       	ldi	r22, 0x03	; 3
    2536:	41 e0       	ldi	r20, 0x01	; 1
    2538:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <GPIO_writePin>
    253c:	fe 01       	movw	r30, r28
    253e:	ef 5a       	subi	r30, 0xAF	; 175
    2540:	ff 4f       	sbci	r31, 0xFF	; 255
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	a0 e8       	ldi	r26, 0x80	; 128
    2548:	bf e3       	ldi	r27, 0x3F	; 63
    254a:	80 83       	st	Z, r24
    254c:	91 83       	std	Z+1, r25	; 0x01
    254e:	a2 83       	std	Z+2, r26	; 0x02
    2550:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2552:	8e 01       	movw	r16, r28
    2554:	03 5b       	subi	r16, 0xB3	; 179
    2556:	1f 4f       	sbci	r17, 0xFF	; 255
    2558:	fe 01       	movw	r30, r28
    255a:	ef 5a       	subi	r30, 0xAF	; 175
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	60 81       	ld	r22, Z
    2560:	71 81       	ldd	r23, Z+1	; 0x01
    2562:	82 81       	ldd	r24, Z+2	; 0x02
    2564:	93 81       	ldd	r25, Z+3	; 0x03
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	4a e7       	ldi	r20, 0x7A	; 122
    256c:	53 e4       	ldi	r21, 0x43	; 67
    256e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	f8 01       	movw	r30, r16
    2578:	80 83       	st	Z, r24
    257a:	91 83       	std	Z+1, r25	; 0x01
    257c:	a2 83       	std	Z+2, r26	; 0x02
    257e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2580:	fe 01       	movw	r30, r28
    2582:	e3 5b       	subi	r30, 0xB3	; 179
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	60 81       	ld	r22, Z
    2588:	71 81       	ldd	r23, Z+1	; 0x01
    258a:	82 81       	ldd	r24, Z+2	; 0x02
    258c:	93 81       	ldd	r25, Z+3	; 0x03
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	40 e8       	ldi	r20, 0x80	; 128
    2594:	5f e3       	ldi	r21, 0x3F	; 63
    2596:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    259a:	88 23       	and	r24, r24
    259c:	44 f4       	brge	.+16     	; 0x25ae <LCD_sendCommand+0x220>
		__ticks = 1;
    259e:	fe 01       	movw	r30, r28
    25a0:	e5 5b       	subi	r30, 0xB5	; 181
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	91 83       	std	Z+1, r25	; 0x01
    25aa:	80 83       	st	Z, r24
    25ac:	64 c0       	rjmp	.+200    	; 0x2676 <LCD_sendCommand+0x2e8>
	else if (__tmp > 65535)
    25ae:	fe 01       	movw	r30, r28
    25b0:	e3 5b       	subi	r30, 0xB3	; 179
    25b2:	ff 4f       	sbci	r31, 0xFF	; 255
    25b4:	60 81       	ld	r22, Z
    25b6:	71 81       	ldd	r23, Z+1	; 0x01
    25b8:	82 81       	ldd	r24, Z+2	; 0x02
    25ba:	93 81       	ldd	r25, Z+3	; 0x03
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	3f ef       	ldi	r19, 0xFF	; 255
    25c0:	4f e7       	ldi	r20, 0x7F	; 127
    25c2:	57 e4       	ldi	r21, 0x47	; 71
    25c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25c8:	18 16       	cp	r1, r24
    25ca:	0c f0       	brlt	.+2      	; 0x25ce <LCD_sendCommand+0x240>
    25cc:	43 c0       	rjmp	.+134    	; 0x2654 <LCD_sendCommand+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ce:	fe 01       	movw	r30, r28
    25d0:	ef 5a       	subi	r30, 0xAF	; 175
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	60 81       	ld	r22, Z
    25d6:	71 81       	ldd	r23, Z+1	; 0x01
    25d8:	82 81       	ldd	r24, Z+2	; 0x02
    25da:	93 81       	ldd	r25, Z+3	; 0x03
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	40 e2       	ldi	r20, 0x20	; 32
    25e2:	51 e4       	ldi	r21, 0x41	; 65
    25e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	8e 01       	movw	r16, r28
    25ee:	05 5b       	subi	r16, 0xB5	; 181
    25f0:	1f 4f       	sbci	r17, 0xFF	; 255
    25f2:	bc 01       	movw	r22, r24
    25f4:	cd 01       	movw	r24, r26
    25f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	f8 01       	movw	r30, r16
    2600:	91 83       	std	Z+1, r25	; 0x01
    2602:	80 83       	st	Z, r24
    2604:	1f c0       	rjmp	.+62     	; 0x2644 <LCD_sendCommand+0x2b6>
    2606:	fe 01       	movw	r30, r28
    2608:	e7 5b       	subi	r30, 0xB7	; 183
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	89 e1       	ldi	r24, 0x19	; 25
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	91 83       	std	Z+1, r25	; 0x01
    2612:	80 83       	st	Z, r24
    2614:	fe 01       	movw	r30, r28
    2616:	e7 5b       	subi	r30, 0xB7	; 183
    2618:	ff 4f       	sbci	r31, 0xFF	; 255
    261a:	80 81       	ld	r24, Z
    261c:	91 81       	ldd	r25, Z+1	; 0x01
    261e:	01 97       	sbiw	r24, 0x01	; 1
    2620:	f1 f7       	brne	.-4      	; 0x261e <LCD_sendCommand+0x290>
    2622:	fe 01       	movw	r30, r28
    2624:	e7 5b       	subi	r30, 0xB7	; 183
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	91 83       	std	Z+1, r25	; 0x01
    262a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262c:	de 01       	movw	r26, r28
    262e:	a5 5b       	subi	r26, 0xB5	; 181
    2630:	bf 4f       	sbci	r27, 0xFF	; 255
    2632:	fe 01       	movw	r30, r28
    2634:	e5 5b       	subi	r30, 0xB5	; 181
    2636:	ff 4f       	sbci	r31, 0xFF	; 255
    2638:	80 81       	ld	r24, Z
    263a:	91 81       	ldd	r25, Z+1	; 0x01
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	11 96       	adiw	r26, 0x01	; 1
    2640:	9c 93       	st	X, r25
    2642:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2644:	fe 01       	movw	r30, r28
    2646:	e5 5b       	subi	r30, 0xB5	; 181
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	80 81       	ld	r24, Z
    264c:	91 81       	ldd	r25, Z+1	; 0x01
    264e:	00 97       	sbiw	r24, 0x00	; 0
    2650:	d1 f6       	brne	.-76     	; 0x2606 <LCD_sendCommand+0x278>
    2652:	27 c0       	rjmp	.+78     	; 0x26a2 <LCD_sendCommand+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2654:	8e 01       	movw	r16, r28
    2656:	05 5b       	subi	r16, 0xB5	; 181
    2658:	1f 4f       	sbci	r17, 0xFF	; 255
    265a:	fe 01       	movw	r30, r28
    265c:	e3 5b       	subi	r30, 0xB3	; 179
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	60 81       	ld	r22, Z
    2662:	71 81       	ldd	r23, Z+1	; 0x01
    2664:	82 81       	ldd	r24, Z+2	; 0x02
    2666:	93 81       	ldd	r25, Z+3	; 0x03
    2668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	f8 01       	movw	r30, r16
    2672:	91 83       	std	Z+1, r25	; 0x01
    2674:	80 83       	st	Z, r24
    2676:	de 01       	movw	r26, r28
    2678:	a9 5b       	subi	r26, 0xB9	; 185
    267a:	bf 4f       	sbci	r27, 0xFF	; 255
    267c:	fe 01       	movw	r30, r28
    267e:	e5 5b       	subi	r30, 0xB5	; 181
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	80 81       	ld	r24, Z
    2684:	91 81       	ldd	r25, Z+1	; 0x01
    2686:	8d 93       	st	X+, r24
    2688:	9c 93       	st	X, r25
    268a:	fe 01       	movw	r30, r28
    268c:	e9 5b       	subi	r30, 0xB9	; 185
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	80 81       	ld	r24, Z
    2692:	91 81       	ldd	r25, Z+1	; 0x01
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	f1 f7       	brne	.-4      	; 0x2694 <LCD_sendCommand+0x306>
    2698:	fe 01       	movw	r30, r28
    269a:	e9 5b       	subi	r30, 0xB9	; 185
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	91 83       	std	Z+1, r25	; 0x01
    26a0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required command to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    26a2:	82 e0       	ldi	r24, 0x02	; 2
    26a4:	0e 94 4c 11 	call	0x2298	; 0x2298 <GPIO_readPort>
    26a8:	fe 01       	movw	r30, r28
    26aa:	ed 59       	subi	r30, 0x9D	; 157
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (command & 0xF0);
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((command & 0xF0) >> 4);
    26b0:	fe 01       	movw	r30, r28
    26b2:	ed 59       	subi	r30, 0x9D	; 157
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	80 81       	ld	r24, Z
    26b8:	98 2f       	mov	r25, r24
    26ba:	90 7f       	andi	r25, 0xF0	; 240
    26bc:	fe 01       	movw	r30, r28
    26be:	ec 59       	subi	r30, 0x9C	; 156
    26c0:	ff 4f       	sbci	r31, 0xFF	; 255
    26c2:	80 81       	ld	r24, Z
    26c4:	82 95       	swap	r24
    26c6:	8f 70       	andi	r24, 0x0F	; 15
    26c8:	89 2b       	or	r24, r25
    26ca:	fe 01       	movw	r30, r28
    26cc:	ed 59       	subi	r30, 0x9D	; 157
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	80 83       	st	Z, r24
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    26d2:	fe 01       	movw	r30, r28
    26d4:	ed 59       	subi	r30, 0x9D	; 157
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	82 e0       	ldi	r24, 0x02	; 2
    26da:	60 81       	ld	r22, Z
    26dc:	0e 94 08 11 	call	0x2210	; 0x2210 <GPIO_writePort>
    26e0:	fe 01       	movw	r30, r28
    26e2:	ed 5b       	subi	r30, 0xBD	; 189
    26e4:	ff 4f       	sbci	r31, 0xFF	; 255
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	a0 e8       	ldi	r26, 0x80	; 128
    26ec:	bf e3       	ldi	r27, 0x3F	; 63
    26ee:	80 83       	st	Z, r24
    26f0:	91 83       	std	Z+1, r25	; 0x01
    26f2:	a2 83       	std	Z+2, r26	; 0x02
    26f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f6:	8e 01       	movw	r16, r28
    26f8:	01 5c       	subi	r16, 0xC1	; 193
    26fa:	1f 4f       	sbci	r17, 0xFF	; 255
    26fc:	fe 01       	movw	r30, r28
    26fe:	ed 5b       	subi	r30, 0xBD	; 189
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	60 81       	ld	r22, Z
    2704:	71 81       	ldd	r23, Z+1	; 0x01
    2706:	82 81       	ldd	r24, Z+2	; 0x02
    2708:	93 81       	ldd	r25, Z+3	; 0x03
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	4a e7       	ldi	r20, 0x7A	; 122
    2710:	53 e4       	ldi	r21, 0x43	; 67
    2712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	f8 01       	movw	r30, r16
    271c:	80 83       	st	Z, r24
    271e:	91 83       	std	Z+1, r25	; 0x01
    2720:	a2 83       	std	Z+2, r26	; 0x02
    2722:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2724:	fe 01       	movw	r30, r28
    2726:	ff 96       	adiw	r30, 0x3f	; 63
    2728:	60 81       	ld	r22, Z
    272a:	71 81       	ldd	r23, Z+1	; 0x01
    272c:	82 81       	ldd	r24, Z+2	; 0x02
    272e:	93 81       	ldd	r25, Z+3	; 0x03
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	40 e8       	ldi	r20, 0x80	; 128
    2736:	5f e3       	ldi	r21, 0x3F	; 63
    2738:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    273c:	88 23       	and	r24, r24
    273e:	2c f4       	brge	.+10     	; 0x274a <LCD_sendCommand+0x3bc>
		__ticks = 1;
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	9e af       	std	Y+62, r25	; 0x3e
    2746:	8d af       	std	Y+61, r24	; 0x3d
    2748:	46 c0       	rjmp	.+140    	; 0x27d6 <LCD_sendCommand+0x448>
	else if (__tmp > 65535)
    274a:	fe 01       	movw	r30, r28
    274c:	ff 96       	adiw	r30, 0x3f	; 63
    274e:	60 81       	ld	r22, Z
    2750:	71 81       	ldd	r23, Z+1	; 0x01
    2752:	82 81       	ldd	r24, Z+2	; 0x02
    2754:	93 81       	ldd	r25, Z+3	; 0x03
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	3f ef       	ldi	r19, 0xFF	; 255
    275a:	4f e7       	ldi	r20, 0x7F	; 127
    275c:	57 e4       	ldi	r21, 0x47	; 71
    275e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2762:	18 16       	cp	r1, r24
    2764:	64 f5       	brge	.+88     	; 0x27be <LCD_sendCommand+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2766:	fe 01       	movw	r30, r28
    2768:	ed 5b       	subi	r30, 0xBD	; 189
    276a:	ff 4f       	sbci	r31, 0xFF	; 255
    276c:	60 81       	ld	r22, Z
    276e:	71 81       	ldd	r23, Z+1	; 0x01
    2770:	82 81       	ldd	r24, Z+2	; 0x02
    2772:	93 81       	ldd	r25, Z+3	; 0x03
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	40 e2       	ldi	r20, 0x20	; 32
    277a:	51 e4       	ldi	r21, 0x41	; 65
    277c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	bc 01       	movw	r22, r24
    2786:	cd 01       	movw	r24, r26
    2788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	9e af       	std	Y+62, r25	; 0x3e
    2792:	8d af       	std	Y+61, r24	; 0x3d
    2794:	0f c0       	rjmp	.+30     	; 0x27b4 <LCD_sendCommand+0x426>
    2796:	89 e1       	ldi	r24, 0x19	; 25
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	9c af       	std	Y+60, r25	; 0x3c
    279c:	8b af       	std	Y+59, r24	; 0x3b
    279e:	8b ad       	ldd	r24, Y+59	; 0x3b
    27a0:	9c ad       	ldd	r25, Y+60	; 0x3c
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	f1 f7       	brne	.-4      	; 0x27a2 <LCD_sendCommand+0x414>
    27a6:	9c af       	std	Y+60, r25	; 0x3c
    27a8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    27ac:	9e ad       	ldd	r25, Y+62	; 0x3e
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	9e af       	std	Y+62, r25	; 0x3e
    27b2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    27b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    27b8:	00 97       	sbiw	r24, 0x00	; 0
    27ba:	69 f7       	brne	.-38     	; 0x2796 <LCD_sendCommand+0x408>
    27bc:	16 c0       	rjmp	.+44     	; 0x27ea <LCD_sendCommand+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27be:	fe 01       	movw	r30, r28
    27c0:	ff 96       	adiw	r30, 0x3f	; 63
    27c2:	60 81       	ld	r22, Z
    27c4:	71 81       	ldd	r23, Z+1	; 0x01
    27c6:	82 81       	ldd	r24, Z+2	; 0x02
    27c8:	93 81       	ldd	r25, Z+3	; 0x03
    27ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	9e af       	std	Y+62, r25	; 0x3e
    27d4:	8d af       	std	Y+61, r24	; 0x3d
    27d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    27d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    27da:	9a af       	std	Y+58, r25	; 0x3a
    27dc:	89 af       	std	Y+57, r24	; 0x39
    27de:	89 ad       	ldd	r24, Y+57	; 0x39
    27e0:	9a ad       	ldd	r25, Y+58	; 0x3a
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	f1 f7       	brne	.-4      	; 0x27e2 <LCD_sendCommand+0x454>
    27e6:	9a af       	std	Y+58, r25	; 0x3a
    27e8:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	63 e0       	ldi	r22, 0x03	; 3
    27ee:	40 e0       	ldi	r20, 0x00	; 0
    27f0:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <GPIO_writePin>
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	a0 e8       	ldi	r26, 0x80	; 128
    27fa:	bf e3       	ldi	r27, 0x3F	; 63
    27fc:	8d ab       	std	Y+53, r24	; 0x35
    27fe:	9e ab       	std	Y+54, r25	; 0x36
    2800:	af ab       	std	Y+55, r26	; 0x37
    2802:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2804:	6d a9       	ldd	r22, Y+53	; 0x35
    2806:	7e a9       	ldd	r23, Y+54	; 0x36
    2808:	8f a9       	ldd	r24, Y+55	; 0x37
    280a:	98 ad       	ldd	r25, Y+56	; 0x38
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	4a e7       	ldi	r20, 0x7A	; 122
    2812:	53 e4       	ldi	r21, 0x43	; 67
    2814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	89 ab       	std	Y+49, r24	; 0x31
    281e:	9a ab       	std	Y+50, r25	; 0x32
    2820:	ab ab       	std	Y+51, r26	; 0x33
    2822:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2824:	69 a9       	ldd	r22, Y+49	; 0x31
    2826:	7a a9       	ldd	r23, Y+50	; 0x32
    2828:	8b a9       	ldd	r24, Y+51	; 0x33
    282a:	9c a9       	ldd	r25, Y+52	; 0x34
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	40 e8       	ldi	r20, 0x80	; 128
    2832:	5f e3       	ldi	r21, 0x3F	; 63
    2834:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2838:	88 23       	and	r24, r24
    283a:	2c f4       	brge	.+10     	; 0x2846 <LCD_sendCommand+0x4b8>
		__ticks = 1;
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	98 ab       	std	Y+48, r25	; 0x30
    2842:	8f a7       	std	Y+47, r24	; 0x2f
    2844:	3f c0       	rjmp	.+126    	; 0x28c4 <LCD_sendCommand+0x536>
	else if (__tmp > 65535)
    2846:	69 a9       	ldd	r22, Y+49	; 0x31
    2848:	7a a9       	ldd	r23, Y+50	; 0x32
    284a:	8b a9       	ldd	r24, Y+51	; 0x33
    284c:	9c a9       	ldd	r25, Y+52	; 0x34
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	3f ef       	ldi	r19, 0xFF	; 255
    2852:	4f e7       	ldi	r20, 0x7F	; 127
    2854:	57 e4       	ldi	r21, 0x47	; 71
    2856:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    285a:	18 16       	cp	r1, r24
    285c:	4c f5       	brge	.+82     	; 0x28b0 <LCD_sendCommand+0x522>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285e:	6d a9       	ldd	r22, Y+53	; 0x35
    2860:	7e a9       	ldd	r23, Y+54	; 0x36
    2862:	8f a9       	ldd	r24, Y+55	; 0x37
    2864:	98 ad       	ldd	r25, Y+56	; 0x38
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	40 e2       	ldi	r20, 0x20	; 32
    286c:	51 e4       	ldi	r21, 0x41	; 65
    286e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	bc 01       	movw	r22, r24
    2878:	cd 01       	movw	r24, r26
    287a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	98 ab       	std	Y+48, r25	; 0x30
    2884:	8f a7       	std	Y+47, r24	; 0x2f
    2886:	0f c0       	rjmp	.+30     	; 0x28a6 <LCD_sendCommand+0x518>
    2888:	89 e1       	ldi	r24, 0x19	; 25
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	9e a7       	std	Y+46, r25	; 0x2e
    288e:	8d a7       	std	Y+45, r24	; 0x2d
    2890:	8d a5       	ldd	r24, Y+45	; 0x2d
    2892:	9e a5       	ldd	r25, Y+46	; 0x2e
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	f1 f7       	brne	.-4      	; 0x2894 <LCD_sendCommand+0x506>
    2898:	9e a7       	std	Y+46, r25	; 0x2e
    289a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289c:	8f a5       	ldd	r24, Y+47	; 0x2f
    289e:	98 a9       	ldd	r25, Y+48	; 0x30
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	98 ab       	std	Y+48, r25	; 0x30
    28a4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    28a8:	98 a9       	ldd	r25, Y+48	; 0x30
    28aa:	00 97       	sbiw	r24, 0x00	; 0
    28ac:	69 f7       	brne	.-38     	; 0x2888 <LCD_sendCommand+0x4fa>
    28ae:	14 c0       	rjmp	.+40     	; 0x28d8 <LCD_sendCommand+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b0:	69 a9       	ldd	r22, Y+49	; 0x31
    28b2:	7a a9       	ldd	r23, Y+50	; 0x32
    28b4:	8b a9       	ldd	r24, Y+51	; 0x33
    28b6:	9c a9       	ldd	r25, Y+52	; 0x34
    28b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	98 ab       	std	Y+48, r25	; 0x30
    28c2:	8f a7       	std	Y+47, r24	; 0x2f
    28c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    28c6:	98 a9       	ldd	r25, Y+48	; 0x30
    28c8:	9c a7       	std	Y+44, r25	; 0x2c
    28ca:	8b a7       	std	Y+43, r24	; 0x2b
    28cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    28ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	f1 f7       	brne	.-4      	; 0x28d0 <LCD_sendCommand+0x542>
    28d4:	9c a7       	std	Y+44, r25	; 0x2c
    28d6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	63 e0       	ldi	r22, 0x03	; 3
    28dc:	41 e0       	ldi	r20, 0x01	; 1
    28de:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <GPIO_writePin>
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	a0 e8       	ldi	r26, 0x80	; 128
    28e8:	bf e3       	ldi	r27, 0x3F	; 63
    28ea:	8f a3       	std	Y+39, r24	; 0x27
    28ec:	98 a7       	std	Y+40, r25	; 0x28
    28ee:	a9 a7       	std	Y+41, r26	; 0x29
    28f0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f2:	6f a1       	ldd	r22, Y+39	; 0x27
    28f4:	78 a5       	ldd	r23, Y+40	; 0x28
    28f6:	89 a5       	ldd	r24, Y+41	; 0x29
    28f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	4a e7       	ldi	r20, 0x7A	; 122
    2900:	53 e4       	ldi	r21, 0x43	; 67
    2902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	8b a3       	std	Y+35, r24	; 0x23
    290c:	9c a3       	std	Y+36, r25	; 0x24
    290e:	ad a3       	std	Y+37, r26	; 0x25
    2910:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2912:	6b a1       	ldd	r22, Y+35	; 0x23
    2914:	7c a1       	ldd	r23, Y+36	; 0x24
    2916:	8d a1       	ldd	r24, Y+37	; 0x25
    2918:	9e a1       	ldd	r25, Y+38	; 0x26
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e8       	ldi	r20, 0x80	; 128
    2920:	5f e3       	ldi	r21, 0x3F	; 63
    2922:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2926:	88 23       	and	r24, r24
    2928:	2c f4       	brge	.+10     	; 0x2934 <LCD_sendCommand+0x5a6>
		__ticks = 1;
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	9a a3       	std	Y+34, r25	; 0x22
    2930:	89 a3       	std	Y+33, r24	; 0x21
    2932:	3f c0       	rjmp	.+126    	; 0x29b2 <LCD_sendCommand+0x624>
	else if (__tmp > 65535)
    2934:	6b a1       	ldd	r22, Y+35	; 0x23
    2936:	7c a1       	ldd	r23, Y+36	; 0x24
    2938:	8d a1       	ldd	r24, Y+37	; 0x25
    293a:	9e a1       	ldd	r25, Y+38	; 0x26
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	3f ef       	ldi	r19, 0xFF	; 255
    2940:	4f e7       	ldi	r20, 0x7F	; 127
    2942:	57 e4       	ldi	r21, 0x47	; 71
    2944:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2948:	18 16       	cp	r1, r24
    294a:	4c f5       	brge	.+82     	; 0x299e <LCD_sendCommand+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294c:	6f a1       	ldd	r22, Y+39	; 0x27
    294e:	78 a5       	ldd	r23, Y+40	; 0x28
    2950:	89 a5       	ldd	r24, Y+41	; 0x29
    2952:	9a a5       	ldd	r25, Y+42	; 0x2a
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	40 e2       	ldi	r20, 0x20	; 32
    295a:	51 e4       	ldi	r21, 0x41	; 65
    295c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	bc 01       	movw	r22, r24
    2966:	cd 01       	movw	r24, r26
    2968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	9a a3       	std	Y+34, r25	; 0x22
    2972:	89 a3       	std	Y+33, r24	; 0x21
    2974:	0f c0       	rjmp	.+30     	; 0x2994 <LCD_sendCommand+0x606>
    2976:	89 e1       	ldi	r24, 0x19	; 25
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	98 a3       	std	Y+32, r25	; 0x20
    297c:	8f 8f       	std	Y+31, r24	; 0x1f
    297e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2980:	98 a1       	ldd	r25, Y+32	; 0x20
    2982:	01 97       	sbiw	r24, 0x01	; 1
    2984:	f1 f7       	brne	.-4      	; 0x2982 <LCD_sendCommand+0x5f4>
    2986:	98 a3       	std	Y+32, r25	; 0x20
    2988:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    298a:	89 a1       	ldd	r24, Y+33	; 0x21
    298c:	9a a1       	ldd	r25, Y+34	; 0x22
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	9a a3       	std	Y+34, r25	; 0x22
    2992:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2994:	89 a1       	ldd	r24, Y+33	; 0x21
    2996:	9a a1       	ldd	r25, Y+34	; 0x22
    2998:	00 97       	sbiw	r24, 0x00	; 0
    299a:	69 f7       	brne	.-38     	; 0x2976 <LCD_sendCommand+0x5e8>
    299c:	14 c0       	rjmp	.+40     	; 0x29c6 <LCD_sendCommand+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    299e:	6b a1       	ldd	r22, Y+35	; 0x23
    29a0:	7c a1       	ldd	r23, Y+36	; 0x24
    29a2:	8d a1       	ldd	r24, Y+37	; 0x25
    29a4:	9e a1       	ldd	r25, Y+38	; 0x26
    29a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	9a a3       	std	Y+34, r25	; 0x22
    29b0:	89 a3       	std	Y+33, r24	; 0x21
    29b2:	89 a1       	ldd	r24, Y+33	; 0x21
    29b4:	9a a1       	ldd	r25, Y+34	; 0x22
    29b6:	9e 8f       	std	Y+30, r25	; 0x1e
    29b8:	8d 8f       	std	Y+29, r24	; 0x1d
    29ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29be:	01 97       	sbiw	r24, 0x01	; 1
    29c0:	f1 f7       	brne	.-4      	; 0x29be <LCD_sendCommand+0x630>
    29c2:	9e 8f       	std	Y+30, r25	; 0x1e
    29c4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required command to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    29c6:	82 e0       	ldi	r24, 0x02	; 2
    29c8:	0e 94 4c 11 	call	0x2298	; 0x2298 <GPIO_readPort>
    29cc:	fe 01       	movw	r30, r28
    29ce:	ed 59       	subi	r30, 0x9D	; 157
    29d0:	ff 4f       	sbci	r31, 0xFF	; 255
    29d2:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((command & 0x0F) << 4);
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (command & 0x0F);
    29d4:	fe 01       	movw	r30, r28
    29d6:	ed 59       	subi	r30, 0x9D	; 157
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	80 81       	ld	r24, Z
    29dc:	98 2f       	mov	r25, r24
    29de:	90 7f       	andi	r25, 0xF0	; 240
    29e0:	fe 01       	movw	r30, r28
    29e2:	ec 59       	subi	r30, 0x9C	; 156
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	80 81       	ld	r24, Z
    29e8:	8f 70       	andi	r24, 0x0F	; 15
    29ea:	89 2b       	or	r24, r25
    29ec:	fe 01       	movw	r30, r28
    29ee:	ed 59       	subi	r30, 0x9D	; 157
    29f0:	ff 4f       	sbci	r31, 0xFF	; 255
    29f2:	80 83       	st	Z, r24
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    29f4:	fe 01       	movw	r30, r28
    29f6:	ed 59       	subi	r30, 0x9D	; 157
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	82 e0       	ldi	r24, 0x02	; 2
    29fc:	60 81       	ld	r22, Z
    29fe:	0e 94 08 11 	call	0x2210	; 0x2210 <GPIO_writePort>
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	a0 e8       	ldi	r26, 0x80	; 128
    2a08:	bf e3       	ldi	r27, 0x3F	; 63
    2a0a:	89 8f       	std	Y+25, r24	; 0x19
    2a0c:	9a 8f       	std	Y+26, r25	; 0x1a
    2a0e:	ab 8f       	std	Y+27, r26	; 0x1b
    2a10:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a12:	69 8d       	ldd	r22, Y+25	; 0x19
    2a14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	4a e7       	ldi	r20, 0x7A	; 122
    2a20:	53 e4       	ldi	r21, 0x43	; 67
    2a22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	8d 8b       	std	Y+21, r24	; 0x15
    2a2c:	9e 8b       	std	Y+22, r25	; 0x16
    2a2e:	af 8b       	std	Y+23, r26	; 0x17
    2a30:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a32:	6d 89       	ldd	r22, Y+21	; 0x15
    2a34:	7e 89       	ldd	r23, Y+22	; 0x16
    2a36:	8f 89       	ldd	r24, Y+23	; 0x17
    2a38:	98 8d       	ldd	r25, Y+24	; 0x18
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	40 e8       	ldi	r20, 0x80	; 128
    2a40:	5f e3       	ldi	r21, 0x3F	; 63
    2a42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a46:	88 23       	and	r24, r24
    2a48:	2c f4       	brge	.+10     	; 0x2a54 <LCD_sendCommand+0x6c6>
		__ticks = 1;
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	9c 8b       	std	Y+20, r25	; 0x14
    2a50:	8b 8b       	std	Y+19, r24	; 0x13
    2a52:	3f c0       	rjmp	.+126    	; 0x2ad2 <LCD_sendCommand+0x744>
	else if (__tmp > 65535)
    2a54:	6d 89       	ldd	r22, Y+21	; 0x15
    2a56:	7e 89       	ldd	r23, Y+22	; 0x16
    2a58:	8f 89       	ldd	r24, Y+23	; 0x17
    2a5a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	3f ef       	ldi	r19, 0xFF	; 255
    2a60:	4f e7       	ldi	r20, 0x7F	; 127
    2a62:	57 e4       	ldi	r21, 0x47	; 71
    2a64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a68:	18 16       	cp	r1, r24
    2a6a:	4c f5       	brge	.+82     	; 0x2abe <LCD_sendCommand+0x730>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a6c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	40 e2       	ldi	r20, 0x20	; 32
    2a7a:	51 e4       	ldi	r21, 0x41	; 65
    2a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	bc 01       	movw	r22, r24
    2a86:	cd 01       	movw	r24, r26
    2a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	9c 8b       	std	Y+20, r25	; 0x14
    2a92:	8b 8b       	std	Y+19, r24	; 0x13
    2a94:	0f c0       	rjmp	.+30     	; 0x2ab4 <LCD_sendCommand+0x726>
    2a96:	89 e1       	ldi	r24, 0x19	; 25
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	9a 8b       	std	Y+18, r25	; 0x12
    2a9c:	89 8b       	std	Y+17, r24	; 0x11
    2a9e:	89 89       	ldd	r24, Y+17	; 0x11
    2aa0:	9a 89       	ldd	r25, Y+18	; 0x12
    2aa2:	01 97       	sbiw	r24, 0x01	; 1
    2aa4:	f1 f7       	brne	.-4      	; 0x2aa2 <LCD_sendCommand+0x714>
    2aa6:	9a 8b       	std	Y+18, r25	; 0x12
    2aa8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aaa:	8b 89       	ldd	r24, Y+19	; 0x13
    2aac:	9c 89       	ldd	r25, Y+20	; 0x14
    2aae:	01 97       	sbiw	r24, 0x01	; 1
    2ab0:	9c 8b       	std	Y+20, r25	; 0x14
    2ab2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab8:	00 97       	sbiw	r24, 0x00	; 0
    2aba:	69 f7       	brne	.-38     	; 0x2a96 <LCD_sendCommand+0x708>
    2abc:	14 c0       	rjmp	.+40     	; 0x2ae6 <LCD_sendCommand+0x758>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2abe:	6d 89       	ldd	r22, Y+21	; 0x15
    2ac0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aca:	dc 01       	movw	r26, r24
    2acc:	cb 01       	movw	r24, r22
    2ace:	9c 8b       	std	Y+20, r25	; 0x14
    2ad0:	8b 8b       	std	Y+19, r24	; 0x13
    2ad2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad6:	98 8b       	std	Y+16, r25	; 0x10
    2ad8:	8f 87       	std	Y+15, r24	; 0x0f
    2ada:	8f 85       	ldd	r24, Y+15	; 0x0f
    2adc:	98 89       	ldd	r25, Y+16	; 0x10
    2ade:	01 97       	sbiw	r24, 0x01	; 1
    2ae0:	f1 f7       	brne	.-4      	; 0x2ade <LCD_sendCommand+0x750>
    2ae2:	98 8b       	std	Y+16, r25	; 0x10
    2ae4:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	63 e0       	ldi	r22, 0x03	; 3
    2aea:	40 e0       	ldi	r20, 0x00	; 0
    2aec:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <GPIO_writePin>
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	a0 e8       	ldi	r26, 0x80	; 128
    2af6:	bf e3       	ldi	r27, 0x3F	; 63
    2af8:	8b 87       	std	Y+11, r24	; 0x0b
    2afa:	9c 87       	std	Y+12, r25	; 0x0c
    2afc:	ad 87       	std	Y+13, r26	; 0x0d
    2afe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b00:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b02:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	4a e7       	ldi	r20, 0x7A	; 122
    2b0e:	53 e4       	ldi	r21, 0x43	; 67
    2b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	8f 83       	std	Y+7, r24	; 0x07
    2b1a:	98 87       	std	Y+8, r25	; 0x08
    2b1c:	a9 87       	std	Y+9, r26	; 0x09
    2b1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b20:	6f 81       	ldd	r22, Y+7	; 0x07
    2b22:	78 85       	ldd	r23, Y+8	; 0x08
    2b24:	89 85       	ldd	r24, Y+9	; 0x09
    2b26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	40 e8       	ldi	r20, 0x80	; 128
    2b2e:	5f e3       	ldi	r21, 0x3F	; 63
    2b30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b34:	88 23       	and	r24, r24
    2b36:	2c f4       	brge	.+10     	; 0x2b42 <LCD_sendCommand+0x7b4>
		__ticks = 1;
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	9e 83       	std	Y+6, r25	; 0x06
    2b3e:	8d 83       	std	Y+5, r24	; 0x05
    2b40:	3f c0       	rjmp	.+126    	; 0x2bc0 <LCD_sendCommand+0x832>
	else if (__tmp > 65535)
    2b42:	6f 81       	ldd	r22, Y+7	; 0x07
    2b44:	78 85       	ldd	r23, Y+8	; 0x08
    2b46:	89 85       	ldd	r24, Y+9	; 0x09
    2b48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	3f ef       	ldi	r19, 0xFF	; 255
    2b4e:	4f e7       	ldi	r20, 0x7F	; 127
    2b50:	57 e4       	ldi	r21, 0x47	; 71
    2b52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b56:	18 16       	cp	r1, r24
    2b58:	4c f5       	brge	.+82     	; 0x2bac <LCD_sendCommand+0x81e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	40 e2       	ldi	r20, 0x20	; 32
    2b68:	51 e4       	ldi	r21, 0x41	; 65
    2b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6e:	dc 01       	movw	r26, r24
    2b70:	cb 01       	movw	r24, r22
    2b72:	bc 01       	movw	r22, r24
    2b74:	cd 01       	movw	r24, r26
    2b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	9e 83       	std	Y+6, r25	; 0x06
    2b80:	8d 83       	std	Y+5, r24	; 0x05
    2b82:	0f c0       	rjmp	.+30     	; 0x2ba2 <LCD_sendCommand+0x814>
    2b84:	89 e1       	ldi	r24, 0x19	; 25
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	9c 83       	std	Y+4, r25	; 0x04
    2b8a:	8b 83       	std	Y+3, r24	; 0x03
    2b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b90:	01 97       	sbiw	r24, 0x01	; 1
    2b92:	f1 f7       	brne	.-4      	; 0x2b90 <LCD_sendCommand+0x802>
    2b94:	9c 83       	std	Y+4, r25	; 0x04
    2b96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b98:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	9e 83       	std	Y+6, r25	; 0x06
    2ba0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba6:	00 97       	sbiw	r24, 0x00	; 0
    2ba8:	69 f7       	brne	.-38     	; 0x2b84 <LCD_sendCommand+0x7f6>
    2baa:	14 c0       	rjmp	.+40     	; 0x2bd4 <LCD_sendCommand+0x846>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bac:	6f 81       	ldd	r22, Y+7	; 0x07
    2bae:	78 85       	ldd	r23, Y+8	; 0x08
    2bb0:	89 85       	ldd	r24, Y+9	; 0x09
    2bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	9e 83       	std	Y+6, r25	; 0x06
    2bbe:	8d 83       	std	Y+5, r24	; 0x05
    2bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc4:	9a 83       	std	Y+2, r25	; 0x02
    2bc6:	89 83       	std	Y+1, r24	; 0x01
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	9a 81       	ldd	r25, Y+2	; 0x02
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	f1 f7       	brne	.-4      	; 0x2bcc <LCD_sendCommand+0x83e>
    2bd0:	9a 83       	std	Y+2, r25	; 0x02
    2bd2:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2bd4:	cc 59       	subi	r28, 0x9C	; 156
    2bd6:	df 4f       	sbci	r29, 0xFF	; 255
    2bd8:	0f b6       	in	r0, 0x3f	; 63
    2bda:	f8 94       	cli
    2bdc:	de bf       	out	0x3e, r29	; 62
    2bde:	0f be       	out	0x3f, r0	; 63
    2be0:	cd bf       	out	0x3d, r28	; 61
    2be2:	cf 91       	pop	r28
    2be4:	df 91       	pop	r29
    2be6:	1f 91       	pop	r17
    2be8:	0f 91       	pop	r16
    2bea:	08 95       	ret

00002bec <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2bec:	0f 93       	push	r16
    2bee:	1f 93       	push	r17
    2bf0:	df 93       	push	r29
    2bf2:	cf 93       	push	r28
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
    2bf8:	c4 56       	subi	r28, 0x64	; 100
    2bfa:	d0 40       	sbci	r29, 0x00	; 0
    2bfc:	0f b6       	in	r0, 0x3f	; 63
    2bfe:	f8 94       	cli
    2c00:	de bf       	out	0x3e, r29	; 62
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	cd bf       	out	0x3d, r28	; 61
    2c06:	fe 01       	movw	r30, r28
    2c08:	ec 59       	subi	r30, 0x9C	; 156
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	80 83       	st	Z, r24
	uint8 lcd_port_value = 0;
    2c0e:	fe 01       	movw	r30, r28
    2c10:	ed 59       	subi	r30, 0x9D	; 157
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	10 82       	st	Z, r1
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	61 e0       	ldi	r22, 0x01	; 1
    2c1a:	41 e0       	ldi	r20, 0x01	; 1
    2c1c:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	62 e0       	ldi	r22, 0x02	; 2
    2c24:	40 e0       	ldi	r20, 0x00	; 0
    2c26:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <GPIO_writePin>
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	e1 5a       	subi	r30, 0xA1	; 161
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	a0 e8       	ldi	r26, 0x80	; 128
    2c36:	bf e3       	ldi	r27, 0x3F	; 63
    2c38:	80 83       	st	Z, r24
    2c3a:	91 83       	std	Z+1, r25	; 0x01
    2c3c:	a2 83       	std	Z+2, r26	; 0x02
    2c3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c40:	8e 01       	movw	r16, r28
    2c42:	05 5a       	subi	r16, 0xA5	; 165
    2c44:	1f 4f       	sbci	r17, 0xFF	; 255
    2c46:	fe 01       	movw	r30, r28
    2c48:	e1 5a       	subi	r30, 0xA1	; 161
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	60 81       	ld	r22, Z
    2c4e:	71 81       	ldd	r23, Z+1	; 0x01
    2c50:	82 81       	ldd	r24, Z+2	; 0x02
    2c52:	93 81       	ldd	r25, Z+3	; 0x03
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	4a e7       	ldi	r20, 0x7A	; 122
    2c5a:	53 e4       	ldi	r21, 0x43	; 67
    2c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	f8 01       	movw	r30, r16
    2c66:	80 83       	st	Z, r24
    2c68:	91 83       	std	Z+1, r25	; 0x01
    2c6a:	a2 83       	std	Z+2, r26	; 0x02
    2c6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c6e:	fe 01       	movw	r30, r28
    2c70:	e5 5a       	subi	r30, 0xA5	; 165
    2c72:	ff 4f       	sbci	r31, 0xFF	; 255
    2c74:	60 81       	ld	r22, Z
    2c76:	71 81       	ldd	r23, Z+1	; 0x01
    2c78:	82 81       	ldd	r24, Z+2	; 0x02
    2c7a:	93 81       	ldd	r25, Z+3	; 0x03
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	40 e8       	ldi	r20, 0x80	; 128
    2c82:	5f e3       	ldi	r21, 0x3F	; 63
    2c84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c88:	88 23       	and	r24, r24
    2c8a:	44 f4       	brge	.+16     	; 0x2c9c <LCD_displayCharacter+0xb0>
		__ticks = 1;
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	e7 5a       	subi	r30, 0xA7	; 167
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	91 83       	std	Z+1, r25	; 0x01
    2c98:	80 83       	st	Z, r24
    2c9a:	64 c0       	rjmp	.+200    	; 0x2d64 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	e5 5a       	subi	r30, 0xA5	; 165
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	60 81       	ld	r22, Z
    2ca4:	71 81       	ldd	r23, Z+1	; 0x01
    2ca6:	82 81       	ldd	r24, Z+2	; 0x02
    2ca8:	93 81       	ldd	r25, Z+3	; 0x03
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	3f ef       	ldi	r19, 0xFF	; 255
    2cae:	4f e7       	ldi	r20, 0x7F	; 127
    2cb0:	57 e4       	ldi	r21, 0x47	; 71
    2cb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cb6:	18 16       	cp	r1, r24
    2cb8:	0c f0       	brlt	.+2      	; 0x2cbc <LCD_displayCharacter+0xd0>
    2cba:	43 c0       	rjmp	.+134    	; 0x2d42 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	e1 5a       	subi	r30, 0xA1	; 161
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	60 81       	ld	r22, Z
    2cc4:	71 81       	ldd	r23, Z+1	; 0x01
    2cc6:	82 81       	ldd	r24, Z+2	; 0x02
    2cc8:	93 81       	ldd	r25, Z+3	; 0x03
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	40 e2       	ldi	r20, 0x20	; 32
    2cd0:	51 e4       	ldi	r21, 0x41	; 65
    2cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	8e 01       	movw	r16, r28
    2cdc:	07 5a       	subi	r16, 0xA7	; 167
    2cde:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce0:	bc 01       	movw	r22, r24
    2ce2:	cd 01       	movw	r24, r26
    2ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	f8 01       	movw	r30, r16
    2cee:	91 83       	std	Z+1, r25	; 0x01
    2cf0:	80 83       	st	Z, r24
    2cf2:	1f c0       	rjmp	.+62     	; 0x2d32 <LCD_displayCharacter+0x146>
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	e9 5a       	subi	r30, 0xA9	; 169
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	89 e1       	ldi	r24, 0x19	; 25
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	91 83       	std	Z+1, r25	; 0x01
    2d00:	80 83       	st	Z, r24
    2d02:	fe 01       	movw	r30, r28
    2d04:	e9 5a       	subi	r30, 0xA9	; 169
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	80 81       	ld	r24, Z
    2d0a:	91 81       	ldd	r25, Z+1	; 0x01
    2d0c:	01 97       	sbiw	r24, 0x01	; 1
    2d0e:	f1 f7       	brne	.-4      	; 0x2d0c <LCD_displayCharacter+0x120>
    2d10:	fe 01       	movw	r30, r28
    2d12:	e9 5a       	subi	r30, 0xA9	; 169
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	91 83       	std	Z+1, r25	; 0x01
    2d18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d1a:	de 01       	movw	r26, r28
    2d1c:	a7 5a       	subi	r26, 0xA7	; 167
    2d1e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d20:	fe 01       	movw	r30, r28
    2d22:	e7 5a       	subi	r30, 0xA7	; 167
    2d24:	ff 4f       	sbci	r31, 0xFF	; 255
    2d26:	80 81       	ld	r24, Z
    2d28:	91 81       	ldd	r25, Z+1	; 0x01
    2d2a:	01 97       	sbiw	r24, 0x01	; 1
    2d2c:	11 96       	adiw	r26, 0x01	; 1
    2d2e:	9c 93       	st	X, r25
    2d30:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d32:	fe 01       	movw	r30, r28
    2d34:	e7 5a       	subi	r30, 0xA7	; 167
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	80 81       	ld	r24, Z
    2d3a:	91 81       	ldd	r25, Z+1	; 0x01
    2d3c:	00 97       	sbiw	r24, 0x00	; 0
    2d3e:	d1 f6       	brne	.-76     	; 0x2cf4 <LCD_displayCharacter+0x108>
    2d40:	27 c0       	rjmp	.+78     	; 0x2d90 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d42:	8e 01       	movw	r16, r28
    2d44:	07 5a       	subi	r16, 0xA7	; 167
    2d46:	1f 4f       	sbci	r17, 0xFF	; 255
    2d48:	fe 01       	movw	r30, r28
    2d4a:	e5 5a       	subi	r30, 0xA5	; 165
    2d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4e:	60 81       	ld	r22, Z
    2d50:	71 81       	ldd	r23, Z+1	; 0x01
    2d52:	82 81       	ldd	r24, Z+2	; 0x02
    2d54:	93 81       	ldd	r25, Z+3	; 0x03
    2d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	f8 01       	movw	r30, r16
    2d60:	91 83       	std	Z+1, r25	; 0x01
    2d62:	80 83       	st	Z, r24
    2d64:	de 01       	movw	r26, r28
    2d66:	ab 5a       	subi	r26, 0xAB	; 171
    2d68:	bf 4f       	sbci	r27, 0xFF	; 255
    2d6a:	fe 01       	movw	r30, r28
    2d6c:	e7 5a       	subi	r30, 0xA7	; 167
    2d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d70:	80 81       	ld	r24, Z
    2d72:	91 81       	ldd	r25, Z+1	; 0x01
    2d74:	8d 93       	st	X+, r24
    2d76:	9c 93       	st	X, r25
    2d78:	fe 01       	movw	r30, r28
    2d7a:	eb 5a       	subi	r30, 0xAB	; 171
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	80 81       	ld	r24, Z
    2d80:	91 81       	ldd	r25, Z+1	; 0x01
    2d82:	01 97       	sbiw	r24, 0x01	; 1
    2d84:	f1 f7       	brne	.-4      	; 0x2d82 <LCD_displayCharacter+0x196>
    2d86:	fe 01       	movw	r30, r28
    2d88:	eb 5a       	subi	r30, 0xAB	; 171
    2d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8c:	91 83       	std	Z+1, r25	; 0x01
    2d8e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	63 e0       	ldi	r22, 0x03	; 3
    2d94:	41 e0       	ldi	r20, 0x01	; 1
    2d96:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <GPIO_writePin>
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	ef 5a       	subi	r30, 0xAF	; 175
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	80 e0       	ldi	r24, 0x00	; 0
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	a0 e8       	ldi	r26, 0x80	; 128
    2da6:	bf e3       	ldi	r27, 0x3F	; 63
    2da8:	80 83       	st	Z, r24
    2daa:	91 83       	std	Z+1, r25	; 0x01
    2dac:	a2 83       	std	Z+2, r26	; 0x02
    2dae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2db0:	8e 01       	movw	r16, r28
    2db2:	03 5b       	subi	r16, 0xB3	; 179
    2db4:	1f 4f       	sbci	r17, 0xFF	; 255
    2db6:	fe 01       	movw	r30, r28
    2db8:	ef 5a       	subi	r30, 0xAF	; 175
    2dba:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbc:	60 81       	ld	r22, Z
    2dbe:	71 81       	ldd	r23, Z+1	; 0x01
    2dc0:	82 81       	ldd	r24, Z+2	; 0x02
    2dc2:	93 81       	ldd	r25, Z+3	; 0x03
    2dc4:	20 e0       	ldi	r18, 0x00	; 0
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	4a e7       	ldi	r20, 0x7A	; 122
    2dca:	53 e4       	ldi	r21, 0x43	; 67
    2dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	f8 01       	movw	r30, r16
    2dd6:	80 83       	st	Z, r24
    2dd8:	91 83       	std	Z+1, r25	; 0x01
    2dda:	a2 83       	std	Z+2, r26	; 0x02
    2ddc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dde:	fe 01       	movw	r30, r28
    2de0:	e3 5b       	subi	r30, 0xB3	; 179
    2de2:	ff 4f       	sbci	r31, 0xFF	; 255
    2de4:	60 81       	ld	r22, Z
    2de6:	71 81       	ldd	r23, Z+1	; 0x01
    2de8:	82 81       	ldd	r24, Z+2	; 0x02
    2dea:	93 81       	ldd	r25, Z+3	; 0x03
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	40 e8       	ldi	r20, 0x80	; 128
    2df2:	5f e3       	ldi	r21, 0x3F	; 63
    2df4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2df8:	88 23       	and	r24, r24
    2dfa:	44 f4       	brge	.+16     	; 0x2e0c <LCD_displayCharacter+0x220>
		__ticks = 1;
    2dfc:	fe 01       	movw	r30, r28
    2dfe:	e5 5b       	subi	r30, 0xB5	; 181
    2e00:	ff 4f       	sbci	r31, 0xFF	; 255
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	91 83       	std	Z+1, r25	; 0x01
    2e08:	80 83       	st	Z, r24
    2e0a:	64 c0       	rjmp	.+200    	; 0x2ed4 <LCD_displayCharacter+0x2e8>
	else if (__tmp > 65535)
    2e0c:	fe 01       	movw	r30, r28
    2e0e:	e3 5b       	subi	r30, 0xB3	; 179
    2e10:	ff 4f       	sbci	r31, 0xFF	; 255
    2e12:	60 81       	ld	r22, Z
    2e14:	71 81       	ldd	r23, Z+1	; 0x01
    2e16:	82 81       	ldd	r24, Z+2	; 0x02
    2e18:	93 81       	ldd	r25, Z+3	; 0x03
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
    2e1c:	3f ef       	ldi	r19, 0xFF	; 255
    2e1e:	4f e7       	ldi	r20, 0x7F	; 127
    2e20:	57 e4       	ldi	r21, 0x47	; 71
    2e22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e26:	18 16       	cp	r1, r24
    2e28:	0c f0       	brlt	.+2      	; 0x2e2c <LCD_displayCharacter+0x240>
    2e2a:	43 c0       	rjmp	.+134    	; 0x2eb2 <LCD_displayCharacter+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e2c:	fe 01       	movw	r30, r28
    2e2e:	ef 5a       	subi	r30, 0xAF	; 175
    2e30:	ff 4f       	sbci	r31, 0xFF	; 255
    2e32:	60 81       	ld	r22, Z
    2e34:	71 81       	ldd	r23, Z+1	; 0x01
    2e36:	82 81       	ldd	r24, Z+2	; 0x02
    2e38:	93 81       	ldd	r25, Z+3	; 0x03
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	40 e2       	ldi	r20, 0x20	; 32
    2e40:	51 e4       	ldi	r21, 0x41	; 65
    2e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e46:	dc 01       	movw	r26, r24
    2e48:	cb 01       	movw	r24, r22
    2e4a:	8e 01       	movw	r16, r28
    2e4c:	05 5b       	subi	r16, 0xB5	; 181
    2e4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e50:	bc 01       	movw	r22, r24
    2e52:	cd 01       	movw	r24, r26
    2e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	f8 01       	movw	r30, r16
    2e5e:	91 83       	std	Z+1, r25	; 0x01
    2e60:	80 83       	st	Z, r24
    2e62:	1f c0       	rjmp	.+62     	; 0x2ea2 <LCD_displayCharacter+0x2b6>
    2e64:	fe 01       	movw	r30, r28
    2e66:	e7 5b       	subi	r30, 0xB7	; 183
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	89 e1       	ldi	r24, 0x19	; 25
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	91 83       	std	Z+1, r25	; 0x01
    2e70:	80 83       	st	Z, r24
    2e72:	fe 01       	movw	r30, r28
    2e74:	e7 5b       	subi	r30, 0xB7	; 183
    2e76:	ff 4f       	sbci	r31, 0xFF	; 255
    2e78:	80 81       	ld	r24, Z
    2e7a:	91 81       	ldd	r25, Z+1	; 0x01
    2e7c:	01 97       	sbiw	r24, 0x01	; 1
    2e7e:	f1 f7       	brne	.-4      	; 0x2e7c <LCD_displayCharacter+0x290>
    2e80:	fe 01       	movw	r30, r28
    2e82:	e7 5b       	subi	r30, 0xB7	; 183
    2e84:	ff 4f       	sbci	r31, 0xFF	; 255
    2e86:	91 83       	std	Z+1, r25	; 0x01
    2e88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e8a:	de 01       	movw	r26, r28
    2e8c:	a5 5b       	subi	r26, 0xB5	; 181
    2e8e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e90:	fe 01       	movw	r30, r28
    2e92:	e5 5b       	subi	r30, 0xB5	; 181
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	80 81       	ld	r24, Z
    2e98:	91 81       	ldd	r25, Z+1	; 0x01
    2e9a:	01 97       	sbiw	r24, 0x01	; 1
    2e9c:	11 96       	adiw	r26, 0x01	; 1
    2e9e:	9c 93       	st	X, r25
    2ea0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	e5 5b       	subi	r30, 0xB5	; 181
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	80 81       	ld	r24, Z
    2eaa:	91 81       	ldd	r25, Z+1	; 0x01
    2eac:	00 97       	sbiw	r24, 0x00	; 0
    2eae:	d1 f6       	brne	.-76     	; 0x2e64 <LCD_displayCharacter+0x278>
    2eb0:	27 c0       	rjmp	.+78     	; 0x2f00 <LCD_displayCharacter+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb2:	8e 01       	movw	r16, r28
    2eb4:	05 5b       	subi	r16, 0xB5	; 181
    2eb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb8:	fe 01       	movw	r30, r28
    2eba:	e3 5b       	subi	r30, 0xB3	; 179
    2ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebe:	60 81       	ld	r22, Z
    2ec0:	71 81       	ldd	r23, Z+1	; 0x01
    2ec2:	82 81       	ldd	r24, Z+2	; 0x02
    2ec4:	93 81       	ldd	r25, Z+3	; 0x03
    2ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	f8 01       	movw	r30, r16
    2ed0:	91 83       	std	Z+1, r25	; 0x01
    2ed2:	80 83       	st	Z, r24
    2ed4:	de 01       	movw	r26, r28
    2ed6:	a9 5b       	subi	r26, 0xB9	; 185
    2ed8:	bf 4f       	sbci	r27, 0xFF	; 255
    2eda:	fe 01       	movw	r30, r28
    2edc:	e5 5b       	subi	r30, 0xB5	; 181
    2ede:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee0:	80 81       	ld	r24, Z
    2ee2:	91 81       	ldd	r25, Z+1	; 0x01
    2ee4:	8d 93       	st	X+, r24
    2ee6:	9c 93       	st	X, r25
    2ee8:	fe 01       	movw	r30, r28
    2eea:	e9 5b       	subi	r30, 0xB9	; 185
    2eec:	ff 4f       	sbci	r31, 0xFF	; 255
    2eee:	80 81       	ld	r24, Z
    2ef0:	91 81       	ldd	r25, Z+1	; 0x01
    2ef2:	01 97       	sbiw	r24, 0x01	; 1
    2ef4:	f1 f7       	brne	.-4      	; 0x2ef2 <LCD_displayCharacter+0x306>
    2ef6:	fe 01       	movw	r30, r28
    2ef8:	e9 5b       	subi	r30, 0xB9	; 185
    2efa:	ff 4f       	sbci	r31, 0xFF	; 255
    2efc:	91 83       	std	Z+1, r25	; 0x01
    2efe:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required data to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    2f00:	82 e0       	ldi	r24, 0x02	; 2
    2f02:	0e 94 4c 11 	call	0x2298	; 0x2298 <GPIO_readPort>
    2f06:	fe 01       	movw	r30, r28
    2f08:	ed 59       	subi	r30, 0x9D	; 157
    2f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0c:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (data & 0xF0);
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((data & 0xF0) >> 4);
    2f0e:	fe 01       	movw	r30, r28
    2f10:	ed 59       	subi	r30, 0x9D	; 157
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	80 81       	ld	r24, Z
    2f16:	98 2f       	mov	r25, r24
    2f18:	90 7f       	andi	r25, 0xF0	; 240
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	ec 59       	subi	r30, 0x9C	; 156
    2f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f20:	80 81       	ld	r24, Z
    2f22:	82 95       	swap	r24
    2f24:	8f 70       	andi	r24, 0x0F	; 15
    2f26:	89 2b       	or	r24, r25
    2f28:	fe 01       	movw	r30, r28
    2f2a:	ed 59       	subi	r30, 0x9D	; 157
    2f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2e:	80 83       	st	Z, r24
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    2f30:	fe 01       	movw	r30, r28
    2f32:	ed 59       	subi	r30, 0x9D	; 157
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	82 e0       	ldi	r24, 0x02	; 2
    2f38:	60 81       	ld	r22, Z
    2f3a:	0e 94 08 11 	call	0x2210	; 0x2210 <GPIO_writePort>
    2f3e:	fe 01       	movw	r30, r28
    2f40:	ed 5b       	subi	r30, 0xBD	; 189
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	a0 e8       	ldi	r26, 0x80	; 128
    2f4a:	bf e3       	ldi	r27, 0x3F	; 63
    2f4c:	80 83       	st	Z, r24
    2f4e:	91 83       	std	Z+1, r25	; 0x01
    2f50:	a2 83       	std	Z+2, r26	; 0x02
    2f52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f54:	8e 01       	movw	r16, r28
    2f56:	01 5c       	subi	r16, 0xC1	; 193
    2f58:	1f 4f       	sbci	r17, 0xFF	; 255
    2f5a:	fe 01       	movw	r30, r28
    2f5c:	ed 5b       	subi	r30, 0xBD	; 189
    2f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f60:	60 81       	ld	r22, Z
    2f62:	71 81       	ldd	r23, Z+1	; 0x01
    2f64:	82 81       	ldd	r24, Z+2	; 0x02
    2f66:	93 81       	ldd	r25, Z+3	; 0x03
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	4a e7       	ldi	r20, 0x7A	; 122
    2f6e:	53 e4       	ldi	r21, 0x43	; 67
    2f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	f8 01       	movw	r30, r16
    2f7a:	80 83       	st	Z, r24
    2f7c:	91 83       	std	Z+1, r25	; 0x01
    2f7e:	a2 83       	std	Z+2, r26	; 0x02
    2f80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f82:	fe 01       	movw	r30, r28
    2f84:	ff 96       	adiw	r30, 0x3f	; 63
    2f86:	60 81       	ld	r22, Z
    2f88:	71 81       	ldd	r23, Z+1	; 0x01
    2f8a:	82 81       	ldd	r24, Z+2	; 0x02
    2f8c:	93 81       	ldd	r25, Z+3	; 0x03
    2f8e:	20 e0       	ldi	r18, 0x00	; 0
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	40 e8       	ldi	r20, 0x80	; 128
    2f94:	5f e3       	ldi	r21, 0x3F	; 63
    2f96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f9a:	88 23       	and	r24, r24
    2f9c:	2c f4       	brge	.+10     	; 0x2fa8 <LCD_displayCharacter+0x3bc>
		__ticks = 1;
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	9e af       	std	Y+62, r25	; 0x3e
    2fa4:	8d af       	std	Y+61, r24	; 0x3d
    2fa6:	46 c0       	rjmp	.+140    	; 0x3034 <LCD_displayCharacter+0x448>
	else if (__tmp > 65535)
    2fa8:	fe 01       	movw	r30, r28
    2faa:	ff 96       	adiw	r30, 0x3f	; 63
    2fac:	60 81       	ld	r22, Z
    2fae:	71 81       	ldd	r23, Z+1	; 0x01
    2fb0:	82 81       	ldd	r24, Z+2	; 0x02
    2fb2:	93 81       	ldd	r25, Z+3	; 0x03
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	3f ef       	ldi	r19, 0xFF	; 255
    2fb8:	4f e7       	ldi	r20, 0x7F	; 127
    2fba:	57 e4       	ldi	r21, 0x47	; 71
    2fbc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fc0:	18 16       	cp	r1, r24
    2fc2:	64 f5       	brge	.+88     	; 0x301c <LCD_displayCharacter+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc4:	fe 01       	movw	r30, r28
    2fc6:	ed 5b       	subi	r30, 0xBD	; 189
    2fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fca:	60 81       	ld	r22, Z
    2fcc:	71 81       	ldd	r23, Z+1	; 0x01
    2fce:	82 81       	ldd	r24, Z+2	; 0x02
    2fd0:	93 81       	ldd	r25, Z+3	; 0x03
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	40 e2       	ldi	r20, 0x20	; 32
    2fd8:	51 e4       	ldi	r21, 0x41	; 65
    2fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	bc 01       	movw	r22, r24
    2fe4:	cd 01       	movw	r24, r26
    2fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	9e af       	std	Y+62, r25	; 0x3e
    2ff0:	8d af       	std	Y+61, r24	; 0x3d
    2ff2:	0f c0       	rjmp	.+30     	; 0x3012 <LCD_displayCharacter+0x426>
    2ff4:	89 e1       	ldi	r24, 0x19	; 25
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	9c af       	std	Y+60, r25	; 0x3c
    2ffa:	8b af       	std	Y+59, r24	; 0x3b
    2ffc:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ffe:	9c ad       	ldd	r25, Y+60	; 0x3c
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	f1 f7       	brne	.-4      	; 0x3000 <LCD_displayCharacter+0x414>
    3004:	9c af       	std	Y+60, r25	; 0x3c
    3006:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3008:	8d ad       	ldd	r24, Y+61	; 0x3d
    300a:	9e ad       	ldd	r25, Y+62	; 0x3e
    300c:	01 97       	sbiw	r24, 0x01	; 1
    300e:	9e af       	std	Y+62, r25	; 0x3e
    3010:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3012:	8d ad       	ldd	r24, Y+61	; 0x3d
    3014:	9e ad       	ldd	r25, Y+62	; 0x3e
    3016:	00 97       	sbiw	r24, 0x00	; 0
    3018:	69 f7       	brne	.-38     	; 0x2ff4 <LCD_displayCharacter+0x408>
    301a:	16 c0       	rjmp	.+44     	; 0x3048 <LCD_displayCharacter+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301c:	fe 01       	movw	r30, r28
    301e:	ff 96       	adiw	r30, 0x3f	; 63
    3020:	60 81       	ld	r22, Z
    3022:	71 81       	ldd	r23, Z+1	; 0x01
    3024:	82 81       	ldd	r24, Z+2	; 0x02
    3026:	93 81       	ldd	r25, Z+3	; 0x03
    3028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    302c:	dc 01       	movw	r26, r24
    302e:	cb 01       	movw	r24, r22
    3030:	9e af       	std	Y+62, r25	; 0x3e
    3032:	8d af       	std	Y+61, r24	; 0x3d
    3034:	8d ad       	ldd	r24, Y+61	; 0x3d
    3036:	9e ad       	ldd	r25, Y+62	; 0x3e
    3038:	9a af       	std	Y+58, r25	; 0x3a
    303a:	89 af       	std	Y+57, r24	; 0x39
    303c:	89 ad       	ldd	r24, Y+57	; 0x39
    303e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3040:	01 97       	sbiw	r24, 0x01	; 1
    3042:	f1 f7       	brne	.-4      	; 0x3040 <LCD_displayCharacter+0x454>
    3044:	9a af       	std	Y+58, r25	; 0x3a
    3046:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	63 e0       	ldi	r22, 0x03	; 3
    304c:	40 e0       	ldi	r20, 0x00	; 0
    304e:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <GPIO_writePin>
    3052:	80 e0       	ldi	r24, 0x00	; 0
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	a0 e8       	ldi	r26, 0x80	; 128
    3058:	bf e3       	ldi	r27, 0x3F	; 63
    305a:	8d ab       	std	Y+53, r24	; 0x35
    305c:	9e ab       	std	Y+54, r25	; 0x36
    305e:	af ab       	std	Y+55, r26	; 0x37
    3060:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3062:	6d a9       	ldd	r22, Y+53	; 0x35
    3064:	7e a9       	ldd	r23, Y+54	; 0x36
    3066:	8f a9       	ldd	r24, Y+55	; 0x37
    3068:	98 ad       	ldd	r25, Y+56	; 0x38
    306a:	20 e0       	ldi	r18, 0x00	; 0
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	4a e7       	ldi	r20, 0x7A	; 122
    3070:	53 e4       	ldi	r21, 0x43	; 67
    3072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3076:	dc 01       	movw	r26, r24
    3078:	cb 01       	movw	r24, r22
    307a:	89 ab       	std	Y+49, r24	; 0x31
    307c:	9a ab       	std	Y+50, r25	; 0x32
    307e:	ab ab       	std	Y+51, r26	; 0x33
    3080:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3082:	69 a9       	ldd	r22, Y+49	; 0x31
    3084:	7a a9       	ldd	r23, Y+50	; 0x32
    3086:	8b a9       	ldd	r24, Y+51	; 0x33
    3088:	9c a9       	ldd	r25, Y+52	; 0x34
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	40 e8       	ldi	r20, 0x80	; 128
    3090:	5f e3       	ldi	r21, 0x3F	; 63
    3092:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3096:	88 23       	and	r24, r24
    3098:	2c f4       	brge	.+10     	; 0x30a4 <LCD_displayCharacter+0x4b8>
		__ticks = 1;
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	98 ab       	std	Y+48, r25	; 0x30
    30a0:	8f a7       	std	Y+47, r24	; 0x2f
    30a2:	3f c0       	rjmp	.+126    	; 0x3122 <LCD_displayCharacter+0x536>
	else if (__tmp > 65535)
    30a4:	69 a9       	ldd	r22, Y+49	; 0x31
    30a6:	7a a9       	ldd	r23, Y+50	; 0x32
    30a8:	8b a9       	ldd	r24, Y+51	; 0x33
    30aa:	9c a9       	ldd	r25, Y+52	; 0x34
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	3f ef       	ldi	r19, 0xFF	; 255
    30b0:	4f e7       	ldi	r20, 0x7F	; 127
    30b2:	57 e4       	ldi	r21, 0x47	; 71
    30b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30b8:	18 16       	cp	r1, r24
    30ba:	4c f5       	brge	.+82     	; 0x310e <LCD_displayCharacter+0x522>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30bc:	6d a9       	ldd	r22, Y+53	; 0x35
    30be:	7e a9       	ldd	r23, Y+54	; 0x36
    30c0:	8f a9       	ldd	r24, Y+55	; 0x37
    30c2:	98 ad       	ldd	r25, Y+56	; 0x38
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	40 e2       	ldi	r20, 0x20	; 32
    30ca:	51 e4       	ldi	r21, 0x41	; 65
    30cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d0:	dc 01       	movw	r26, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	bc 01       	movw	r22, r24
    30d6:	cd 01       	movw	r24, r26
    30d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30dc:	dc 01       	movw	r26, r24
    30de:	cb 01       	movw	r24, r22
    30e0:	98 ab       	std	Y+48, r25	; 0x30
    30e2:	8f a7       	std	Y+47, r24	; 0x2f
    30e4:	0f c0       	rjmp	.+30     	; 0x3104 <LCD_displayCharacter+0x518>
    30e6:	89 e1       	ldi	r24, 0x19	; 25
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	9e a7       	std	Y+46, r25	; 0x2e
    30ec:	8d a7       	std	Y+45, r24	; 0x2d
    30ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    30f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    30f2:	01 97       	sbiw	r24, 0x01	; 1
    30f4:	f1 f7       	brne	.-4      	; 0x30f2 <LCD_displayCharacter+0x506>
    30f6:	9e a7       	std	Y+46, r25	; 0x2e
    30f8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    30fc:	98 a9       	ldd	r25, Y+48	; 0x30
    30fe:	01 97       	sbiw	r24, 0x01	; 1
    3100:	98 ab       	std	Y+48, r25	; 0x30
    3102:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3104:	8f a5       	ldd	r24, Y+47	; 0x2f
    3106:	98 a9       	ldd	r25, Y+48	; 0x30
    3108:	00 97       	sbiw	r24, 0x00	; 0
    310a:	69 f7       	brne	.-38     	; 0x30e6 <LCD_displayCharacter+0x4fa>
    310c:	14 c0       	rjmp	.+40     	; 0x3136 <LCD_displayCharacter+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    310e:	69 a9       	ldd	r22, Y+49	; 0x31
    3110:	7a a9       	ldd	r23, Y+50	; 0x32
    3112:	8b a9       	ldd	r24, Y+51	; 0x33
    3114:	9c a9       	ldd	r25, Y+52	; 0x34
    3116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    311a:	dc 01       	movw	r26, r24
    311c:	cb 01       	movw	r24, r22
    311e:	98 ab       	std	Y+48, r25	; 0x30
    3120:	8f a7       	std	Y+47, r24	; 0x2f
    3122:	8f a5       	ldd	r24, Y+47	; 0x2f
    3124:	98 a9       	ldd	r25, Y+48	; 0x30
    3126:	9c a7       	std	Y+44, r25	; 0x2c
    3128:	8b a7       	std	Y+43, r24	; 0x2b
    312a:	8b a5       	ldd	r24, Y+43	; 0x2b
    312c:	9c a5       	ldd	r25, Y+44	; 0x2c
    312e:	01 97       	sbiw	r24, 0x01	; 1
    3130:	f1 f7       	brne	.-4      	; 0x312e <LCD_displayCharacter+0x542>
    3132:	9c a7       	std	Y+44, r25	; 0x2c
    3134:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3136:	81 e0       	ldi	r24, 0x01	; 1
    3138:	63 e0       	ldi	r22, 0x03	; 3
    313a:	41 e0       	ldi	r20, 0x01	; 1
    313c:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <GPIO_writePin>
    3140:	80 e0       	ldi	r24, 0x00	; 0
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	a0 e8       	ldi	r26, 0x80	; 128
    3146:	bf e3       	ldi	r27, 0x3F	; 63
    3148:	8f a3       	std	Y+39, r24	; 0x27
    314a:	98 a7       	std	Y+40, r25	; 0x28
    314c:	a9 a7       	std	Y+41, r26	; 0x29
    314e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3150:	6f a1       	ldd	r22, Y+39	; 0x27
    3152:	78 a5       	ldd	r23, Y+40	; 0x28
    3154:	89 a5       	ldd	r24, Y+41	; 0x29
    3156:	9a a5       	ldd	r25, Y+42	; 0x2a
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	4a e7       	ldi	r20, 0x7A	; 122
    315e:	53 e4       	ldi	r21, 0x43	; 67
    3160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	8b a3       	std	Y+35, r24	; 0x23
    316a:	9c a3       	std	Y+36, r25	; 0x24
    316c:	ad a3       	std	Y+37, r26	; 0x25
    316e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3170:	6b a1       	ldd	r22, Y+35	; 0x23
    3172:	7c a1       	ldd	r23, Y+36	; 0x24
    3174:	8d a1       	ldd	r24, Y+37	; 0x25
    3176:	9e a1       	ldd	r25, Y+38	; 0x26
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	40 e8       	ldi	r20, 0x80	; 128
    317e:	5f e3       	ldi	r21, 0x3F	; 63
    3180:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3184:	88 23       	and	r24, r24
    3186:	2c f4       	brge	.+10     	; 0x3192 <LCD_displayCharacter+0x5a6>
		__ticks = 1;
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	9a a3       	std	Y+34, r25	; 0x22
    318e:	89 a3       	std	Y+33, r24	; 0x21
    3190:	3f c0       	rjmp	.+126    	; 0x3210 <LCD_displayCharacter+0x624>
	else if (__tmp > 65535)
    3192:	6b a1       	ldd	r22, Y+35	; 0x23
    3194:	7c a1       	ldd	r23, Y+36	; 0x24
    3196:	8d a1       	ldd	r24, Y+37	; 0x25
    3198:	9e a1       	ldd	r25, Y+38	; 0x26
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	3f ef       	ldi	r19, 0xFF	; 255
    319e:	4f e7       	ldi	r20, 0x7F	; 127
    31a0:	57 e4       	ldi	r21, 0x47	; 71
    31a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31a6:	18 16       	cp	r1, r24
    31a8:	4c f5       	brge	.+82     	; 0x31fc <LCD_displayCharacter+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31aa:	6f a1       	ldd	r22, Y+39	; 0x27
    31ac:	78 a5       	ldd	r23, Y+40	; 0x28
    31ae:	89 a5       	ldd	r24, Y+41	; 0x29
    31b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	40 e2       	ldi	r20, 0x20	; 32
    31b8:	51 e4       	ldi	r21, 0x41	; 65
    31ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	bc 01       	movw	r22, r24
    31c4:	cd 01       	movw	r24, r26
    31c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	9a a3       	std	Y+34, r25	; 0x22
    31d0:	89 a3       	std	Y+33, r24	; 0x21
    31d2:	0f c0       	rjmp	.+30     	; 0x31f2 <LCD_displayCharacter+0x606>
    31d4:	89 e1       	ldi	r24, 0x19	; 25
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	98 a3       	std	Y+32, r25	; 0x20
    31da:	8f 8f       	std	Y+31, r24	; 0x1f
    31dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31de:	98 a1       	ldd	r25, Y+32	; 0x20
    31e0:	01 97       	sbiw	r24, 0x01	; 1
    31e2:	f1 f7       	brne	.-4      	; 0x31e0 <LCD_displayCharacter+0x5f4>
    31e4:	98 a3       	std	Y+32, r25	; 0x20
    31e6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e8:	89 a1       	ldd	r24, Y+33	; 0x21
    31ea:	9a a1       	ldd	r25, Y+34	; 0x22
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	9a a3       	std	Y+34, r25	; 0x22
    31f0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f2:	89 a1       	ldd	r24, Y+33	; 0x21
    31f4:	9a a1       	ldd	r25, Y+34	; 0x22
    31f6:	00 97       	sbiw	r24, 0x00	; 0
    31f8:	69 f7       	brne	.-38     	; 0x31d4 <LCD_displayCharacter+0x5e8>
    31fa:	14 c0       	rjmp	.+40     	; 0x3224 <LCD_displayCharacter+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31fc:	6b a1       	ldd	r22, Y+35	; 0x23
    31fe:	7c a1       	ldd	r23, Y+36	; 0x24
    3200:	8d a1       	ldd	r24, Y+37	; 0x25
    3202:	9e a1       	ldd	r25, Y+38	; 0x26
    3204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3208:	dc 01       	movw	r26, r24
    320a:	cb 01       	movw	r24, r22
    320c:	9a a3       	std	Y+34, r25	; 0x22
    320e:	89 a3       	std	Y+33, r24	; 0x21
    3210:	89 a1       	ldd	r24, Y+33	; 0x21
    3212:	9a a1       	ldd	r25, Y+34	; 0x22
    3214:	9e 8f       	std	Y+30, r25	; 0x1e
    3216:	8d 8f       	std	Y+29, r24	; 0x1d
    3218:	8d 8d       	ldd	r24, Y+29	; 0x1d
    321a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    321c:	01 97       	sbiw	r24, 0x01	; 1
    321e:	f1 f7       	brne	.-4      	; 0x321c <LCD_displayCharacter+0x630>
    3220:	9e 8f       	std	Y+30, r25	; 0x1e
    3222:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required data to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    3224:	82 e0       	ldi	r24, 0x02	; 2
    3226:	0e 94 4c 11 	call	0x2298	; 0x2298 <GPIO_readPort>
    322a:	fe 01       	movw	r30, r28
    322c:	ed 59       	subi	r30, 0x9D	; 157
    322e:	ff 4f       	sbci	r31, 0xFF	; 255
    3230:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((data & 0x0F) << 4);
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (data & 0x0F);
    3232:	fe 01       	movw	r30, r28
    3234:	ed 59       	subi	r30, 0x9D	; 157
    3236:	ff 4f       	sbci	r31, 0xFF	; 255
    3238:	80 81       	ld	r24, Z
    323a:	98 2f       	mov	r25, r24
    323c:	90 7f       	andi	r25, 0xF0	; 240
    323e:	fe 01       	movw	r30, r28
    3240:	ec 59       	subi	r30, 0x9C	; 156
    3242:	ff 4f       	sbci	r31, 0xFF	; 255
    3244:	80 81       	ld	r24, Z
    3246:	8f 70       	andi	r24, 0x0F	; 15
    3248:	89 2b       	or	r24, r25
    324a:	fe 01       	movw	r30, r28
    324c:	ed 59       	subi	r30, 0x9D	; 157
    324e:	ff 4f       	sbci	r31, 0xFF	; 255
    3250:	80 83       	st	Z, r24
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    3252:	fe 01       	movw	r30, r28
    3254:	ed 59       	subi	r30, 0x9D	; 157
    3256:	ff 4f       	sbci	r31, 0xFF	; 255
    3258:	82 e0       	ldi	r24, 0x02	; 2
    325a:	60 81       	ld	r22, Z
    325c:	0e 94 08 11 	call	0x2210	; 0x2210 <GPIO_writePort>
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	a0 e8       	ldi	r26, 0x80	; 128
    3266:	bf e3       	ldi	r27, 0x3F	; 63
    3268:	89 8f       	std	Y+25, r24	; 0x19
    326a:	9a 8f       	std	Y+26, r25	; 0x1a
    326c:	ab 8f       	std	Y+27, r26	; 0x1b
    326e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3270:	69 8d       	ldd	r22, Y+25	; 0x19
    3272:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3274:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3276:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3278:	20 e0       	ldi	r18, 0x00	; 0
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	4a e7       	ldi	r20, 0x7A	; 122
    327e:	53 e4       	ldi	r21, 0x43	; 67
    3280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3284:	dc 01       	movw	r26, r24
    3286:	cb 01       	movw	r24, r22
    3288:	8d 8b       	std	Y+21, r24	; 0x15
    328a:	9e 8b       	std	Y+22, r25	; 0x16
    328c:	af 8b       	std	Y+23, r26	; 0x17
    328e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3290:	6d 89       	ldd	r22, Y+21	; 0x15
    3292:	7e 89       	ldd	r23, Y+22	; 0x16
    3294:	8f 89       	ldd	r24, Y+23	; 0x17
    3296:	98 8d       	ldd	r25, Y+24	; 0x18
    3298:	20 e0       	ldi	r18, 0x00	; 0
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	40 e8       	ldi	r20, 0x80	; 128
    329e:	5f e3       	ldi	r21, 0x3F	; 63
    32a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32a4:	88 23       	and	r24, r24
    32a6:	2c f4       	brge	.+10     	; 0x32b2 <LCD_displayCharacter+0x6c6>
		__ticks = 1;
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	9c 8b       	std	Y+20, r25	; 0x14
    32ae:	8b 8b       	std	Y+19, r24	; 0x13
    32b0:	3f c0       	rjmp	.+126    	; 0x3330 <LCD_displayCharacter+0x744>
	else if (__tmp > 65535)
    32b2:	6d 89       	ldd	r22, Y+21	; 0x15
    32b4:	7e 89       	ldd	r23, Y+22	; 0x16
    32b6:	8f 89       	ldd	r24, Y+23	; 0x17
    32b8:	98 8d       	ldd	r25, Y+24	; 0x18
    32ba:	20 e0       	ldi	r18, 0x00	; 0
    32bc:	3f ef       	ldi	r19, 0xFF	; 255
    32be:	4f e7       	ldi	r20, 0x7F	; 127
    32c0:	57 e4       	ldi	r21, 0x47	; 71
    32c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32c6:	18 16       	cp	r1, r24
    32c8:	4c f5       	brge	.+82     	; 0x331c <LCD_displayCharacter+0x730>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ca:	69 8d       	ldd	r22, Y+25	; 0x19
    32cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32d2:	20 e0       	ldi	r18, 0x00	; 0
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	40 e2       	ldi	r20, 0x20	; 32
    32d8:	51 e4       	ldi	r21, 0x41	; 65
    32da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32de:	dc 01       	movw	r26, r24
    32e0:	cb 01       	movw	r24, r22
    32e2:	bc 01       	movw	r22, r24
    32e4:	cd 01       	movw	r24, r26
    32e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ea:	dc 01       	movw	r26, r24
    32ec:	cb 01       	movw	r24, r22
    32ee:	9c 8b       	std	Y+20, r25	; 0x14
    32f0:	8b 8b       	std	Y+19, r24	; 0x13
    32f2:	0f c0       	rjmp	.+30     	; 0x3312 <LCD_displayCharacter+0x726>
    32f4:	89 e1       	ldi	r24, 0x19	; 25
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	9a 8b       	std	Y+18, r25	; 0x12
    32fa:	89 8b       	std	Y+17, r24	; 0x11
    32fc:	89 89       	ldd	r24, Y+17	; 0x11
    32fe:	9a 89       	ldd	r25, Y+18	; 0x12
    3300:	01 97       	sbiw	r24, 0x01	; 1
    3302:	f1 f7       	brne	.-4      	; 0x3300 <LCD_displayCharacter+0x714>
    3304:	9a 8b       	std	Y+18, r25	; 0x12
    3306:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3308:	8b 89       	ldd	r24, Y+19	; 0x13
    330a:	9c 89       	ldd	r25, Y+20	; 0x14
    330c:	01 97       	sbiw	r24, 0x01	; 1
    330e:	9c 8b       	std	Y+20, r25	; 0x14
    3310:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3312:	8b 89       	ldd	r24, Y+19	; 0x13
    3314:	9c 89       	ldd	r25, Y+20	; 0x14
    3316:	00 97       	sbiw	r24, 0x00	; 0
    3318:	69 f7       	brne	.-38     	; 0x32f4 <LCD_displayCharacter+0x708>
    331a:	14 c0       	rjmp	.+40     	; 0x3344 <LCD_displayCharacter+0x758>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    331c:	6d 89       	ldd	r22, Y+21	; 0x15
    331e:	7e 89       	ldd	r23, Y+22	; 0x16
    3320:	8f 89       	ldd	r24, Y+23	; 0x17
    3322:	98 8d       	ldd	r25, Y+24	; 0x18
    3324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3328:	dc 01       	movw	r26, r24
    332a:	cb 01       	movw	r24, r22
    332c:	9c 8b       	std	Y+20, r25	; 0x14
    332e:	8b 8b       	std	Y+19, r24	; 0x13
    3330:	8b 89       	ldd	r24, Y+19	; 0x13
    3332:	9c 89       	ldd	r25, Y+20	; 0x14
    3334:	98 8b       	std	Y+16, r25	; 0x10
    3336:	8f 87       	std	Y+15, r24	; 0x0f
    3338:	8f 85       	ldd	r24, Y+15	; 0x0f
    333a:	98 89       	ldd	r25, Y+16	; 0x10
    333c:	01 97       	sbiw	r24, 0x01	; 1
    333e:	f1 f7       	brne	.-4      	; 0x333c <LCD_displayCharacter+0x750>
    3340:	98 8b       	std	Y+16, r25	; 0x10
    3342:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	63 e0       	ldi	r22, 0x03	; 3
    3348:	40 e0       	ldi	r20, 0x00	; 0
    334a:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <GPIO_writePin>
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	a0 e8       	ldi	r26, 0x80	; 128
    3354:	bf e3       	ldi	r27, 0x3F	; 63
    3356:	8b 87       	std	Y+11, r24	; 0x0b
    3358:	9c 87       	std	Y+12, r25	; 0x0c
    335a:	ad 87       	std	Y+13, r26	; 0x0d
    335c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    335e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3360:	7c 85       	ldd	r23, Y+12	; 0x0c
    3362:	8d 85       	ldd	r24, Y+13	; 0x0d
    3364:	9e 85       	ldd	r25, Y+14	; 0x0e
    3366:	20 e0       	ldi	r18, 0x00	; 0
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	4a e7       	ldi	r20, 0x7A	; 122
    336c:	53 e4       	ldi	r21, 0x43	; 67
    336e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3372:	dc 01       	movw	r26, r24
    3374:	cb 01       	movw	r24, r22
    3376:	8f 83       	std	Y+7, r24	; 0x07
    3378:	98 87       	std	Y+8, r25	; 0x08
    337a:	a9 87       	std	Y+9, r26	; 0x09
    337c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    337e:	6f 81       	ldd	r22, Y+7	; 0x07
    3380:	78 85       	ldd	r23, Y+8	; 0x08
    3382:	89 85       	ldd	r24, Y+9	; 0x09
    3384:	9a 85       	ldd	r25, Y+10	; 0x0a
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	40 e8       	ldi	r20, 0x80	; 128
    338c:	5f e3       	ldi	r21, 0x3F	; 63
    338e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3392:	88 23       	and	r24, r24
    3394:	2c f4       	brge	.+10     	; 0x33a0 <LCD_displayCharacter+0x7b4>
		__ticks = 1;
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	9e 83       	std	Y+6, r25	; 0x06
    339c:	8d 83       	std	Y+5, r24	; 0x05
    339e:	3f c0       	rjmp	.+126    	; 0x341e <LCD_displayCharacter+0x832>
	else if (__tmp > 65535)
    33a0:	6f 81       	ldd	r22, Y+7	; 0x07
    33a2:	78 85       	ldd	r23, Y+8	; 0x08
    33a4:	89 85       	ldd	r24, Y+9	; 0x09
    33a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	3f ef       	ldi	r19, 0xFF	; 255
    33ac:	4f e7       	ldi	r20, 0x7F	; 127
    33ae:	57 e4       	ldi	r21, 0x47	; 71
    33b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33b4:	18 16       	cp	r1, r24
    33b6:	4c f5       	brge	.+82     	; 0x340a <LCD_displayCharacter+0x81e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    33ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    33bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    33be:	9e 85       	ldd	r25, Y+14	; 0x0e
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	40 e2       	ldi	r20, 0x20	; 32
    33c6:	51 e4       	ldi	r21, 0x41	; 65
    33c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33cc:	dc 01       	movw	r26, r24
    33ce:	cb 01       	movw	r24, r22
    33d0:	bc 01       	movw	r22, r24
    33d2:	cd 01       	movw	r24, r26
    33d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d8:	dc 01       	movw	r26, r24
    33da:	cb 01       	movw	r24, r22
    33dc:	9e 83       	std	Y+6, r25	; 0x06
    33de:	8d 83       	std	Y+5, r24	; 0x05
    33e0:	0f c0       	rjmp	.+30     	; 0x3400 <LCD_displayCharacter+0x814>
    33e2:	89 e1       	ldi	r24, 0x19	; 25
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	9c 83       	std	Y+4, r25	; 0x04
    33e8:	8b 83       	std	Y+3, r24	; 0x03
    33ea:	8b 81       	ldd	r24, Y+3	; 0x03
    33ec:	9c 81       	ldd	r25, Y+4	; 0x04
    33ee:	01 97       	sbiw	r24, 0x01	; 1
    33f0:	f1 f7       	brne	.-4      	; 0x33ee <LCD_displayCharacter+0x802>
    33f2:	9c 83       	std	Y+4, r25	; 0x04
    33f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33f6:	8d 81       	ldd	r24, Y+5	; 0x05
    33f8:	9e 81       	ldd	r25, Y+6	; 0x06
    33fa:	01 97       	sbiw	r24, 0x01	; 1
    33fc:	9e 83       	std	Y+6, r25	; 0x06
    33fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3400:	8d 81       	ldd	r24, Y+5	; 0x05
    3402:	9e 81       	ldd	r25, Y+6	; 0x06
    3404:	00 97       	sbiw	r24, 0x00	; 0
    3406:	69 f7       	brne	.-38     	; 0x33e2 <LCD_displayCharacter+0x7f6>
    3408:	14 c0       	rjmp	.+40     	; 0x3432 <LCD_displayCharacter+0x846>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    340a:	6f 81       	ldd	r22, Y+7	; 0x07
    340c:	78 85       	ldd	r23, Y+8	; 0x08
    340e:	89 85       	ldd	r24, Y+9	; 0x09
    3410:	9a 85       	ldd	r25, Y+10	; 0x0a
    3412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3416:	dc 01       	movw	r26, r24
    3418:	cb 01       	movw	r24, r22
    341a:	9e 83       	std	Y+6, r25	; 0x06
    341c:	8d 83       	std	Y+5, r24	; 0x05
    341e:	8d 81       	ldd	r24, Y+5	; 0x05
    3420:	9e 81       	ldd	r25, Y+6	; 0x06
    3422:	9a 83       	std	Y+2, r25	; 0x02
    3424:	89 83       	std	Y+1, r24	; 0x01
    3426:	89 81       	ldd	r24, Y+1	; 0x01
    3428:	9a 81       	ldd	r25, Y+2	; 0x02
    342a:	01 97       	sbiw	r24, 0x01	; 1
    342c:	f1 f7       	brne	.-4      	; 0x342a <LCD_displayCharacter+0x83e>
    342e:	9a 83       	std	Y+2, r25	; 0x02
    3430:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3432:	cc 59       	subi	r28, 0x9C	; 156
    3434:	df 4f       	sbci	r29, 0xFF	; 255
    3436:	0f b6       	in	r0, 0x3f	; 63
    3438:	f8 94       	cli
    343a:	de bf       	out	0x3e, r29	; 62
    343c:	0f be       	out	0x3f, r0	; 63
    343e:	cd bf       	out	0x3d, r28	; 61
    3440:	cf 91       	pop	r28
    3442:	df 91       	pop	r29
    3444:	1f 91       	pop	r17
    3446:	0f 91       	pop	r16
    3448:	08 95       	ret

0000344a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    344a:	df 93       	push	r29
    344c:	cf 93       	push	r28
    344e:	00 d0       	rcall	.+0      	; 0x3450 <LCD_displayString+0x6>
    3450:	0f 92       	push	r0
    3452:	cd b7       	in	r28, 0x3d	; 61
    3454:	de b7       	in	r29, 0x3e	; 62
    3456:	9b 83       	std	Y+3, r25	; 0x03
    3458:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    345a:	19 82       	std	Y+1, r1	; 0x01
    345c:	0e c0       	rjmp	.+28     	; 0x347a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    345e:	89 81       	ldd	r24, Y+1	; 0x01
    3460:	28 2f       	mov	r18, r24
    3462:	30 e0       	ldi	r19, 0x00	; 0
    3464:	8a 81       	ldd	r24, Y+2	; 0x02
    3466:	9b 81       	ldd	r25, Y+3	; 0x03
    3468:	fc 01       	movw	r30, r24
    346a:	e2 0f       	add	r30, r18
    346c:	f3 1f       	adc	r31, r19
    346e:	80 81       	ld	r24, Z
    3470:	0e 94 f6 15 	call	0x2bec	; 0x2bec <LCD_displayCharacter>
		i++;
    3474:	89 81       	ldd	r24, Y+1	; 0x01
    3476:	8f 5f       	subi	r24, 0xFF	; 255
    3478:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    347a:	89 81       	ldd	r24, Y+1	; 0x01
    347c:	28 2f       	mov	r18, r24
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	8a 81       	ldd	r24, Y+2	; 0x02
    3482:	9b 81       	ldd	r25, Y+3	; 0x03
    3484:	fc 01       	movw	r30, r24
    3486:	e2 0f       	add	r30, r18
    3488:	f3 1f       	adc	r31, r19
    348a:	80 81       	ld	r24, Z
    348c:	88 23       	and	r24, r24
    348e:	39 f7       	brne	.-50     	; 0x345e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3490:	0f 90       	pop	r0
    3492:	0f 90       	pop	r0
    3494:	0f 90       	pop	r0
    3496:	cf 91       	pop	r28
    3498:	df 91       	pop	r29
    349a:	08 95       	ret

0000349c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    349c:	df 93       	push	r29
    349e:	cf 93       	push	r28
    34a0:	00 d0       	rcall	.+0      	; 0x34a2 <LCD_moveCursor+0x6>
    34a2:	00 d0       	rcall	.+0      	; 0x34a4 <LCD_moveCursor+0x8>
    34a4:	0f 92       	push	r0
    34a6:	cd b7       	in	r28, 0x3d	; 61
    34a8:	de b7       	in	r29, 0x3e	; 62
    34aa:	8a 83       	std	Y+2, r24	; 0x02
    34ac:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    34ae:	8a 81       	ldd	r24, Y+2	; 0x02
    34b0:	28 2f       	mov	r18, r24
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	3d 83       	std	Y+5, r19	; 0x05
    34b6:	2c 83       	std	Y+4, r18	; 0x04
    34b8:	8c 81       	ldd	r24, Y+4	; 0x04
    34ba:	9d 81       	ldd	r25, Y+5	; 0x05
    34bc:	81 30       	cpi	r24, 0x01	; 1
    34be:	91 05       	cpc	r25, r1
    34c0:	c1 f0       	breq	.+48     	; 0x34f2 <LCD_moveCursor+0x56>
    34c2:	2c 81       	ldd	r18, Y+4	; 0x04
    34c4:	3d 81       	ldd	r19, Y+5	; 0x05
    34c6:	22 30       	cpi	r18, 0x02	; 2
    34c8:	31 05       	cpc	r19, r1
    34ca:	2c f4       	brge	.+10     	; 0x34d6 <LCD_moveCursor+0x3a>
    34cc:	8c 81       	ldd	r24, Y+4	; 0x04
    34ce:	9d 81       	ldd	r25, Y+5	; 0x05
    34d0:	00 97       	sbiw	r24, 0x00	; 0
    34d2:	61 f0       	breq	.+24     	; 0x34ec <LCD_moveCursor+0x50>
    34d4:	19 c0       	rjmp	.+50     	; 0x3508 <LCD_moveCursor+0x6c>
    34d6:	2c 81       	ldd	r18, Y+4	; 0x04
    34d8:	3d 81       	ldd	r19, Y+5	; 0x05
    34da:	22 30       	cpi	r18, 0x02	; 2
    34dc:	31 05       	cpc	r19, r1
    34de:	69 f0       	breq	.+26     	; 0x34fa <LCD_moveCursor+0x5e>
    34e0:	8c 81       	ldd	r24, Y+4	; 0x04
    34e2:	9d 81       	ldd	r25, Y+5	; 0x05
    34e4:	83 30       	cpi	r24, 0x03	; 3
    34e6:	91 05       	cpc	r25, r1
    34e8:	61 f0       	breq	.+24     	; 0x3502 <LCD_moveCursor+0x66>
    34ea:	0e c0       	rjmp	.+28     	; 0x3508 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    34ec:	8b 81       	ldd	r24, Y+3	; 0x03
    34ee:	89 83       	std	Y+1, r24	; 0x01
    34f0:	0b c0       	rjmp	.+22     	; 0x3508 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    34f2:	8b 81       	ldd	r24, Y+3	; 0x03
    34f4:	80 5c       	subi	r24, 0xC0	; 192
    34f6:	89 83       	std	Y+1, r24	; 0x01
    34f8:	07 c0       	rjmp	.+14     	; 0x3508 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    34fa:	8b 81       	ldd	r24, Y+3	; 0x03
    34fc:	80 5f       	subi	r24, 0xF0	; 240
    34fe:	89 83       	std	Y+1, r24	; 0x01
    3500:	03 c0       	rjmp	.+6      	; 0x3508 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3502:	8b 81       	ldd	r24, Y+3	; 0x03
    3504:	80 5b       	subi	r24, 0xB0	; 176
    3506:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3508:	89 81       	ldd	r24, Y+1	; 0x01
    350a:	80 68       	ori	r24, 0x80	; 128
    350c:	0e 94 c7 11 	call	0x238e	; 0x238e <LCD_sendCommand>
}
    3510:	0f 90       	pop	r0
    3512:	0f 90       	pop	r0
    3514:	0f 90       	pop	r0
    3516:	0f 90       	pop	r0
    3518:	0f 90       	pop	r0
    351a:	cf 91       	pop	r28
    351c:	df 91       	pop	r29
    351e:	08 95       	ret

00003520 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3520:	df 93       	push	r29
    3522:	cf 93       	push	r28
    3524:	00 d0       	rcall	.+0      	; 0x3526 <LCD_displayStringRowColumn+0x6>
    3526:	00 d0       	rcall	.+0      	; 0x3528 <LCD_displayStringRowColumn+0x8>
    3528:	cd b7       	in	r28, 0x3d	; 61
    352a:	de b7       	in	r29, 0x3e	; 62
    352c:	89 83       	std	Y+1, r24	; 0x01
    352e:	6a 83       	std	Y+2, r22	; 0x02
    3530:	5c 83       	std	Y+4, r21	; 0x04
    3532:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3534:	89 81       	ldd	r24, Y+1	; 0x01
    3536:	6a 81       	ldd	r22, Y+2	; 0x02
    3538:	0e 94 4e 1a 	call	0x349c	; 0x349c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    353c:	8b 81       	ldd	r24, Y+3	; 0x03
    353e:	9c 81       	ldd	r25, Y+4	; 0x04
    3540:	0e 94 25 1a 	call	0x344a	; 0x344a <LCD_displayString>
}
    3544:	0f 90       	pop	r0
    3546:	0f 90       	pop	r0
    3548:	0f 90       	pop	r0
    354a:	0f 90       	pop	r0
    354c:	cf 91       	pop	r28
    354e:	df 91       	pop	r29
    3550:	08 95       	ret

00003552 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3552:	df 93       	push	r29
    3554:	cf 93       	push	r28
    3556:	cd b7       	in	r28, 0x3d	; 61
    3558:	de b7       	in	r29, 0x3e	; 62
    355a:	62 97       	sbiw	r28, 0x12	; 18
    355c:	0f b6       	in	r0, 0x3f	; 63
    355e:	f8 94       	cli
    3560:	de bf       	out	0x3e, r29	; 62
    3562:	0f be       	out	0x3f, r0	; 63
    3564:	cd bf       	out	0x3d, r28	; 61
    3566:	9a 8b       	std	Y+18, r25	; 0x12
    3568:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    356a:	89 89       	ldd	r24, Y+17	; 0x11
    356c:	9a 89       	ldd	r25, Y+18	; 0x12
    356e:	9e 01       	movw	r18, r28
    3570:	2f 5f       	subi	r18, 0xFF	; 255
    3572:	3f 4f       	sbci	r19, 0xFF	; 255
    3574:	b9 01       	movw	r22, r18
    3576:	4a e0       	ldi	r20, 0x0A	; 10
    3578:	50 e0       	ldi	r21, 0x00	; 0
    357a:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <itoa>
   LCD_displayString(buff); /* Display the string */
    357e:	ce 01       	movw	r24, r28
    3580:	01 96       	adiw	r24, 0x01	; 1
    3582:	0e 94 25 1a 	call	0x344a	; 0x344a <LCD_displayString>
}
    3586:	62 96       	adiw	r28, 0x12	; 18
    3588:	0f b6       	in	r0, 0x3f	; 63
    358a:	f8 94       	cli
    358c:	de bf       	out	0x3e, r29	; 62
    358e:	0f be       	out	0x3f, r0	; 63
    3590:	cd bf       	out	0x3d, r28	; 61
    3592:	cf 91       	pop	r28
    3594:	df 91       	pop	r29
    3596:	08 95       	ret

00003598 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3598:	df 93       	push	r29
    359a:	cf 93       	push	r28
    359c:	cd b7       	in	r28, 0x3d	; 61
    359e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    35a0:	81 e0       	ldi	r24, 0x01	; 1
    35a2:	0e 94 c7 11 	call	0x238e	; 0x238e <LCD_sendCommand>
}
    35a6:	cf 91       	pop	r28
    35a8:	df 91       	pop	r29
    35aa:	08 95       	ret

000035ac <DcMotor_Init>:

#include "motor.h"
//#include "lcd.h"
#include "gpio.h"

void DcMotor_Init(void){
    35ac:	df 93       	push	r29
    35ae:	cf 93       	push	r28
    35b0:	cd b7       	in	r28, 0x3d	; 61
    35b2:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Description
 	 The Function responsible for setup the direction for the two
	 motor pins through the GPIO driver.
	 */
	GPIO_setupPinDirection(MOTOR_OUTPUT_PORT,MOTOR_FIRST_PIN,PIN_OUTPUT);
    35b4:	82 e0       	ldi	r24, 0x02	; 2
    35b6:	62 e0       	ldi	r22, 0x02	; 2
    35b8:	41 e0       	ldi	r20, 0x01	; 1
    35ba:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_OUTPUT_PORT,MOTOR_SECOND_PIN,PIN_OUTPUT);
    35be:	82 e0       	ldi	r24, 0x02	; 2
    35c0:	63 e0       	ldi	r22, 0x03	; 3
    35c2:	41 e0       	ldi	r20, 0x01	; 1
    35c4:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <GPIO_setupPinDirection>
/*
 *  	 Stop at the DC-Motor at the beginning through the GPIO driver
 *  	 by writing 0 at both bins
 */
	GPIO_writePin(MOTOR_OUTPUT_PORT,MOTOR_FIRST_PIN,LOGICAL_ZERO);
    35c8:	82 e0       	ldi	r24, 0x02	; 2
    35ca:	62 e0       	ldi	r22, 0x02	; 2
    35cc:	40 e0       	ldi	r20, 0x00	; 0
    35ce:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <GPIO_writePin>
	GPIO_writePin(MOTOR_OUTPUT_PORT,MOTOR_FIRST_PIN,LOGICAL_ZERO);
    35d2:	82 e0       	ldi	r24, 0x02	; 2
    35d4:	62 e0       	ldi	r22, 0x02	; 2
    35d6:	40 e0       	ldi	r20, 0x00	; 0
    35d8:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <GPIO_writePin>

}
    35dc:	cf 91       	pop	r28
    35de:	df 91       	pop	r29
    35e0:	08 95       	ret

000035e2 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed){
    35e2:	df 93       	push	r29
    35e4:	cf 93       	push	r28
    35e6:	00 d0       	rcall	.+0      	; 0x35e8 <DcMotor_Rotate+0x6>
    35e8:	cd b7       	in	r28, 0x3d	; 61
    35ea:	de b7       	in	r29, 0x3e	; 62
    35ec:	89 83       	std	Y+1, r24	; 0x01
    35ee:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * determine the direction of the fan
	 */
	if (state==CW){
    35f0:	89 81       	ldd	r24, Y+1	; 0x01
    35f2:	81 30       	cpi	r24, 0x01	; 1
    35f4:	59 f4       	brne	.+22     	; 0x360c <DcMotor_Rotate+0x2a>
	GPIO_writePin(MOTOR_OUTPUT_PORT,MOTOR_FIRST_PIN,LOGICAL_ONE);
    35f6:	82 e0       	ldi	r24, 0x02	; 2
    35f8:	62 e0       	ldi	r22, 0x02	; 2
    35fa:	41 e0       	ldi	r20, 0x01	; 1
    35fc:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <GPIO_writePin>
	GPIO_writePin(MOTOR_OUTPUT_PORT,MOTOR_SECOND_PIN,LOGICAL_ZERO);
    3600:	82 e0       	ldi	r24, 0x02	; 2
    3602:	63 e0       	ldi	r22, 0x03	; 3
    3604:	40 e0       	ldi	r20, 0x00	; 0
    3606:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <GPIO_writePin>
    360a:	1b c0       	rjmp	.+54     	; 0x3642 <DcMotor_Rotate+0x60>
	}
	else if(state==A_CW){
    360c:	89 81       	ldd	r24, Y+1	; 0x01
    360e:	82 30       	cpi	r24, 0x02	; 2
    3610:	59 f4       	brne	.+22     	; 0x3628 <DcMotor_Rotate+0x46>
	GPIO_writePin(MOTOR_OUTPUT_PORT,MOTOR_FIRST_PIN,LOGICAL_ZERO);
    3612:	82 e0       	ldi	r24, 0x02	; 2
    3614:	62 e0       	ldi	r22, 0x02	; 2
    3616:	40 e0       	ldi	r20, 0x00	; 0
    3618:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <GPIO_writePin>
	GPIO_writePin(MOTOR_OUTPUT_PORT,MOTOR_SECOND_PIN,LOGICAL_ONE);
    361c:	82 e0       	ldi	r24, 0x02	; 2
    361e:	63 e0       	ldi	r22, 0x03	; 3
    3620:	41 e0       	ldi	r20, 0x01	; 1
    3622:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <GPIO_writePin>
    3626:	0d c0       	rjmp	.+26     	; 0x3642 <DcMotor_Rotate+0x60>
	}
	else if(state==STOP){
    3628:	89 81       	ldd	r24, Y+1	; 0x01
    362a:	88 23       	and	r24, r24
    362c:	51 f4       	brne	.+20     	; 0x3642 <DcMotor_Rotate+0x60>
	GPIO_writePin(MOTOR_OUTPUT_PORT,MOTOR_FIRST_PIN,LOGICAL_ZERO);
    362e:	82 e0       	ldi	r24, 0x02	; 2
    3630:	62 e0       	ldi	r22, 0x02	; 2
    3632:	40 e0       	ldi	r20, 0x00	; 0
    3634:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <GPIO_writePin>
	GPIO_writePin(MOTOR_OUTPUT_PORT,MOTOR_SECOND_PIN,LOGICAL_ZERO);
    3638:	82 e0       	ldi	r24, 0x02	; 2
    363a:	63 e0       	ldi	r22, 0x03	; 3
    363c:	40 e0       	ldi	r20, 0x00	; 0
    363e:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <GPIO_writePin>
	}
	/*
	 * determine the speed of the fan and display if its on or off
	 */
	if(speed<25){
    3642:	8a 81       	ldd	r24, Y+2	; 0x02
    3644:	89 31       	cpi	r24, 0x19	; 25
    3646:	d0 f0       	brcs	.+52     	; 0x367c <DcMotor_Rotate+0x9a>
		//PWM_Timer0_Start(0);
		//LCD_displayStringRowColumn(0,10,"OFF");
	}

	else if((speed>=25)&&(speed<50)){
    3648:	8a 81       	ldd	r24, Y+2	; 0x02
    364a:	89 31       	cpi	r24, 0x19	; 25
    364c:	18 f0       	brcs	.+6      	; 0x3654 <DcMotor_Rotate+0x72>
    364e:	8a 81       	ldd	r24, Y+2	; 0x02
    3650:	82 33       	cpi	r24, 0x32	; 50
    3652:	a0 f0       	brcs	.+40     	; 0x367c <DcMotor_Rotate+0x9a>
		//LCD_displayStringRowColumn(0,10,"ON");
		//LCD_displayStringRowColumn(0,12," ");		/*the space is here to prevent displaying "ONF"*/

	}

	else if((speed>=50)&&(speed<75)){
    3654:	8a 81       	ldd	r24, Y+2	; 0x02
    3656:	82 33       	cpi	r24, 0x32	; 50
    3658:	18 f0       	brcs	.+6      	; 0x3660 <DcMotor_Rotate+0x7e>
    365a:	8a 81       	ldd	r24, Y+2	; 0x02
    365c:	8b 34       	cpi	r24, 0x4B	; 75
    365e:	70 f0       	brcs	.+28     	; 0x367c <DcMotor_Rotate+0x9a>
		//LCD_displayStringRowColumn(0,10,"ON");
		//LCD_displayStringRowColumn(0,12," ");

	}

	else if((speed>=75)&&(speed<100)){
    3660:	8a 81       	ldd	r24, Y+2	; 0x02
    3662:	8b 34       	cpi	r24, 0x4B	; 75
    3664:	18 f0       	brcs	.+6      	; 0x366c <DcMotor_Rotate+0x8a>
    3666:	8a 81       	ldd	r24, Y+2	; 0x02
    3668:	84 36       	cpi	r24, 0x64	; 100
    366a:	40 f0       	brcs	.+16     	; 0x367c <DcMotor_Rotate+0x9a>
	//	PWM_Timer0_Start(75);
		//LCD_displayStringRowColumn(0,10,"ON");
		//LCD_displayStringRowColumn(0,12," ");

	}
	else if(speed>=100){
    366c:	8a 81       	ldd	r24, Y+2	; 0x02
    366e:	84 36       	cpi	r24, 0x64	; 100
    3670:	28 f0       	brcs	.+10     	; 0x367c <DcMotor_Rotate+0x9a>
		//PWM_Timer0_Start(100);
		//LCD_displayStringRowColumn(0,10,"ON");
	//	LCD_displayStringRowColumn(0,12," ");
		GPIO_writePin(PORTB_ID,PIN3_ID,1);
    3672:	81 e0       	ldi	r24, 0x01	; 1
    3674:	63 e0       	ldi	r22, 0x03	; 3
    3676:	41 e0       	ldi	r20, 0x01	; 1
    3678:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <GPIO_writePin>
	}

}
    367c:	0f 90       	pop	r0
    367e:	0f 90       	pop	r0
    3680:	cf 91       	pop	r28
    3682:	df 91       	pop	r29
    3684:	08 95       	ret

00003686 <PWM_Timer0_Start>:

#include "pwm.h"
#include "common_macros.h" /* To use the macros like SET_BIT */
#include "avr/io.h" /* To use the IO Ports Registers */
#include "gpio.h"
void PWM_Timer0_Start(uint8 duty_cycle){
    3686:	df 93       	push	r29
    3688:	cf 93       	push	r28
    368a:	0f 92       	push	r0
    368c:	cd b7       	in	r28, 0x3d	; 61
    368e:	de b7       	in	r29, 0x3e	; 62
    3690:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * initial value of the counter in TCNT0=0
	 */
	TCNT0=0;
    3692:	e2 e5       	ldi	r30, 0x52	; 82
    3694:	f0 e0       	ldi	r31, 0x00	; 0
    3696:	10 82       	st	Z, r1
	 *FOC0=0 to specify pwm mode
	 *WGM00 and WGM01 are both=1 to specify fast pwm
	 *COM01=1 AND COM00=0 to specify non inverting mode
	 *CS00=0 CS01=1 CS02=0 TO specify 8 prescaler
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    3698:	e3 e5       	ldi	r30, 0x53	; 83
    369a:	f0 e0       	ldi	r31, 0x00	; 0
    369c:	8a e6       	ldi	r24, 0x6A	; 106
    369e:	80 83       	st	Z, r24
	/*
	 * set port b pin 3 as output as this is where oc0 is generated
	 */
	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	63 e0       	ldi	r22, 0x03	; 3
    36a4:	41 e0       	ldi	r20, 0x01	; 1
    36a6:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <GPIO_setupPinDirection>
	/*
	 * set duty cycle by taking it as a percintage then
	 * putting the count value in ocr0
	 */
	duty_cycle=(float)duty_cycle/100*MAX_TICKS;
    36aa:	89 81       	ldd	r24, Y+1	; 0x01
    36ac:	88 2f       	mov	r24, r24
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	a0 e0       	ldi	r26, 0x00	; 0
    36b2:	b0 e0       	ldi	r27, 0x00	; 0
    36b4:	bc 01       	movw	r22, r24
    36b6:	cd 01       	movw	r24, r26
    36b8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    36bc:	dc 01       	movw	r26, r24
    36be:	cb 01       	movw	r24, r22
    36c0:	bc 01       	movw	r22, r24
    36c2:	cd 01       	movw	r24, r26
    36c4:	20 e0       	ldi	r18, 0x00	; 0
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	48 ec       	ldi	r20, 0xC8	; 200
    36ca:	52 e4       	ldi	r21, 0x42	; 66
    36cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    36d0:	dc 01       	movw	r26, r24
    36d2:	cb 01       	movw	r24, r22
    36d4:	bc 01       	movw	r22, r24
    36d6:	cd 01       	movw	r24, r26
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	4f e7       	ldi	r20, 0x7F	; 127
    36de:	53 e4       	ldi	r21, 0x43	; 67
    36e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	bc 01       	movw	r22, r24
    36ea:	cd 01       	movw	r24, r26
    36ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	89 83       	std	Y+1, r24	; 0x01
	OCR0=duty_cycle;
    36f6:	ec e5       	ldi	r30, 0x5C	; 92
    36f8:	f0 e0       	ldi	r31, 0x00	; 0
    36fa:	89 81       	ldd	r24, Y+1	; 0x01
    36fc:	80 83       	st	Z, r24
}
    36fe:	0f 90       	pop	r0
    3700:	cf 91       	pop	r28
    3702:	df 91       	pop	r29
    3704:	08 95       	ret

00003706 <__vector_19>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_COMP_vect)
{
    3706:	1f 92       	push	r1
    3708:	0f 92       	push	r0
    370a:	0f b6       	in	r0, 0x3f	; 63
    370c:	0f 92       	push	r0
    370e:	11 24       	eor	r1, r1
    3710:	2f 93       	push	r18
    3712:	3f 93       	push	r19
    3714:	4f 93       	push	r20
    3716:	5f 93       	push	r21
    3718:	6f 93       	push	r22
    371a:	7f 93       	push	r23
    371c:	8f 93       	push	r24
    371e:	9f 93       	push	r25
    3720:	af 93       	push	r26
    3722:	bf 93       	push	r27
    3724:	ef 93       	push	r30
    3726:	ff 93       	push	r31
    3728:	df 93       	push	r29
    372a:	cf 93       	push	r28
    372c:	cd b7       	in	r28, 0x3d	; 61
    372e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3730:	80 91 90 01 	lds	r24, 0x0190
    3734:	90 91 91 01 	lds	r25, 0x0191
    3738:	00 97       	sbiw	r24, 0x00	; 0
    373a:	29 f0       	breq	.+10     	; 0x3746 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    373c:	e0 91 90 01 	lds	r30, 0x0190
    3740:	f0 91 91 01 	lds	r31, 0x0191
    3744:	09 95       	icall
	}
}
    3746:	cf 91       	pop	r28
    3748:	df 91       	pop	r29
    374a:	ff 91       	pop	r31
    374c:	ef 91       	pop	r30
    374e:	bf 91       	pop	r27
    3750:	af 91       	pop	r26
    3752:	9f 91       	pop	r25
    3754:	8f 91       	pop	r24
    3756:	7f 91       	pop	r23
    3758:	6f 91       	pop	r22
    375a:	5f 91       	pop	r21
    375c:	4f 91       	pop	r20
    375e:	3f 91       	pop	r19
    3760:	2f 91       	pop	r18
    3762:	0f 90       	pop	r0
    3764:	0f be       	out	0x3f, r0	; 63
    3766:	0f 90       	pop	r0
    3768:	1f 90       	pop	r1
    376a:	18 95       	reti

0000376c <__vector_9>:

ISR(TIMER0_OVF_vect)
{
    376c:	1f 92       	push	r1
    376e:	0f 92       	push	r0
    3770:	0f b6       	in	r0, 0x3f	; 63
    3772:	0f 92       	push	r0
    3774:	11 24       	eor	r1, r1
    3776:	2f 93       	push	r18
    3778:	3f 93       	push	r19
    377a:	4f 93       	push	r20
    377c:	5f 93       	push	r21
    377e:	6f 93       	push	r22
    3780:	7f 93       	push	r23
    3782:	8f 93       	push	r24
    3784:	9f 93       	push	r25
    3786:	af 93       	push	r26
    3788:	bf 93       	push	r27
    378a:	ef 93       	push	r30
    378c:	ff 93       	push	r31
    378e:	df 93       	push	r29
    3790:	cf 93       	push	r28
    3792:	cd b7       	in	r28, 0x3d	; 61
    3794:	de b7       	in	r29, 0x3e	; 62
 	if(g_callBackPtr != NULL_PTR)
    3796:	80 91 90 01 	lds	r24, 0x0190
    379a:	90 91 91 01 	lds	r25, 0x0191
    379e:	00 97       	sbiw	r24, 0x00	; 0
    37a0:	29 f0       	breq	.+10     	; 0x37ac <__vector_9+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    37a2:	e0 91 90 01 	lds	r30, 0x0190
    37a6:	f0 91 91 01 	lds	r31, 0x0191
    37aa:	09 95       	icall
	}
}
    37ac:	cf 91       	pop	r28
    37ae:	df 91       	pop	r29
    37b0:	ff 91       	pop	r31
    37b2:	ef 91       	pop	r30
    37b4:	bf 91       	pop	r27
    37b6:	af 91       	pop	r26
    37b8:	9f 91       	pop	r25
    37ba:	8f 91       	pop	r24
    37bc:	7f 91       	pop	r23
    37be:	6f 91       	pop	r22
    37c0:	5f 91       	pop	r21
    37c2:	4f 91       	pop	r20
    37c4:	3f 91       	pop	r19
    37c6:	2f 91       	pop	r18
    37c8:	0f 90       	pop	r0
    37ca:	0f be       	out	0x3f, r0	; 63
    37cc:	0f 90       	pop	r0
    37ce:	1f 90       	pop	r1
    37d0:	18 95       	reti

000037d2 <Timer0_Init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer0_Init(const Timer0_ConfigType * Config_Ptr)
{
    37d2:	df 93       	push	r29
    37d4:	cf 93       	push	r28
    37d6:	00 d0       	rcall	.+0      	; 0x37d8 <Timer0_Init+0x6>
    37d8:	cd b7       	in	r28, 0x3d	; 61
    37da:	de b7       	in	r29, 0x3e	; 62
    37dc:	9a 83       	std	Y+2, r25	; 0x02
    37de:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TCCR0,FOC0); /*non PWM mode*/
    37e0:	a3 e5       	ldi	r26, 0x53	; 83
    37e2:	b0 e0       	ldi	r27, 0x00	; 0
    37e4:	e3 e5       	ldi	r30, 0x53	; 83
    37e6:	f0 e0       	ldi	r31, 0x00	; 0
    37e8:	80 81       	ld	r24, Z
    37ea:	80 68       	ori	r24, 0x80	; 128
    37ec:	8c 93       	st	X, r24
	if((Config_Ptr->timer_mode)==NORMAL_MODE)
    37ee:	e9 81       	ldd	r30, Y+1	; 0x01
    37f0:	fa 81       	ldd	r31, Y+2	; 0x02
    37f2:	80 81       	ld	r24, Z
    37f4:	88 23       	and	r24, r24
    37f6:	b1 f4       	brne	.+44     	; 0x3824 <Timer0_Init+0x52>
	{
		/*choosing normal mode*/
		CLEAR_BIT(TCCR0,WGM00);
    37f8:	a3 e5       	ldi	r26, 0x53	; 83
    37fa:	b0 e0       	ldi	r27, 0x00	; 0
    37fc:	e3 e5       	ldi	r30, 0x53	; 83
    37fe:	f0 e0       	ldi	r31, 0x00	; 0
    3800:	80 81       	ld	r24, Z
    3802:	8f 7b       	andi	r24, 0xBF	; 191
    3804:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,WGM01);
    3806:	a3 e5       	ldi	r26, 0x53	; 83
    3808:	b0 e0       	ldi	r27, 0x00	; 0
    380a:	e3 e5       	ldi	r30, 0x53	; 83
    380c:	f0 e0       	ldi	r31, 0x00	; 0
    380e:	80 81       	ld	r24, Z
    3810:	87 7f       	andi	r24, 0xF7	; 247
    3812:	8c 93       	st	X, r24
		/*enable normal mode interrupt*/
		SET_BIT(TIMSK,TOIE0);
    3814:	a9 e5       	ldi	r26, 0x59	; 89
    3816:	b0 e0       	ldi	r27, 0x00	; 0
    3818:	e9 e5       	ldi	r30, 0x59	; 89
    381a:	f0 e0       	ldi	r31, 0x00	; 0
    381c:	80 81       	ld	r24, Z
    381e:	81 60       	ori	r24, 0x01	; 1
    3820:	8c 93       	st	X, r24
    3822:	20 c0       	rjmp	.+64     	; 0x3864 <Timer0_Init+0x92>
	}
	else if((Config_Ptr->timer_mode)==COMPARE_MODE)
    3824:	e9 81       	ldd	r30, Y+1	; 0x01
    3826:	fa 81       	ldd	r31, Y+2	; 0x02
    3828:	80 81       	ld	r24, Z
    382a:	81 30       	cpi	r24, 0x01	; 1
    382c:	d9 f4       	brne	.+54     	; 0x3864 <Timer0_Init+0x92>
	{
		/*choosing compare mode*/
		CLEAR_BIT(TCCR0,WGM00);
    382e:	a3 e5       	ldi	r26, 0x53	; 83
    3830:	b0 e0       	ldi	r27, 0x00	; 0
    3832:	e3 e5       	ldi	r30, 0x53	; 83
    3834:	f0 e0       	ldi	r31, 0x00	; 0
    3836:	80 81       	ld	r24, Z
    3838:	8f 7b       	andi	r24, 0xBF	; 191
    383a:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    383c:	a3 e5       	ldi	r26, 0x53	; 83
    383e:	b0 e0       	ldi	r27, 0x00	; 0
    3840:	e3 e5       	ldi	r30, 0x53	; 83
    3842:	f0 e0       	ldi	r31, 0x00	; 0
    3844:	80 81       	ld	r24, Z
    3846:	88 60       	ori	r24, 0x08	; 8
    3848:	8c 93       	st	X, r24
		/*enable compare mode interrupt*/
		SET_BIT(TIMSK,OCIE0);
    384a:	a9 e5       	ldi	r26, 0x59	; 89
    384c:	b0 e0       	ldi	r27, 0x00	; 0
    384e:	e9 e5       	ldi	r30, 0x59	; 89
    3850:	f0 e0       	ldi	r31, 0x00	; 0
    3852:	80 81       	ld	r24, Z
    3854:	82 60       	ori	r24, 0x02	; 2
    3856:	8c 93       	st	X, r24
		/*Compare value of the timer*/
		OCR0 = Config_Ptr->compare_value;
    3858:	ac e5       	ldi	r26, 0x5C	; 92
    385a:	b0 e0       	ldi	r27, 0x00	; 0
    385c:	e9 81       	ldd	r30, Y+1	; 0x01
    385e:	fa 81       	ldd	r31, Y+2	; 0x02
    3860:	83 81       	ldd	r24, Z+3	; 0x03
    3862:	8c 93       	st	X, r24
	}
	/*Normal port operation, OC0 disconnected*/
	CLEAR_BIT(TCCR0,COM00);
    3864:	a3 e5       	ldi	r26, 0x53	; 83
    3866:	b0 e0       	ldi	r27, 0x00	; 0
    3868:	e3 e5       	ldi	r30, 0x53	; 83
    386a:	f0 e0       	ldi	r31, 0x00	; 0
    386c:	80 81       	ld	r24, Z
    386e:	8f 7e       	andi	r24, 0xEF	; 239
    3870:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,COM01);
    3872:	a3 e5       	ldi	r26, 0x53	; 83
    3874:	b0 e0       	ldi	r27, 0x00	; 0
    3876:	e3 e5       	ldi	r30, 0x53	; 83
    3878:	f0 e0       	ldi	r31, 0x00	; 0
    387a:	80 81       	ld	r24, Z
    387c:	8f 7d       	andi	r24, 0xDF	; 223
    387e:	8c 93       	st	X, r24

	/*prescaler*/
	TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->prescaler);
    3880:	a3 e5       	ldi	r26, 0x53	; 83
    3882:	b0 e0       	ldi	r27, 0x00	; 0
    3884:	e3 e5       	ldi	r30, 0x53	; 83
    3886:	f0 e0       	ldi	r31, 0x00	; 0
    3888:	80 81       	ld	r24, Z
    388a:	98 2f       	mov	r25, r24
    388c:	98 7f       	andi	r25, 0xF8	; 248
    388e:	e9 81       	ldd	r30, Y+1	; 0x01
    3890:	fa 81       	ldd	r31, Y+2	; 0x02
    3892:	81 81       	ldd	r24, Z+1	; 0x01
    3894:	89 2b       	or	r24, r25
    3896:	8c 93       	st	X, r24

	/*initial value of the timer*/
	TCNT0 = Config_Ptr->initial_value;
    3898:	a2 e5       	ldi	r26, 0x52	; 82
    389a:	b0 e0       	ldi	r27, 0x00	; 0
    389c:	e9 81       	ldd	r30, Y+1	; 0x01
    389e:	fa 81       	ldd	r31, Y+2	; 0x02
    38a0:	82 81       	ldd	r24, Z+2	; 0x02
    38a2:	8c 93       	st	X, r24


}
    38a4:	0f 90       	pop	r0
    38a6:	0f 90       	pop	r0
    38a8:	cf 91       	pop	r28
    38aa:	df 91       	pop	r29
    38ac:	08 95       	ret

000038ae <Timer0_DeInit>:

void Timer0_DeInit(void)
{
    38ae:	df 93       	push	r29
    38b0:	cf 93       	push	r28
    38b2:	cd b7       	in	r28, 0x3d	; 61
    38b4:	de b7       	in	r29, 0x3e	; 62
	/*clear all the timer registers*/
	TCCR0=0;
    38b6:	e3 e5       	ldi	r30, 0x53	; 83
    38b8:	f0 e0       	ldi	r31, 0x00	; 0
    38ba:	10 82       	st	Z, r1
	TCNT0=0;
    38bc:	e2 e5       	ldi	r30, 0x52	; 82
    38be:	f0 e0       	ldi	r31, 0x00	; 0
    38c0:	10 82       	st	Z, r1
	OCR0=0;
    38c2:	ec e5       	ldi	r30, 0x5C	; 92
    38c4:	f0 e0       	ldi	r31, 0x00	; 0
    38c6:	10 82       	st	Z, r1
    /*Disable the interrupts*/
	CLEAR_BIT(TIMSK,OCIE0);
    38c8:	a9 e5       	ldi	r26, 0x59	; 89
    38ca:	b0 e0       	ldi	r27, 0x00	; 0
    38cc:	e9 e5       	ldi	r30, 0x59	; 89
    38ce:	f0 e0       	ldi	r31, 0x00	; 0
    38d0:	80 81       	ld	r24, Z
    38d2:	8d 7f       	andi	r24, 0xFD	; 253
    38d4:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE0);
    38d6:	a9 e5       	ldi	r26, 0x59	; 89
    38d8:	b0 e0       	ldi	r27, 0x00	; 0
    38da:	e9 e5       	ldi	r30, 0x59	; 89
    38dc:	f0 e0       	ldi	r31, 0x00	; 0
    38de:	80 81       	ld	r24, Z
    38e0:	8e 7f       	andi	r24, 0xFE	; 254
    38e2:	8c 93       	st	X, r24
}
    38e4:	cf 91       	pop	r28
    38e6:	df 91       	pop	r29
    38e8:	08 95       	ret

000038ea <Timer0_setCallBack>:

void Timer0_setCallBack(void(*a_ptr)(void))
{
    38ea:	df 93       	push	r29
    38ec:	cf 93       	push	r28
    38ee:	00 d0       	rcall	.+0      	; 0x38f0 <Timer0_setCallBack+0x6>
    38f0:	cd b7       	in	r28, 0x3d	; 61
    38f2:	de b7       	in	r29, 0x3e	; 62
    38f4:	9a 83       	std	Y+2, r25	; 0x02
    38f6:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    38f8:	89 81       	ldd	r24, Y+1	; 0x01
    38fa:	9a 81       	ldd	r25, Y+2	; 0x02
    38fc:	90 93 91 01 	sts	0x0191, r25
    3900:	80 93 90 01 	sts	0x0190, r24
}
    3904:	0f 90       	pop	r0
    3906:	0f 90       	pop	r0
    3908:	cf 91       	pop	r28
    390a:	df 91       	pop	r29
    390c:	08 95       	ret

0000390e <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    390e:	0f 93       	push	r16
    3910:	1f 93       	push	r17
    3912:	df 93       	push	r29
    3914:	cf 93       	push	r28
    3916:	00 d0       	rcall	.+0      	; 0x3918 <TWI_init+0xa>
    3918:	cd b7       	in	r28, 0x3d	; 61
    391a:	de b7       	in	r29, 0x3e	; 62
    391c:	9a 83       	std	Y+2, r25	; 0x02
    391e:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = (4000000/Config_Ptr->bit_rate)-8;
    3920:	00 e2       	ldi	r16, 0x20	; 32
    3922:	10 e0       	ldi	r17, 0x00	; 0
    3924:	e9 81       	ldd	r30, Y+1	; 0x01
    3926:	fa 81       	ldd	r31, Y+2	; 0x02
    3928:	21 81       	ldd	r18, Z+1	; 0x01
    392a:	32 81       	ldd	r19, Z+2	; 0x02
    392c:	43 81       	ldd	r20, Z+3	; 0x03
    392e:	54 81       	ldd	r21, Z+4	; 0x04
    3930:	80 e0       	ldi	r24, 0x00	; 0
    3932:	99 e0       	ldi	r25, 0x09	; 9
    3934:	ad e3       	ldi	r26, 0x3D	; 61
    3936:	b0 e0       	ldi	r27, 0x00	; 0
    3938:	bc 01       	movw	r22, r24
    393a:	cd 01       	movw	r24, r26
    393c:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <__udivmodsi4>
    3940:	da 01       	movw	r26, r20
    3942:	c9 01       	movw	r24, r18
    3944:	88 50       	subi	r24, 0x08	; 8
    3946:	f8 01       	movw	r30, r16
    3948:	80 83       	st	Z, r24
	TWSR = 0x00;
    394a:	e1 e2       	ldi	r30, 0x21	; 33
    394c:	f0 e0       	ldi	r31, 0x00	; 0
    394e:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    //TWAR = 0b00000010; // my address = 0x01 :)
	TWAR =Config_Ptr->address;
    3950:	a2 e2       	ldi	r26, 0x22	; 34
    3952:	b0 e0       	ldi	r27, 0x00	; 0
    3954:	e9 81       	ldd	r30, Y+1	; 0x01
    3956:	fa 81       	ldd	r31, Y+2	; 0x02
    3958:	80 81       	ld	r24, Z
    395a:	8c 93       	st	X, r24
    TWCR = (1<<TWEN); /* enable TWI */
    395c:	e6 e5       	ldi	r30, 0x56	; 86
    395e:	f0 e0       	ldi	r31, 0x00	; 0
    3960:	84 e0       	ldi	r24, 0x04	; 4
    3962:	80 83       	st	Z, r24
}
    3964:	0f 90       	pop	r0
    3966:	0f 90       	pop	r0
    3968:	cf 91       	pop	r28
    396a:	df 91       	pop	r29
    396c:	1f 91       	pop	r17
    396e:	0f 91       	pop	r16
    3970:	08 95       	ret

00003972 <TWI_start>:

void TWI_start(void)
{
    3972:	df 93       	push	r29
    3974:	cf 93       	push	r28
    3976:	cd b7       	in	r28, 0x3d	; 61
    3978:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    397a:	e6 e5       	ldi	r30, 0x56	; 86
    397c:	f0 e0       	ldi	r31, 0x00	; 0
    397e:	84 ea       	ldi	r24, 0xA4	; 164
    3980:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3982:	e6 e5       	ldi	r30, 0x56	; 86
    3984:	f0 e0       	ldi	r31, 0x00	; 0
    3986:	80 81       	ld	r24, Z
    3988:	88 23       	and	r24, r24
    398a:	dc f7       	brge	.-10     	; 0x3982 <TWI_start+0x10>
}
    398c:	cf 91       	pop	r28
    398e:	df 91       	pop	r29
    3990:	08 95       	ret

00003992 <TWI_stop>:

void TWI_stop(void)
{
    3992:	df 93       	push	r29
    3994:	cf 93       	push	r28
    3996:	cd b7       	in	r28, 0x3d	; 61
    3998:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    399a:	e6 e5       	ldi	r30, 0x56	; 86
    399c:	f0 e0       	ldi	r31, 0x00	; 0
    399e:	84 e9       	ldi	r24, 0x94	; 148
    39a0:	80 83       	st	Z, r24
}
    39a2:	cf 91       	pop	r28
    39a4:	df 91       	pop	r29
    39a6:	08 95       	ret

000039a8 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    39a8:	df 93       	push	r29
    39aa:	cf 93       	push	r28
    39ac:	0f 92       	push	r0
    39ae:	cd b7       	in	r28, 0x3d	; 61
    39b0:	de b7       	in	r29, 0x3e	; 62
    39b2:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    39b4:	e3 e2       	ldi	r30, 0x23	; 35
    39b6:	f0 e0       	ldi	r31, 0x00	; 0
    39b8:	89 81       	ldd	r24, Y+1	; 0x01
    39ba:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    39bc:	e6 e5       	ldi	r30, 0x56	; 86
    39be:	f0 e0       	ldi	r31, 0x00	; 0
    39c0:	84 e8       	ldi	r24, 0x84	; 132
    39c2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    39c4:	e6 e5       	ldi	r30, 0x56	; 86
    39c6:	f0 e0       	ldi	r31, 0x00	; 0
    39c8:	80 81       	ld	r24, Z
    39ca:	88 23       	and	r24, r24
    39cc:	dc f7       	brge	.-10     	; 0x39c4 <TWI_writeByte+0x1c>
}
    39ce:	0f 90       	pop	r0
    39d0:	cf 91       	pop	r28
    39d2:	df 91       	pop	r29
    39d4:	08 95       	ret

000039d6 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    39d6:	df 93       	push	r29
    39d8:	cf 93       	push	r28
    39da:	cd b7       	in	r28, 0x3d	; 61
    39dc:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    39de:	e6 e5       	ldi	r30, 0x56	; 86
    39e0:	f0 e0       	ldi	r31, 0x00	; 0
    39e2:	84 ec       	ldi	r24, 0xC4	; 196
    39e4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    39e6:	e6 e5       	ldi	r30, 0x56	; 86
    39e8:	f0 e0       	ldi	r31, 0x00	; 0
    39ea:	80 81       	ld	r24, Z
    39ec:	88 23       	and	r24, r24
    39ee:	dc f7       	brge	.-10     	; 0x39e6 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    39f0:	e3 e2       	ldi	r30, 0x23	; 35
    39f2:	f0 e0       	ldi	r31, 0x00	; 0
    39f4:	80 81       	ld	r24, Z
}
    39f6:	cf 91       	pop	r28
    39f8:	df 91       	pop	r29
    39fa:	08 95       	ret

000039fc <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    39fc:	df 93       	push	r29
    39fe:	cf 93       	push	r28
    3a00:	cd b7       	in	r28, 0x3d	; 61
    3a02:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    3a04:	e6 e5       	ldi	r30, 0x56	; 86
    3a06:	f0 e0       	ldi	r31, 0x00	; 0
    3a08:	84 e8       	ldi	r24, 0x84	; 132
    3a0a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3a0c:	e6 e5       	ldi	r30, 0x56	; 86
    3a0e:	f0 e0       	ldi	r31, 0x00	; 0
    3a10:	80 81       	ld	r24, Z
    3a12:	88 23       	and	r24, r24
    3a14:	dc f7       	brge	.-10     	; 0x3a0c <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    3a16:	e3 e2       	ldi	r30, 0x23	; 35
    3a18:	f0 e0       	ldi	r31, 0x00	; 0
    3a1a:	80 81       	ld	r24, Z
}
    3a1c:	cf 91       	pop	r28
    3a1e:	df 91       	pop	r29
    3a20:	08 95       	ret

00003a22 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    3a22:	df 93       	push	r29
    3a24:	cf 93       	push	r28
    3a26:	0f 92       	push	r0
    3a28:	cd b7       	in	r28, 0x3d	; 61
    3a2a:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    3a2c:	e1 e2       	ldi	r30, 0x21	; 33
    3a2e:	f0 e0       	ldi	r31, 0x00	; 0
    3a30:	80 81       	ld	r24, Z
    3a32:	88 7f       	andi	r24, 0xF8	; 248
    3a34:	89 83       	std	Y+1, r24	; 0x01
    return status;
    3a36:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a38:	0f 90       	pop	r0
    3a3a:	cf 91       	pop	r28
    3a3c:	df 91       	pop	r29
    3a3e:	08 95       	ret

00003a40 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3a40:	df 93       	push	r29
    3a42:	cf 93       	push	r28
    3a44:	00 d0       	rcall	.+0      	; 0x3a46 <UART_init+0x6>
    3a46:	00 d0       	rcall	.+0      	; 0x3a48 <UART_init+0x8>
    3a48:	cd b7       	in	r28, 0x3d	; 61
    3a4a:	de b7       	in	r29, 0x3e	; 62
    3a4c:	9c 83       	std	Y+4, r25	; 0x04
    3a4e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3a50:	1a 82       	std	Y+2, r1	; 0x02
    3a52:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3a54:	eb e2       	ldi	r30, 0x2B	; 43
    3a56:	f0 e0       	ldi	r31, 0x00	; 0
    3a58:	82 e0       	ldi	r24, 0x02	; 2
    3a5a:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 *************************/
	if((Config_Ptr->data_bits_number)>Eight){
    3a5c:	eb 81       	ldd	r30, Y+3	; 0x03
    3a5e:	fc 81       	ldd	r31, Y+4	; 0x04
    3a60:	82 81       	ldd	r24, Z+2	; 0x02
    3a62:	84 30       	cpi	r24, 0x04	; 4
    3a64:	28 f0       	brcs	.+10     	; 0x3a70 <UART_init+0x30>
		UCSRB=(1<<RXEN) | (1<<TXEN) | (1<<UCSZ2);
    3a66:	ea e2       	ldi	r30, 0x2A	; 42
    3a68:	f0 e0       	ldi	r31, 0x00	; 0
    3a6a:	8c e1       	ldi	r24, 0x1C	; 28
    3a6c:	80 83       	st	Z, r24
    3a6e:	04 c0       	rjmp	.+8      	; 0x3a78 <UART_init+0x38>
	}
	else{
		UCSRB = (1<<RXEN) | (1<<TXEN);
    3a70:	ea e2       	ldi	r30, 0x2A	; 42
    3a72:	f0 e0       	ldi	r31, 0x00	; 0
    3a74:	88 e1       	ldi	r24, 0x18	; 24
    3a76:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 *************************/
	UCSRC=0;
    3a78:	e0 e4       	ldi	r30, 0x40	; 64
    3a7a:	f0 e0       	ldi	r31, 0x00	; 0
    3a7c:	10 82       	st	Z, r1
	UCSRC=(UCSRC&0xf9) | (Config_Ptr->data_bits_number<<1);
    3a7e:	a0 e4       	ldi	r26, 0x40	; 64
    3a80:	b0 e0       	ldi	r27, 0x00	; 0
    3a82:	e0 e4       	ldi	r30, 0x40	; 64
    3a84:	f0 e0       	ldi	r31, 0x00	; 0
    3a86:	80 81       	ld	r24, Z
    3a88:	28 2f       	mov	r18, r24
    3a8a:	29 7f       	andi	r18, 0xF9	; 249
    3a8c:	eb 81       	ldd	r30, Y+3	; 0x03
    3a8e:	fc 81       	ldd	r31, Y+4	; 0x04
    3a90:	82 81       	ldd	r24, Z+2	; 0x02
    3a92:	88 2f       	mov	r24, r24
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	88 0f       	add	r24, r24
    3a98:	99 1f       	adc	r25, r25
    3a9a:	82 2b       	or	r24, r18
    3a9c:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xf7)|((Config_Ptr->stop_bit)<<3);
    3a9e:	a0 e4       	ldi	r26, 0x40	; 64
    3aa0:	b0 e0       	ldi	r27, 0x00	; 0
    3aa2:	e0 e4       	ldi	r30, 0x40	; 64
    3aa4:	f0 e0       	ldi	r31, 0x00	; 0
    3aa6:	80 81       	ld	r24, Z
    3aa8:	28 2f       	mov	r18, r24
    3aaa:	27 7f       	andi	r18, 0xF7	; 247
    3aac:	eb 81       	ldd	r30, Y+3	; 0x03
    3aae:	fc 81       	ldd	r31, Y+4	; 0x04
    3ab0:	81 81       	ldd	r24, Z+1	; 0x01
    3ab2:	88 2f       	mov	r24, r24
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	88 0f       	add	r24, r24
    3ab8:	99 1f       	adc	r25, r25
    3aba:	88 0f       	add	r24, r24
    3abc:	99 1f       	adc	r25, r25
    3abe:	88 0f       	add	r24, r24
    3ac0:	99 1f       	adc	r25, r25
    3ac2:	82 2b       	or	r24, r18
    3ac4:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xcf)|((Config_Ptr->parity)<<4);
    3ac6:	a0 e4       	ldi	r26, 0x40	; 64
    3ac8:	b0 e0       	ldi	r27, 0x00	; 0
    3aca:	e0 e4       	ldi	r30, 0x40	; 64
    3acc:	f0 e0       	ldi	r31, 0x00	; 0
    3ace:	80 81       	ld	r24, Z
    3ad0:	28 2f       	mov	r18, r24
    3ad2:	2f 7c       	andi	r18, 0xCF	; 207
    3ad4:	eb 81       	ldd	r30, Y+3	; 0x03
    3ad6:	fc 81       	ldd	r31, Y+4	; 0x04
    3ad8:	80 81       	ld	r24, Z
    3ada:	88 2f       	mov	r24, r24
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	82 95       	swap	r24
    3ae0:	92 95       	swap	r25
    3ae2:	90 7f       	andi	r25, 0xF0	; 240
    3ae4:	98 27       	eor	r25, r24
    3ae6:	80 7f       	andi	r24, 0xF0	; 240
    3ae8:	98 27       	eor	r25, r24
    3aea:	82 2b       	or	r24, r18
    3aec:	8c 93       	st	X, r24
	UCSRC = UCSRC|(1<<URSEL);
    3aee:	a0 e4       	ldi	r26, 0x40	; 64
    3af0:	b0 e0       	ldi	r27, 0x00	; 0
    3af2:	e0 e4       	ldi	r30, 0x40	; 64
    3af4:	f0 e0       	ldi	r31, 0x00	; 0
    3af6:	80 81       	ld	r24, Z
    3af8:	80 68       	ori	r24, 0x80	; 128
    3afa:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) *8UL))) - 1);
    3afc:	eb 81       	ldd	r30, Y+3	; 0x03
    3afe:	fc 81       	ldd	r31, Y+4	; 0x04
    3b00:	83 81       	ldd	r24, Z+3	; 0x03
    3b02:	94 81       	ldd	r25, Z+4	; 0x04
    3b04:	a5 81       	ldd	r26, Z+5	; 0x05
    3b06:	b6 81       	ldd	r27, Z+6	; 0x06
    3b08:	88 0f       	add	r24, r24
    3b0a:	99 1f       	adc	r25, r25
    3b0c:	aa 1f       	adc	r26, r26
    3b0e:	bb 1f       	adc	r27, r27
    3b10:	88 0f       	add	r24, r24
    3b12:	99 1f       	adc	r25, r25
    3b14:	aa 1f       	adc	r26, r26
    3b16:	bb 1f       	adc	r27, r27
    3b18:	88 0f       	add	r24, r24
    3b1a:	99 1f       	adc	r25, r25
    3b1c:	aa 1f       	adc	r26, r26
    3b1e:	bb 1f       	adc	r27, r27
    3b20:	9c 01       	movw	r18, r24
    3b22:	ad 01       	movw	r20, r26
    3b24:	80 e4       	ldi	r24, 0x40	; 64
    3b26:	92 e4       	ldi	r25, 0x42	; 66
    3b28:	af e0       	ldi	r26, 0x0F	; 15
    3b2a:	b0 e0       	ldi	r27, 0x00	; 0
    3b2c:	bc 01       	movw	r22, r24
    3b2e:	cd 01       	movw	r24, r26
    3b30:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <__udivmodsi4>
    3b34:	da 01       	movw	r26, r20
    3b36:	c9 01       	movw	r24, r18
    3b38:	01 97       	sbiw	r24, 0x01	; 1
    3b3a:	9a 83       	std	Y+2, r25	; 0x02
    3b3c:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3b3e:	e0 e4       	ldi	r30, 0x40	; 64
    3b40:	f0 e0       	ldi	r31, 0x00	; 0
    3b42:	89 81       	ldd	r24, Y+1	; 0x01
    3b44:	9a 81       	ldd	r25, Y+2	; 0x02
    3b46:	89 2f       	mov	r24, r25
    3b48:	99 27       	eor	r25, r25
    3b4a:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3b4c:	e9 e2       	ldi	r30, 0x29	; 41
    3b4e:	f0 e0       	ldi	r31, 0x00	; 0
    3b50:	89 81       	ldd	r24, Y+1	; 0x01
    3b52:	80 83       	st	Z, r24
}
    3b54:	0f 90       	pop	r0
    3b56:	0f 90       	pop	r0
    3b58:	0f 90       	pop	r0
    3b5a:	0f 90       	pop	r0
    3b5c:	cf 91       	pop	r28
    3b5e:	df 91       	pop	r29
    3b60:	08 95       	ret

00003b62 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3b62:	df 93       	push	r29
    3b64:	cf 93       	push	r28
    3b66:	0f 92       	push	r0
    3b68:	cd b7       	in	r28, 0x3d	; 61
    3b6a:	de b7       	in	r29, 0x3e	; 62
    3b6c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3b6e:	eb e2       	ldi	r30, 0x2B	; 43
    3b70:	f0 e0       	ldi	r31, 0x00	; 0
    3b72:	80 81       	ld	r24, Z
    3b74:	88 2f       	mov	r24, r24
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	80 72       	andi	r24, 0x20	; 32
    3b7a:	90 70       	andi	r25, 0x00	; 0
    3b7c:	00 97       	sbiw	r24, 0x00	; 0
    3b7e:	b9 f3       	breq	.-18     	; 0x3b6e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3b80:	ec e2       	ldi	r30, 0x2C	; 44
    3b82:	f0 e0       	ldi	r31, 0x00	; 0
    3b84:	89 81       	ldd	r24, Y+1	; 0x01
    3b86:	80 83       	st	Z, r24
	/********* Another Method *********
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	***********************/
}
    3b88:	0f 90       	pop	r0
    3b8a:	cf 91       	pop	r28
    3b8c:	df 91       	pop	r29
    3b8e:	08 95       	ret

00003b90 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3b90:	df 93       	push	r29
    3b92:	cf 93       	push	r28
    3b94:	cd b7       	in	r28, 0x3d	; 61
    3b96:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3b98:	eb e2       	ldi	r30, 0x2B	; 43
    3b9a:	f0 e0       	ldi	r31, 0x00	; 0
    3b9c:	80 81       	ld	r24, Z
    3b9e:	88 23       	and	r24, r24
    3ba0:	dc f7       	brge	.-10     	; 0x3b98 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3ba2:	ec e2       	ldi	r30, 0x2C	; 44
    3ba4:	f0 e0       	ldi	r31, 0x00	; 0
    3ba6:	80 81       	ld	r24, Z
}
    3ba8:	cf 91       	pop	r28
    3baa:	df 91       	pop	r29
    3bac:	08 95       	ret

00003bae <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3bae:	df 93       	push	r29
    3bb0:	cf 93       	push	r28
    3bb2:	00 d0       	rcall	.+0      	; 0x3bb4 <UART_sendString+0x6>
    3bb4:	0f 92       	push	r0
    3bb6:	cd b7       	in	r28, 0x3d	; 61
    3bb8:	de b7       	in	r29, 0x3e	; 62
    3bba:	9b 83       	std	Y+3, r25	; 0x03
    3bbc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3bbe:	19 82       	std	Y+1, r1	; 0x01
    3bc0:	0e c0       	rjmp	.+28     	; 0x3bde <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3bc2:	89 81       	ldd	r24, Y+1	; 0x01
    3bc4:	28 2f       	mov	r18, r24
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bca:	9b 81       	ldd	r25, Y+3	; 0x03
    3bcc:	fc 01       	movw	r30, r24
    3bce:	e2 0f       	add	r30, r18
    3bd0:	f3 1f       	adc	r31, r19
    3bd2:	80 81       	ld	r24, Z
    3bd4:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <UART_sendByte>
		i++;
    3bd8:	89 81       	ldd	r24, Y+1	; 0x01
    3bda:	8f 5f       	subi	r24, 0xFF	; 255
    3bdc:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3bde:	89 81       	ldd	r24, Y+1	; 0x01
    3be0:	28 2f       	mov	r18, r24
    3be2:	30 e0       	ldi	r19, 0x00	; 0
    3be4:	8a 81       	ldd	r24, Y+2	; 0x02
    3be6:	9b 81       	ldd	r25, Y+3	; 0x03
    3be8:	fc 01       	movw	r30, r24
    3bea:	e2 0f       	add	r30, r18
    3bec:	f3 1f       	adc	r31, r19
    3bee:	80 81       	ld	r24, Z
    3bf0:	88 23       	and	r24, r24
    3bf2:	39 f7       	brne	.-50     	; 0x3bc2 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	***********************/
}
    3bf4:	0f 90       	pop	r0
    3bf6:	0f 90       	pop	r0
    3bf8:	0f 90       	pop	r0
    3bfa:	cf 91       	pop	r28
    3bfc:	df 91       	pop	r29
    3bfe:	08 95       	ret

00003c00 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3c00:	0f 93       	push	r16
    3c02:	1f 93       	push	r17
    3c04:	df 93       	push	r29
    3c06:	cf 93       	push	r28
    3c08:	00 d0       	rcall	.+0      	; 0x3c0a <UART_receiveString+0xa>
    3c0a:	0f 92       	push	r0
    3c0c:	cd b7       	in	r28, 0x3d	; 61
    3c0e:	de b7       	in	r29, 0x3e	; 62
    3c10:	9b 83       	std	Y+3, r25	; 0x03
    3c12:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3c14:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3c16:	89 81       	ldd	r24, Y+1	; 0x01
    3c18:	28 2f       	mov	r18, r24
    3c1a:	30 e0       	ldi	r19, 0x00	; 0
    3c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c20:	8c 01       	movw	r16, r24
    3c22:	02 0f       	add	r16, r18
    3c24:	13 1f       	adc	r17, r19
    3c26:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <UART_recieveByte>
    3c2a:	f8 01       	movw	r30, r16
    3c2c:	80 83       	st	Z, r24
    3c2e:	0f c0       	rjmp	.+30     	; 0x3c4e <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3c30:	89 81       	ldd	r24, Y+1	; 0x01
    3c32:	8f 5f       	subi	r24, 0xFF	; 255
    3c34:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3c36:	89 81       	ldd	r24, Y+1	; 0x01
    3c38:	28 2f       	mov	r18, r24
    3c3a:	30 e0       	ldi	r19, 0x00	; 0
    3c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c3e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c40:	8c 01       	movw	r16, r24
    3c42:	02 0f       	add	r16, r18
    3c44:	13 1f       	adc	r17, r19
    3c46:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <UART_recieveByte>
    3c4a:	f8 01       	movw	r30, r16
    3c4c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3c4e:	89 81       	ldd	r24, Y+1	; 0x01
    3c50:	28 2f       	mov	r18, r24
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	8a 81       	ldd	r24, Y+2	; 0x02
    3c56:	9b 81       	ldd	r25, Y+3	; 0x03
    3c58:	fc 01       	movw	r30, r24
    3c5a:	e2 0f       	add	r30, r18
    3c5c:	f3 1f       	adc	r31, r19
    3c5e:	80 81       	ld	r24, Z
    3c60:	83 32       	cpi	r24, 0x23	; 35
    3c62:	31 f7       	brne	.-52     	; 0x3c30 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3c64:	89 81       	ldd	r24, Y+1	; 0x01
    3c66:	28 2f       	mov	r18, r24
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c6c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c6e:	fc 01       	movw	r30, r24
    3c70:	e2 0f       	add	r30, r18
    3c72:	f3 1f       	adc	r31, r19
    3c74:	10 82       	st	Z, r1
}
    3c76:	0f 90       	pop	r0
    3c78:	0f 90       	pop	r0
    3c7a:	0f 90       	pop	r0
    3c7c:	cf 91       	pop	r28
    3c7e:	df 91       	pop	r29
    3c80:	1f 91       	pop	r17
    3c82:	0f 91       	pop	r16
    3c84:	08 95       	ret

00003c86 <__udivmodsi4>:
    3c86:	a1 e2       	ldi	r26, 0x21	; 33
    3c88:	1a 2e       	mov	r1, r26
    3c8a:	aa 1b       	sub	r26, r26
    3c8c:	bb 1b       	sub	r27, r27
    3c8e:	fd 01       	movw	r30, r26
    3c90:	0d c0       	rjmp	.+26     	; 0x3cac <__udivmodsi4_ep>

00003c92 <__udivmodsi4_loop>:
    3c92:	aa 1f       	adc	r26, r26
    3c94:	bb 1f       	adc	r27, r27
    3c96:	ee 1f       	adc	r30, r30
    3c98:	ff 1f       	adc	r31, r31
    3c9a:	a2 17       	cp	r26, r18
    3c9c:	b3 07       	cpc	r27, r19
    3c9e:	e4 07       	cpc	r30, r20
    3ca0:	f5 07       	cpc	r31, r21
    3ca2:	20 f0       	brcs	.+8      	; 0x3cac <__udivmodsi4_ep>
    3ca4:	a2 1b       	sub	r26, r18
    3ca6:	b3 0b       	sbc	r27, r19
    3ca8:	e4 0b       	sbc	r30, r20
    3caa:	f5 0b       	sbc	r31, r21

00003cac <__udivmodsi4_ep>:
    3cac:	66 1f       	adc	r22, r22
    3cae:	77 1f       	adc	r23, r23
    3cb0:	88 1f       	adc	r24, r24
    3cb2:	99 1f       	adc	r25, r25
    3cb4:	1a 94       	dec	r1
    3cb6:	69 f7       	brne	.-38     	; 0x3c92 <__udivmodsi4_loop>
    3cb8:	60 95       	com	r22
    3cba:	70 95       	com	r23
    3cbc:	80 95       	com	r24
    3cbe:	90 95       	com	r25
    3cc0:	9b 01       	movw	r18, r22
    3cc2:	ac 01       	movw	r20, r24
    3cc4:	bd 01       	movw	r22, r26
    3cc6:	cf 01       	movw	r24, r30
    3cc8:	08 95       	ret

00003cca <__prologue_saves__>:
    3cca:	2f 92       	push	r2
    3ccc:	3f 92       	push	r3
    3cce:	4f 92       	push	r4
    3cd0:	5f 92       	push	r5
    3cd2:	6f 92       	push	r6
    3cd4:	7f 92       	push	r7
    3cd6:	8f 92       	push	r8
    3cd8:	9f 92       	push	r9
    3cda:	af 92       	push	r10
    3cdc:	bf 92       	push	r11
    3cde:	cf 92       	push	r12
    3ce0:	df 92       	push	r13
    3ce2:	ef 92       	push	r14
    3ce4:	ff 92       	push	r15
    3ce6:	0f 93       	push	r16
    3ce8:	1f 93       	push	r17
    3cea:	cf 93       	push	r28
    3cec:	df 93       	push	r29
    3cee:	cd b7       	in	r28, 0x3d	; 61
    3cf0:	de b7       	in	r29, 0x3e	; 62
    3cf2:	ca 1b       	sub	r28, r26
    3cf4:	db 0b       	sbc	r29, r27
    3cf6:	0f b6       	in	r0, 0x3f	; 63
    3cf8:	f8 94       	cli
    3cfa:	de bf       	out	0x3e, r29	; 62
    3cfc:	0f be       	out	0x3f, r0	; 63
    3cfe:	cd bf       	out	0x3d, r28	; 61
    3d00:	09 94       	ijmp

00003d02 <__epilogue_restores__>:
    3d02:	2a 88       	ldd	r2, Y+18	; 0x12
    3d04:	39 88       	ldd	r3, Y+17	; 0x11
    3d06:	48 88       	ldd	r4, Y+16	; 0x10
    3d08:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d0a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d0c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d10:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d12:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d14:	b9 84       	ldd	r11, Y+9	; 0x09
    3d16:	c8 84       	ldd	r12, Y+8	; 0x08
    3d18:	df 80       	ldd	r13, Y+7	; 0x07
    3d1a:	ee 80       	ldd	r14, Y+6	; 0x06
    3d1c:	fd 80       	ldd	r15, Y+5	; 0x05
    3d1e:	0c 81       	ldd	r16, Y+4	; 0x04
    3d20:	1b 81       	ldd	r17, Y+3	; 0x03
    3d22:	aa 81       	ldd	r26, Y+2	; 0x02
    3d24:	b9 81       	ldd	r27, Y+1	; 0x01
    3d26:	ce 0f       	add	r28, r30
    3d28:	d1 1d       	adc	r29, r1
    3d2a:	0f b6       	in	r0, 0x3f	; 63
    3d2c:	f8 94       	cli
    3d2e:	de bf       	out	0x3e, r29	; 62
    3d30:	0f be       	out	0x3f, r0	; 63
    3d32:	cd bf       	out	0x3d, r28	; 61
    3d34:	ed 01       	movw	r28, r26
    3d36:	08 95       	ret

00003d38 <itoa>:
    3d38:	fb 01       	movw	r30, r22
    3d3a:	9f 01       	movw	r18, r30
    3d3c:	e8 94       	clt
    3d3e:	42 30       	cpi	r20, 0x02	; 2
    3d40:	c4 f0       	brlt	.+48     	; 0x3d72 <itoa+0x3a>
    3d42:	45 32       	cpi	r20, 0x25	; 37
    3d44:	b4 f4       	brge	.+44     	; 0x3d72 <itoa+0x3a>
    3d46:	4a 30       	cpi	r20, 0x0A	; 10
    3d48:	29 f4       	brne	.+10     	; 0x3d54 <itoa+0x1c>
    3d4a:	97 fb       	bst	r25, 7
    3d4c:	1e f4       	brtc	.+6      	; 0x3d54 <itoa+0x1c>
    3d4e:	90 95       	com	r25
    3d50:	81 95       	neg	r24
    3d52:	9f 4f       	sbci	r25, 0xFF	; 255
    3d54:	64 2f       	mov	r22, r20
    3d56:	77 27       	eor	r23, r23
    3d58:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__udivmodhi4>
    3d5c:	80 5d       	subi	r24, 0xD0	; 208
    3d5e:	8a 33       	cpi	r24, 0x3A	; 58
    3d60:	0c f0       	brlt	.+2      	; 0x3d64 <itoa+0x2c>
    3d62:	89 5d       	subi	r24, 0xD9	; 217
    3d64:	81 93       	st	Z+, r24
    3d66:	cb 01       	movw	r24, r22
    3d68:	00 97       	sbiw	r24, 0x00	; 0
    3d6a:	a1 f7       	brne	.-24     	; 0x3d54 <itoa+0x1c>
    3d6c:	16 f4       	brtc	.+4      	; 0x3d72 <itoa+0x3a>
    3d6e:	5d e2       	ldi	r21, 0x2D	; 45
    3d70:	51 93       	st	Z+, r21
    3d72:	10 82       	st	Z, r1
    3d74:	c9 01       	movw	r24, r18
    3d76:	0c 94 bd 1e 	jmp	0x3d7a	; 0x3d7a <strrev>

00003d7a <strrev>:
    3d7a:	dc 01       	movw	r26, r24
    3d7c:	fc 01       	movw	r30, r24
    3d7e:	67 2f       	mov	r22, r23
    3d80:	71 91       	ld	r23, Z+
    3d82:	77 23       	and	r23, r23
    3d84:	e1 f7       	brne	.-8      	; 0x3d7e <strrev+0x4>
    3d86:	32 97       	sbiw	r30, 0x02	; 2
    3d88:	04 c0       	rjmp	.+8      	; 0x3d92 <strrev+0x18>
    3d8a:	7c 91       	ld	r23, X
    3d8c:	6d 93       	st	X+, r22
    3d8e:	70 83       	st	Z, r23
    3d90:	62 91       	ld	r22, -Z
    3d92:	ae 17       	cp	r26, r30
    3d94:	bf 07       	cpc	r27, r31
    3d96:	c8 f3       	brcs	.-14     	; 0x3d8a <strrev+0x10>
    3d98:	08 95       	ret

00003d9a <__udivmodhi4>:
    3d9a:	aa 1b       	sub	r26, r26
    3d9c:	bb 1b       	sub	r27, r27
    3d9e:	51 e1       	ldi	r21, 0x11	; 17
    3da0:	07 c0       	rjmp	.+14     	; 0x3db0 <__udivmodhi4_ep>

00003da2 <__udivmodhi4_loop>:
    3da2:	aa 1f       	adc	r26, r26
    3da4:	bb 1f       	adc	r27, r27
    3da6:	a6 17       	cp	r26, r22
    3da8:	b7 07       	cpc	r27, r23
    3daa:	10 f0       	brcs	.+4      	; 0x3db0 <__udivmodhi4_ep>
    3dac:	a6 1b       	sub	r26, r22
    3dae:	b7 0b       	sbc	r27, r23

00003db0 <__udivmodhi4_ep>:
    3db0:	88 1f       	adc	r24, r24
    3db2:	99 1f       	adc	r25, r25
    3db4:	5a 95       	dec	r21
    3db6:	a9 f7       	brne	.-22     	; 0x3da2 <__udivmodhi4_loop>
    3db8:	80 95       	com	r24
    3dba:	90 95       	com	r25
    3dbc:	bc 01       	movw	r22, r24
    3dbe:	cd 01       	movw	r24, r26
    3dc0:	08 95       	ret

00003dc2 <_exit>:
    3dc2:	f8 94       	cli

00003dc4 <__stop_program>:
    3dc4:	ff cf       	rjmp	.-2      	; 0x3dc4 <__stop_program>
